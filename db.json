{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CHAME","path":"CHAME","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/2023-11-02 (1).png","path":"images/2023-11-02 (1).png","modified":0,"renderable":0},{"_id":"source/images/2023-11-02 (15).png","path":"images/2023-11-02 (15).png","modified":0,"renderable":0},{"_id":"source/images/2023-11-02 (6).png","path":"images/2023-11-02 (6).png","modified":0,"renderable":0},{"_id":"source/images/2023-11-02 (5).png","path":"images/2023-11-02 (5).png","modified":0,"renderable":0},{"_id":"source/images/bg1.png","path":"images/bg1.png","modified":0,"renderable":0},{"_id":"source/images/bg2.png","path":"images/bg2.png","modified":0,"renderable":0},{"_id":"source/images/head.png","path":"images/head.png","modified":0,"renderable":0},{"_id":"themes/butterfly/source/img/2023-11-02 (1).png","path":"img/2023-11-02 (1).png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/2023-11-02 (15).png","path":"img/2023-11-02 (15).png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/2023-11-02 (5).png","path":"img/2023-11-02 (5).png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/2023-11-02 (6).png","path":"img/2023-11-02 (6).png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg1.png","path":"img/bg1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bg2.png","path":"img/bg2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/head.png","path":"img/head.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CHAME","hash":"2d9404503ec23fdb8a3eb6645b11efbf3ca2190d","modified":1707047287275},{"_id":"source/CNAME","hash":"838d8f0bc3442510158bb6b0701ff23c32118759","modified":1721728216652},{"_id":"source/test.js","hash":"f850bb6dfd93d7613619b1543b6f02fe185cb094","modified":1723342090986},{"_id":"source/_data/link.yml","hash":"a6916d38cd25f9e4887fc5bfea1f6ed2ea72e97e","modified":1706799644352},{"_id":"source/_posts/11oauth2-sso.md","hash":"ed383b43e3bb17951af31aeee3d19d6ecf409b02","modified":1721727070740},{"_id":"source/_posts/10http.md","hash":"9ea11fdeb079da51547a3e3b54393be3e02779b2","modified":1720788692974},{"_id":"source/_posts/13-3TypeScript.md","hash":"84ff98b278654d9a2c1c0be50415d447ac1376cc","modified":1723344160253},{"_id":"source/_posts/12lexical-env.md","hash":"f92953a8c265994a15ca94fe0cf3709f89aa809a","modified":1722036314938},{"_id":"source/_posts/13.2TypeScript.md","hash":"667a3c67991fa9cc995835b88b179f8993845d6f","modified":1722760138454},{"_id":"source/_posts/1android_local_notification.md","hash":"56b09cee6729c8e1d774e84bdd2541275a58a23c","modified":1706799644456},{"_id":"source/_posts/13.1TypeScript.md","hash":"529acaf61f8df6af6860cc3850804a91eecda672","modified":1722760138447},{"_id":"source/_posts/3wyyapp.md","hash":"1422cdf86abc8e3e46f3e911f653ab8cae917d48","modified":1720150801018},{"_id":"source/_posts/2some.md","hash":"6a064370e778db292b2f30be14c47044eb378eb9","modified":1720150801001},{"_id":"source/_posts/5js_debounce.md","hash":"c7932f20057923292ab39eae6b4ce62ce2866b14","modified":1719972226907},{"_id":"source/_posts/7long.md","hash":"d1c6c75eb940713a49f9b9810a9b319163dff988","modified":1720150440909},{"_id":"source/_posts/4Zing.md","hash":"c57eb5d733e289da0579603a13f280793949cf6a","modified":1720150801033},{"_id":"source/_posts/6ospp.md","hash":"980ddeba2a49ba96995553d813f17087ce6e66d4","modified":1720150440905},{"_id":"source/_posts/12what-I-Do-GLCC.md","hash":"2312e96edf037d48835227bd3c808542042d7b94","modified":1722487139652},{"_id":"source/_posts/9flutter-react.md","hash":"e9f0e069e3c9e8a1b282e1268aa43785c4b7dd96","modified":1720788692966},{"_id":"source/_posts/8Auth.md","hash":"c6213ab9c9884bffd82f817ee98212afde5a4c07","modified":1720597405942},{"_id":"source/tags/index.md","hash":"f9278f3dca878755ddb7690b3aaec480a1f06512","modified":1706799644608},{"_id":"source/_posts/10http/strong-save.png","hash":"08ded63368c9ae8f0dd3f2a53fbf200fac147a06","modified":1720746454247},{"_id":"source/categories/index.md","hash":"c5e61badd6923f79a4bf02f9fd4f4a3787fe9ff3","modified":1706799644606},{"_id":"source/_posts/10http/App-Tsl.png","hash":"ecbf6da8a78b14c719186808edd214a184c2d96c","modified":1720746685769},{"_id":"source/link/index.md","hash":"52186b5dfca8835541caacfbd5763995627b87ef","modified":1706799644607},{"_id":"source/_posts/10http/http2.png","hash":"b8e04805f02ef0288e205f406e88e81538455d1d","modified":1720746332802},{"_id":"source/_posts/12lexical-env/count-example.png","hash":"6720dc55eb431cedc2c09d583a48778654028a78","modified":1722035590623},{"_id":"source/_posts/12lexical-env/functioncreate.png","hash":"5d135b9c2e11620c55064e8aa7d422718e6993f8","modified":1722035077538},{"_id":"source/_posts/13.2TypeScript/Untitled.png","hash":"49cd91404346917bccb83df34e7cc296e1ccc001","modified":1722730640000},{"_id":"source/_posts/13.2TypeScript/Untitled1.png","hash":"def418f054f7cb879c3a690a568b75bb1ce629d8","modified":1722730640000},{"_id":"source/_posts/13.2TypeScript/Untitled3.png","hash":"23206ceab7dda127d6403bd3dd05db1f589dfcb2","modified":1722730640000},{"_id":"source/_posts/13.2TypeScript/Untitled2.png","hash":"185311ed1149e1888a428191bf53952ec9688bc6","modified":1722730640000},{"_id":"source/_posts/13.2TypeScript/Untitled6.png","hash":"b46fe56eed981800f36ce79ea6bb83afa0febaa0","modified":1722730642000},{"_id":"source/_posts/13.2TypeScript/Untitled4.png","hash":"d9293af1c3249cdefc13f5cc2387a57187c5c8f4","modified":1722730640000},{"_id":"source/_posts/13.2TypeScript/Untitled5.png","hash":"1dd64a22d4bcd6618c8b7d7bfd66067209212947","modified":1722730640000},{"_id":"source/_posts/6ospp/prs.png","hash":"d8ed4f0ac916e3dbb732465fe57cc856306c356f","modified":1718373652591},{"_id":"source/_posts/6ospp/casibase.png","hash":"e9fd35df54ff28a903696750e790408f7cf7053c","modified":1718372542752},{"_id":"source/_posts/6ospp/prdetails.png","hash":"ac711702b6c434cad2615b1a2403bb39d149d591","modified":1718373816760},{"_id":"source/_posts/9flutter-react/curr-wlp.png","hash":"2b91661c99c69d73a8d93d9c571090b1a1607f59","modified":1720655301448},{"_id":"source/_posts/9flutter-react/example.png","hash":"d68e8e28849034135ac349035ad3aa4c5c32d77a","modified":1720608093244},{"_id":"source/_posts/9flutter-react/reactvsflutter1.png","hash":"27fc0fa4cf27fd9d8392bd06436e1998740fa782","modified":1720657353259},{"_id":"source/_posts/9flutter-react/whydeepfirst.png","hash":"462199174498d847a65b01235b010438f0acc199","modified":1720614969284},{"_id":"source/_posts/9flutter-react/text-from-rich.png","hash":"7efa835ad8abd7810e52b2ebbe4bd95dea49c91e","modified":1720608157557},{"_id":"source/_posts/10http/multi-tcp.png","hash":"5863fbb98fdd8b7316c2693edb7ed2f62fc41d77","modified":1720743373526},{"_id":"source/_posts/12lexical-env/bibao-example.jpg","hash":"d0895d1969cf446d83070e67da28ed04b325c8d3","modified":1722036242824},{"_id":"source/_posts/9flutter-react/render1.png","hash":"aeae7b49bdef23b26ea893c0d4a68a2df5914170","modified":1720600526815},{"_id":"source/_posts/9flutter-react/rich-nor.png","hash":"137a6173909e2ec758d2037dab81d9d1b6af8379","modified":1720607940054},{"_id":"source/_posts/9flutter-react/rich-nor2.png","hash":"48b3cd02705bcfe369424520d737b70af9b0c997","modified":1720608007720},{"_id":"source/_posts/9flutter-react/fibertree.png","hash":"c94fd779693fae20b2d8801ac1d3973aae83d9b7","modified":1720617007784},{"_id":"source/_posts/11oauth2-sso/oauth2.png","hash":"fc8f06cd08ffc15e3b43f4c85e8d1e3334eff7f0","modified":1721690534231},{"_id":"source/_posts/11oauth2-sso/xichuangzhu.jpg","hash":"298076453940059709f385b9ea174f23f8b63335","modified":1721689689837},{"_id":"source/_posts/7long/helloworld.jpg","hash":"2dbcbbd02718b910635537ae7fb985167ccd0dda","modified":1718407343985},{"_id":"source/_posts/11oauth2-sso/wechatusers.jpg","hash":"a7b41ec03fab6a31782018c3101cda61ca77b32d","modified":1721689855597},{"_id":"source/_posts/7long/ban.jpg","hash":"8df2749f662ce0abcaaa407f6f1ce897227db537","modified":1718407328647},{"_id":"source/_posts/11oauth2-sso/ssoa.png","hash":"2fe91cf40e116a4ce16fbd41ee27704ae5785451","modified":1721693462127},{"_id":"source/_posts/11oauth2-sso/loginsuccess.jpg","hash":"0489a5846bcb68b06fd14ae6e11ca99cdd93e03c","modified":1721689893202},{"_id":"source/_posts/9flutter-react/update.jpg","hash":"60b1e5bc990ac3faad9ffcd557394dd30d356a98","modified":1720601121114},{"_id":"source/_posts/7long/total.jpg","hash":"7a55fb2dd3acccc5c2effe90869744f7b8d99b23","modified":1718407298167},{"_id":"themes/butterfly/_config.yml","hash":"4ea043d6c24ba3e5be83d3e1d2c277abbf7c219b","modified":1700984701995},{"_id":"themes/butterfly/README_CN.md","hash":"9d729ee2ffc5e5f703ccfbfbbb7b286d59071125","modified":1700983469146},{"_id":"themes/butterfly/README.md","hash":"20a91bea7f7ada8b8195d2abff106a7ce21bba20","modified":1700983469146},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1700983469145},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1700983469149},{"_id":"themes/butterfly/package.json","hash":"1e3099099a5459a30a14421c84f9ab834f54aa51","modified":1700983469194},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"1392e7b8c678cdfb54f55523693e66abc7d80538","modified":1700983469149},{"_id":"themes/butterfly/languages/default.yml","hash":"90e9e2f36dc51aa77eb7804ae048b4876035b12d","modified":1700983469148},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1700983469150},{"_id":"themes/butterfly/languages/en.yml","hash":"68127be0e6b44cfc5f31353d8b275c02939b3ff9","modified":1700983469148},{"_id":"themes/butterfly/plugins.yml","hash":"9b21d2395b435b0df05db1b3faf8b853d92cf027","modified":1700983469195},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1700983469193},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2dcc70a011b37890215ae0fd6d8f8c78aa8af6b0","modified":1700983469148},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1700983469194},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1700983469144},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1700983469144},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1700983469194},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1700983469193},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"eed9190301095b35081aa2658204cc3f15b9f5e1","modified":1700983469143},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1700983469151},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1700983469151},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1700983469150},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ea8d4e8ac6af93cd268ba8f6ffcb80417bc2501e","modified":1700983469151},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1700983469161},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1700983469145},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1700983469163},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1700983469196},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1700983469197},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1700983469197},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1700983469196},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"0a336dfe5ed08952fa0df1532421df38a74a20d6","modified":1700983469198},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1700983469145},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"ef9cd54eedf9d8de458f7d9e9203cd547f3f44d2","modified":1700983469197},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0df22d7dbfa766a65cb6032a1f003348f4307cfe","modified":1700983469199},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1700983469157},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5ed2d7ef240c927fe1b7a7fb5bf9e55e2bfd55a5","modified":1700983469199},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1700983469204},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1700983469198},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"164d5f1c2d1b4cb5a813a6fc574016743a53c019","modified":1700983469203},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ec77b3093f5de67e7032f40a5b12f1389f6f6ff","modified":1700983469204},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"5d08c3552f7d3c80a724ca628bff66321abe2e5a","modified":1700983469204},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"c863d2732ce4bdc084f2d0db92f50f80328c1007","modified":1700983469205},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"b013dc0a3d57d2caa18b89263f23871da9ec456d","modified":1700983469205},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1700983469206},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"289f85847c58f0b2b7d98a68e370a2896edb8949","modified":1700983469206},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"7c448886f230adb4f4a0208c88fff809abcb5637","modified":1700983469207},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1700983469199},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"dc56e5182dd3813dc977c9bf8556dcc7615e467b","modified":1700983469207},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"cdd992c8577d583c237b6aac9f5077d8200879b2","modified":1700983469201},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"e611074a5a7f489a8b04afac0a3f7f882ce26532","modified":1700983469207},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1700983469206},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"f448bf73103b88de4443e52d600e871cf3de3e32","modified":1700983469163},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"b12895e0765d596494e5526d121de0dd5a7c23d3","modified":1700983469201},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c74d6a9b8f71e69447f7847a5f5e81555d68b140","modified":1700983469201},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b55f71347d2ead097c7f98c0ec792b091433345c","modified":1700983469201},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"17c0095bc8d612a268cdcab000b1742dc4c6f811","modified":1700983469202},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1700983469202},{"_id":"themes/butterfly/source/js/main.js","hash":"59cd756a94ecdf3ec7b18f50691a8a6305f7a65a","modified":1700983469231},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d776c670e4076ad6049dbb64cdee7a734b51d37f","modified":1700983469234},{"_id":"themes/butterfly/source/js/utils.js","hash":"7b871fe0c4456660cff4c7b9cc4ed089adac2caf","modified":1700983469234},{"_id":"themes/butterfly/source/css/var.styl","hash":"950250f66faeb611a67540e0fa6cedbcf5a7a321","modified":1700983469229},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1700983469229},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1700983469161},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1700983469160},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1700983469155},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1700983469160},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1700983469156},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1700983469155},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1700983469161},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1700983469156},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"e7b25a322ae861dca06d458d3f914220e92758cf","modified":1700983469156},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1700983469158},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1700983469157},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1700983469158},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1700983469153},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1700983469152},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1700983469154},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1700983469153},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a7c929b90ae52b78b39b1728e3ab0e3db1cb7b9a","modified":1700983469154},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1700983469155},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"194a5f310dccecee3ae0b648e4e5318f6fbbddcd","modified":1700983469159},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1700983469159},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1700983469155},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"39e1ca0a54eb5fd3688a78737417a1aaa50914c9","modified":1700983469153},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"912df10a053db3135968e92b6fd1a707ee94c968","modified":1700983469163},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1700983469189},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"0abad416b1974a17e5be7817931d5fe799180170","modified":1700983469162},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1700983469190},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1700983469188},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1700983469188},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1700983469189},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1700983469189},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"2084b8065e63dd045bdca3dc5992014133601e28","modified":1700983469190},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1700983469190},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1700983469191},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1700983469191},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1700983469192},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1700983469165},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1700983469193},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1700983469192},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1700983469183},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"9b734d99963f3e7f562597dcf60485ccbf6e961c","modified":1700983469183},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1700983469183},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df529f71e25f1c0a00e533de7944ed3d1ba7bd8","modified":1700983469193},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a7c2fe73cc05ad3525909b86ad0ede1a9f2d3b48","modified":1700983469233},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1700983469177},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1700983469187},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e920dae9ce00177922468db49240f5aca0af4f64","modified":1700983469209},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ab3904451ae1d78903424b8b2ef815c8571e1749","modified":1700983469234},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1700983469212},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"0421da07907b3d98df64239e073b23fbb3f04149","modified":1700983469209},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"41054740cfbd1357138785464f6859681ca58493","modified":1700983469210},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1700983469214},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1700983469215},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1700983469214},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aae70ddd126b2e40158e45036abecbfa33cbfbba","modified":1700983469214},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"66a7a0e3c58ac23c81afe9fe18834b9db9c42698","modified":1700983469215},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1700983469216},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1700983469217},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1700983469216},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"f2d1a0f9c890dd2313b2996a0ec7130999a24813","modified":1700983469216},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c0b11a1a5f52e3a6af4e312a8134c93eda18a7dd","modified":1700983469217},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"80ee9d0bfe5d38aac1f0cdcea5fc88b71d310041","modified":1700983469218},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"0322237e762db401d7b4aa33168d0b9334a9ec26","modified":1700983469218},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1700983469218},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"dbc855795a881f8c805bf5c9c5c4d5d542a648ec","modified":1700983469219},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1700983469221},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1700983469220},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"a22fd15048d21452f0015d0765d295d730203308","modified":1700983469220},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1700983469221},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1700983469221},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1700983469221},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1700983469223},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1700983469222},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1700983469225},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1700983469224},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"a977cd8161ef4d6ddd5293e81403519076657430","modified":1700983469222},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"8a53d7ba5ca2f5eb4124b684e7845b648583f658","modified":1700983469224},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3e9355b76f87e2ee90f652855282b37ab5ae0b3e","modified":1700983469225},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1700983469225},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1700983469226},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1700983469226},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1700983469227},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1700983469228},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"8f95aca305b56ccd7c8c7367b03d26db816ebd5f","modified":1700983469164},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1700983469227},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1700983469164},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"353b95f9a6c2c1e777d978118cb61f909ccbf89c","modified":1700983469227},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1700983469169},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1700983469228},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1700983469170},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1700983469169},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1700983469165},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1700983469170},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1700983469170},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1700983469171},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1700983469167},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1700983469166},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1700983469166},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1700983469166},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1700983469168},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"eb8f2919ea9d52f6c829ffa8052ba2585d0b6b98","modified":1700983469172},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1700983469167},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"364d1fd655baca9132038ef1e312abde2c0bc7de","modified":1700983469173},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1700983469168},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"11f5dca1432e59f22955aaf4ac3e9de6b286d887","modified":1700983469173},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"1eab7ca1cb16c6786f9c3ca0efef8cc15e444ab4","modified":1700983469174},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c86c8fc1a28514a02a1f6a25ca9ec05eb3955b7","modified":1700983469174},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"09c2ef4bc6d005f96dfa48b1d9af1ec095c5266d","modified":1700983469175},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1700983469174},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"7f450664e6323a076ae59c393b0f22167cfa82e5","modified":1700983469175},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1700983469175},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1700983469178},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"f78c9c20c86d58c7cf099f6f8d6097103d7d43e5","modified":1700983469173},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"0b44f6de0f5632b55298d506833f45dae46a6346","modified":1700983469176},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"4ed7c74087e81c6fcaf4fca7dced58b4e19f4cb1","modified":1700983469177},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1700983469179},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1700983469178},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b65a42167df5fb07e2a63f312a58c321d3112a90","modified":1700983469176},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7e56b48ab49bd03606d781aaa06f1f1132639ff2","modified":1700983469177},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"6de0c412a4d9b65c576ec79e1949925823c90fa6","modified":1700983469180},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1700983469181},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"c682e4d61017fb0dd2e837bfcc242371f1a13364","modified":1700983469179},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"a4e52188b6effeee1df2a01dcbf4105de76a61a8","modified":1700983469181},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1700983469184},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0b2ef6e853720f453c5048015f877bc91f85a6f7","modified":1700983469181},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1700983469185},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"d8898e427acd91ceb97d6a7ee3acb011ca86b9fc","modified":1700983469180},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"17520a86de12ae585289463c066d3ac91b78a2ff","modified":1700983469182},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"52a06a2e039f44383085333cac69f3f4e7d0ad3a","modified":1700983469185},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ecfff55b2c7f6d87ce4d5028fdf9f8c0bf155c73","modified":1700983469183},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1700983469187},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"0544d91c0bc9e26e0fe1b5ff490f4a8540ed1ee1","modified":1700983469183},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1700983469186},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c16ee69b5ca8db016db0508d014ae0867c4ce929","modified":1700983469186},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"420a86e73d0d748ac234fd00d06d9e433ca5e3f2","modified":1700983469185},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1700983469211},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"7c9cc43e1d2577f7151039d58e603c30860fd281","modified":1700983469212},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1700983469211},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1700983469211},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1700983469210},{"_id":"source/_posts/7long/login.jpg","hash":"1d404c6941dc2d468ff1a49b58f6dfc0435d5f59","modified":1718407352895},{"_id":"source/_img/bg1.png","hash":"393852dfcd9a76a3d1afa5e7f821fe9964875baf","modified":1706799644426},{"_id":"source/images/bg1.png","hash":"393852dfcd9a76a3d1afa5e7f821fe9964875baf","modified":1706799644426},{"_id":"source/_img/2023-11-02 (5).png","hash":"a53d23703c4129c44cb6b7a7b969573c72d51317","modified":1706799644401},{"_id":"source/images/2023-11-02 (5).png","hash":"a53d23703c4129c44cb6b7a7b969573c72d51317","modified":1706799644401},{"_id":"source/_img/head.png","hash":"c2a9ce16d9fb539f7d130e847aa38b185f1dee96","modified":1706799644455},{"_id":"source/images/head.png","hash":"c2a9ce16d9fb539f7d130e847aa38b185f1dee96","modified":1706799644455},{"_id":"themes/butterfly/source/img/bg1.png","hash":"393852dfcd9a76a3d1afa5e7f821fe9964875baf","modified":1698930846863},{"_id":"source/_img/2023-11-02 (6).png","hash":"a8fd44de0742a1fc69fc48a1f507554d60d8f699","modified":1706799644415},{"_id":"source/_img/2023-11-02 (15).png","hash":"a0f99af33c4b05426e5c760b18b10451b6c58cc7","modified":1706799644388},{"_id":"source/images/2023-11-02 (15).png","hash":"a0f99af33c4b05426e5c760b18b10451b6c58cc7","modified":1706799644388},{"_id":"source/images/2023-11-02 (6).png","hash":"a8fd44de0742a1fc69fc48a1f507554d60d8f699","modified":1706799644415},{"_id":"source/_img/bg2.png","hash":"e278ca160091210b29606c9458c041d252aa5298","modified":1706799644441},{"_id":"source/images/bg2.png","hash":"e278ca160091210b29606c9458c041d252aa5298","modified":1706799644441},{"_id":"themes/butterfly/source/img/2023-11-02 (5).png","hash":"a53d23703c4129c44cb6b7a7b969573c72d51317","modified":1698930937453},{"_id":"themes/butterfly/source/img/head.png","hash":"c2a9ce16d9fb539f7d130e847aa38b185f1dee96","modified":1698931257807},{"_id":"source/_img/2023-11-02 (1).png","hash":"a623974a89c8f5b051a1f1ab72933cdcc8a77251","modified":1706799644372},{"_id":"source/images/2023-11-02 (1).png","hash":"a623974a89c8f5b051a1f1ab72933cdcc8a77251","modified":1706799644372},{"_id":"themes/butterfly/source/img/2023-11-02 (6).png","hash":"a8fd44de0742a1fc69fc48a1f507554d60d8f699","modified":1698930952075},{"_id":"themes/butterfly/source/img/2023-11-02 (15).png","hash":"a0f99af33c4b05426e5c760b18b10451b6c58cc7","modified":1698931908920},{"_id":"themes/butterfly/source/img/bg2.png","hash":"e278ca160091210b29606c9458c041d252aa5298","modified":1698930838983},{"_id":"themes/butterfly/source/img/2023-11-02 (1).png","hash":"a623974a89c8f5b051a1f1ab72933cdcc8a77251","modified":1698930770120},{"_id":"public/test.js","hash":"1e331f60fc7c4357acb36ed9fa34ca84bbad5e78","modified":1723343469379},{"_id":"public/categories/index.html","hash":"78e2c6564b9193de07ed77e31e8c8c8ff7c8cfb3","modified":1723343469379},{"_id":"public/tags/index.html","hash":"059a566d7f893a7fbb8b3f4ffd2d1ad63b60dad7","modified":1723343469379},{"_id":"public/2024/08/06/13-3TypeScript/index.html","hash":"6e81ff05aa31787739d6dc57657a79dc892612de","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/index.html","hash":"f81590f4015b0ed27526b6fb3adc54aaf7d22998","modified":1723343469379},{"_id":"public/2024/08/04/13.1TypeScript/index.html","hash":"975d90d10d558b4fa64d1128e916df0e8423b891","modified":1723343469379},{"_id":"public/2024/07/27/12lexical-env/index.html","hash":"1db77be7f8170673f30629d166749d3c4db71747","modified":1723343469379},{"_id":"public/2024/07/27/12what-I-Do-GLCC/index.html","hash":"94754e9a97f6775183d9d90c35aec32d723e553c","modified":1723343469379},{"_id":"public/2024/07/22/11oauth2-sso/index.html","hash":"68dc1f0a6a2c48447ae866a565d8d0781501c7a6","modified":1723343469379},{"_id":"public/link/index.html","hash":"8d1a19908a30ad11dc51bfb6ec5cfdb62b38facb","modified":1723343469379},{"_id":"public/2024/07/12/10http/index.html","hash":"3ca0ffe7ded543694eb4fd8a3f19692d93bf05e8","modified":1723343469379},{"_id":"public/2024/07/03/8Auth/index.html","hash":"f8a518b03a2990c9ee8e7ba89c529fcb849d2450","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/index.html","hash":"2a589f7db08912256bbfb8c9d08f050d57efc61a","modified":1723343469379},{"_id":"public/2024/06/15/6ospp/index.html","hash":"240a1052f95e7e70dad4e15381785d10bac8e7cc","modified":1723343469379},{"_id":"public/2024/03/23/4Zing/index.html","hash":"c74acbc4f0a0c636eb8578dc18823d5a8d2a2607","modified":1723343469379},{"_id":"public/2024/06/15/7long/index.html","hash":"baec3d3fd88c4da852157d0c00a30965982b2316","modified":1723343469379},{"_id":"public/2024/04/20/5js_debounce/index.html","hash":"bf4292c1c4bbd7c94625cf274fcbf4e2d170117a","modified":1723343469379},{"_id":"public/2024/02/01/3wyyapp/index.html","hash":"5b7a4f69d96da617d0417bf327a5bd02737fc2af","modified":1723343469379},{"_id":"public/2024/01/13/2some/index.html","hash":"271b106b81619e672d0f8dc967eb3001cf06b1e9","modified":1723343469379},{"_id":"public/archives/index.html","hash":"d931224ad2ab705b2f1464d299a0c7cb5daf34af","modified":1723343469379},{"_id":"public/2023/12/03/1android_local_notification/index.html","hash":"d736f49bbfb21db1cce4e892e212b9ac54ccacfb","modified":1723343469379},{"_id":"public/archives/page/2/index.html","hash":"bd263a008476239283d6b48b6a8baa7e290fe08b","modified":1723343469379},{"_id":"public/archives/2023/index.html","hash":"ba3e9b817c10f27bc27f2f4002e20400094e6bd1","modified":1723343469379},{"_id":"public/archives/2023/12/index.html","hash":"6caebb6997407e3e4e51a7a183cefe1b937a310d","modified":1723343469379},{"_id":"public/archives/2024/index.html","hash":"bd7fcd73c4fa17490de43bfff21572a8397159d5","modified":1723343469379},{"_id":"public/archives/2024/page/2/index.html","hash":"9494e220f636b7b0bc01ec53352764fa4b488278","modified":1723343469379},{"_id":"public/archives/2024/01/index.html","hash":"632cabe65e614b16fffc0cd19befecdf79e5bb1b","modified":1723343469379},{"_id":"public/archives/2024/02/index.html","hash":"b7c95a7fd4d3e26c6e7edc9acdec8a4a7a23b5ca","modified":1723343469379},{"_id":"public/archives/2024/03/index.html","hash":"db3a909b3a718b20a13b892e9e8a46247bb97ec5","modified":1723343469379},{"_id":"public/archives/2024/04/index.html","hash":"e6c120db8144b4445280e1e2ecb0b8f620b28907","modified":1723343469379},{"_id":"public/archives/2024/06/index.html","hash":"7b600ef3e6e58427451d4bea775ccd03e6927544","modified":1723343469379},{"_id":"public/archives/2024/07/index.html","hash":"a6cf9aeffa2253d3e37290170f5a2a5eb71264a9","modified":1723343469379},{"_id":"public/archives/2024/08/index.html","hash":"8c884cfe9986a427d0c5bba8d8abc44f0941c411","modified":1723343469379},{"_id":"public/tags/develop/index.html","hash":"51cc71e842ad12ca46606ea4ff670d3dd944ec30","modified":1723343469379},{"_id":"public/tags/本手/index.html","hash":"389ee2971ecff005cbcf122bb4d831e1c18a1410","modified":1723343469379},{"_id":"public/tags/俗手/index.html","hash":"1301f66fa2d650f4a47d91ec044a7f3065c98a72","modified":1723343469379},{"_id":"public/tags/android/index.html","hash":"82c983edabf89f77dad6684e8e8679834637c8db","modified":1723343469379},{"_id":"public/tags/flutter/index.html","hash":"c406534ea63b1f4930342b7cbbc220f0c437dab2","modified":1723343469379},{"_id":"public/tags/ai/index.html","hash":"fbe2896d61caa1462a4bd37458d05f27553746cf","modified":1723343469379},{"_id":"public/tags/妙手/index.html","hash":"fdc79f38e94017cf147cc7211a949fc73ac7769d","modified":1723343469379},{"_id":"public/tags/js/index.html","hash":"c691579b1c6d1ddfd1fbd94fbf7daaf5c01d45ab","modified":1723343469379},{"_id":"public/tags/开源/index.html","hash":"88a5fc1274668ff4a238ff1d2d708a0a730a7abd","modified":1723343469379},{"_id":"public/tags/ospp/index.html","hash":"5408c3f1acb9ec589dc89abb66b5ee4b5582d8c4","modified":1723343469379},{"_id":"public/tags/记录/index.html","hash":"7907bea92d2ec4f62cb5b5a64eee5a0fc198b729","modified":1723343469379},{"_id":"public/tags/development/index.html","hash":"730acd8e68154293ab5d545060a99c8d70bdc476","modified":1723343469379},{"_id":"public/page/2/index.html","hash":"82884060b664d83bd4877272a6a9db70c026b14c","modified":1723343469379},{"_id":"public/index.html","hash":"effb1106ddb851160051c932beb246d10bf9bce7","modified":1723343469379},{"_id":"public/CHAME","hash":"2d9404503ec23fdb8a3eb6645b11efbf3ca2190d","modified":1723343469379},{"_id":"public/CNAME","hash":"838d8f0bc3442510158bb6b0701ff23c32118759","modified":1723343469379},{"_id":"public/2024/07/12/10http/App-Tsl.png","hash":"ecbf6da8a78b14c719186808edd214a184c2d96c","modified":1723343469379},{"_id":"public/2024/07/12/10http/http2.png","hash":"b8e04805f02ef0288e205f406e88e81538455d1d","modified":1723343469379},{"_id":"public/2024/07/12/10http/strong-save.png","hash":"08ded63368c9ae8f0dd3f2a53fbf200fac147a06","modified":1723343469379},{"_id":"public/2024/07/27/12lexical-env/count-example.png","hash":"6720dc55eb431cedc2c09d583a48778654028a78","modified":1723343469379},{"_id":"public/2024/07/27/12lexical-env/functioncreate.png","hash":"5d135b9c2e11620c55064e8aa7d422718e6993f8","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/Untitled.png","hash":"49cd91404346917bccb83df34e7cc296e1ccc001","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/Untitled1.png","hash":"def418f054f7cb879c3a690a568b75bb1ce629d8","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/Untitled2.png","hash":"185311ed1149e1888a428191bf53952ec9688bc6","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/Untitled3.png","hash":"23206ceab7dda127d6403bd3dd05db1f589dfcb2","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/Untitled5.png","hash":"1dd64a22d4bcd6618c8b7d7bfd66067209212947","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/Untitled4.png","hash":"d9293af1c3249cdefc13f5cc2387a57187c5c8f4","modified":1723343469379},{"_id":"public/2024/08/04/13.2TypeScript/Untitled6.png","hash":"b46fe56eed981800f36ce79ea6bb83afa0febaa0","modified":1723343469379},{"_id":"public/2024/06/15/6ospp/prdetails.png","hash":"ac711702b6c434cad2615b1a2403bb39d149d591","modified":1723343469379},{"_id":"public/2024/06/15/6ospp/casibase.png","hash":"e9fd35df54ff28a903696750e790408f7cf7053c","modified":1723343469379},{"_id":"public/2024/06/15/6ospp/prs.png","hash":"d8ed4f0ac916e3dbb732465fe57cc856306c356f","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/example.png","hash":"d68e8e28849034135ac349035ad3aa4c5c32d77a","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/curr-wlp.png","hash":"2b91661c99c69d73a8d93d9c571090b1a1607f59","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/reactvsflutter1.png","hash":"27fc0fa4cf27fd9d8392bd06436e1998740fa782","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/text-from-rich.png","hash":"7efa835ad8abd7810e52b2ebbe4bd95dea49c91e","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/whydeepfirst.png","hash":"462199174498d847a65b01235b010438f0acc199","modified":1723343469379},{"_id":"public/css/index.css","hash":"e08c44b94c97308f086533f64171befbd14590d8","modified":1723343469379},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1723343469379},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1723343469379},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1723343469379},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1723343469379},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1723343469379},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1723343469379},{"_id":"public/2024/07/27/12lexical-env/bibao-example.jpg","hash":"d0895d1969cf446d83070e67da28ed04b325c8d3","modified":1723343469379},{"_id":"public/2024/07/12/10http/multi-tcp.png","hash":"5863fbb98fdd8b7316c2693edb7ed2f62fc41d77","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/fibertree.png","hash":"c94fd779693fae20b2d8801ac1d3973aae83d9b7","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/render1.png","hash":"aeae7b49bdef23b26ea893c0d4a68a2df5914170","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/rich-nor2.png","hash":"48b3cd02705bcfe369424520d737b70af9b0c997","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/rich-nor.png","hash":"137a6173909e2ec758d2037dab81d9d1b6af8379","modified":1723343469379},{"_id":"public/2024/07/22/11oauth2-sso/oauth2.png","hash":"fc8f06cd08ffc15e3b43f4c85e8d1e3334eff7f0","modified":1723343469379},{"_id":"public/2024/07/22/11oauth2-sso/xichuangzhu.jpg","hash":"298076453940059709f385b9ea174f23f8b63335","modified":1723343469379},{"_id":"public/2024/06/15/7long/helloworld.jpg","hash":"2dbcbbd02718b910635537ae7fb985167ccd0dda","modified":1723343469379},{"_id":"public/2024/07/22/11oauth2-sso/wechatusers.jpg","hash":"a7b41ec03fab6a31782018c3101cda61ca77b32d","modified":1723343469379},{"_id":"public/2024/06/15/7long/ban.jpg","hash":"8df2749f662ce0abcaaa407f6f1ce897227db537","modified":1723343469379},{"_id":"public/2024/07/22/11oauth2-sso/loginsuccess.jpg","hash":"0489a5846bcb68b06fd14ae6e11ca99cdd93e03c","modified":1723343469379},{"_id":"public/2024/07/22/11oauth2-sso/ssoa.png","hash":"2fe91cf40e116a4ce16fbd41ee27704ae5785451","modified":1723343469379},{"_id":"public/2024/07/10/9flutter-react/update.jpg","hash":"60b1e5bc990ac3faad9ffcd557394dd30d356a98","modified":1723343469379},{"_id":"public/2024/06/15/7long/total.jpg","hash":"7a55fb2dd3acccc5c2effe90869744f7b8d99b23","modified":1723343469379},{"_id":"public/2024/06/15/7long/login.jpg","hash":"1d404c6941dc2d468ff1a49b58f6dfc0435d5f59","modified":1723343469379},{"_id":"public/images/bg1.png","hash":"393852dfcd9a76a3d1afa5e7f821fe9964875baf","modified":1723343469379},{"_id":"public/img/bg1.png","hash":"393852dfcd9a76a3d1afa5e7f821fe9964875baf","modified":1723343469379},{"_id":"public/images/2023-11-02 (5).png","hash":"a53d23703c4129c44cb6b7a7b969573c72d51317","modified":1723343469379},{"_id":"public/img/2023-11-02 (5).png","hash":"a53d23703c4129c44cb6b7a7b969573c72d51317","modified":1723343469379},{"_id":"public/images/head.png","hash":"c2a9ce16d9fb539f7d130e847aa38b185f1dee96","modified":1723343469379},{"_id":"public/img/head.png","hash":"c2a9ce16d9fb539f7d130e847aa38b185f1dee96","modified":1723343469379},{"_id":"public/images/2023-11-02 (6).png","hash":"a8fd44de0742a1fc69fc48a1f507554d60d8f699","modified":1723343469379},{"_id":"public/images/2023-11-02 (15).png","hash":"a0f99af33c4b05426e5c760b18b10451b6c58cc7","modified":1723343469379},{"_id":"public/img/2023-11-02 (15).png","hash":"a0f99af33c4b05426e5c760b18b10451b6c58cc7","modified":1723343469379},{"_id":"public/img/2023-11-02 (6).png","hash":"a8fd44de0742a1fc69fc48a1f507554d60d8f699","modified":1723343469379},{"_id":"public/images/bg2.png","hash":"e278ca160091210b29606c9458c041d252aa5298","modified":1723343469379},{"_id":"public/img/bg2.png","hash":"e278ca160091210b29606c9458c041d252aa5298","modified":1723343469379},{"_id":"public/images/2023-11-02 (1).png","hash":"a623974a89c8f5b051a1f1ab72933cdcc8a77251","modified":1723343469379},{"_id":"public/img/2023-11-02 (1).png","hash":"a623974a89c8f5b051a1f1ab72933cdcc8a77251","modified":1723343469379},{"_id":"source/_posts/14deploy.md","hash":"4149eabe7dae83a2d02b21f1ee2603afd3e9c54a","modified":1725801751331},{"_id":"source/_posts/14deploy/lunux_process.png","hash":"0ee1cd84effb37bc84dcb22ac18b2abbee683bdd","modified":1725800986654},{"_id":"source/_posts/14deploy/ssh_step2.png","hash":"90304a6a212fd8aa0ab03a194a0cc867b7fb84f5","modified":1725798213293},{"_id":"source/_posts/14deploy/ssh_step1.png","hash":"4ed451d9e16e4f633711263d2f679147cd199550","modified":1725798167630}],"Category":[],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"分类","date":"2024-02-01T15:00:44.606Z","updated":"2024-02-01T15:00:44.606Z","type":"categories","comments":1,"description":null,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"random":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ntype: \"categories\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\nrandom:\n---\n","path":"categories/index.html","layout":"page","_id":"clzoy7gde0000zw6kag8s6dlk","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"_content":"class Person {\n  static name = 123\n}\n","source":"test.js","raw":"class Person {\n  static name = 123\n}\n","date":"2024-08-11T02:08:10.986Z","updated":"2024-08-11T02:08:10.986Z","path":"test.js","layout":"false","title":"","comments":1,"_id":"clzoy7gdl0002zw6kd6kp500n","content":"class Person {\n  static name = 123\n}\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"class Person {\n  static name = 123\n}\n"},{"title":"友情链接","date":"2024-02-01T15:00:44.607Z","updated":"2024-02-01T15:00:44.607Z","type":"link","comments":1,"description":null,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"random":null,"_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ntype: link\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\nrandom:\n---\n","path":"link/index.html","layout":"page","_id":"clzoy7gdo0004zw6kai89f58x","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"标签","date":"2024-02-01T15:00:44.608Z","updated":"2024-02-01T15:00:44.608Z","type":"tags","comments":1,"description":null,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"random":true,"order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ntype: \"tags\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\nrandom: true\norder: 1\n---\n","path":"tags/index.html","layout":"page","_id":"clzoy7gds0007zw6ka11whsj5","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"HTTP 驾驭网络的艺术","date":"2024-07-11T23:24:16.631Z","updated":"2024-07-12T12:51:32.974Z","description":"本文将会以HTTP的历史为主线，讲述不同版本之间的差异，以及不同版本的新特性。","top_img":null,"_content":"\n在开始之前，明确几个概念：\nHTTP 即 “超文本传输层协议”\n协议是指计算机之间通信的规则的集合，这些规则是**_约定俗称_**的。\n超文本，HTML，是http设置之初的传输目标\n\n本文将会以HTTP的历史为主线，讲述不同版本之间的差异，以及不同版本的新特性。\n\n# 概述\n\nHTTP分为三个版本：HTTP/0.9,HTTP/1.0、HTTP/1.1、HTTP/2.0，HTTP/3.0\n\n# HTTP/0.9\n\nHTTP/0.9是HTTP的第一个版本，它是一个极简的协议\n只有一个命令GET，没有HEADER等描述数据的信息，服务器发送完毕数据之后就关闭TCP连接。\n\n他的报文只有一行，如下：\n\n```\nGET /index.html\n```\n\n# HTTP/1.0\n\n1. 随着每个请求发送协议版本信息，原来第一行只有 方法+路径，现在变成了 方法+路径+协议版本\n2. 服务端会发送状态码，使客户端可以更灵活的处理请求\n3. 新增了一些请求方法，POST、HEAD\n4. 引入了HTTP Header，具备了传输纯文本HTML以外的能力\n\n以下是HTTP/1.0的报文格式：\n\n```\nGET /mypage.html HTTP/1.0\nUser-Agent: NCSA_Mosaic/2.0 (Windows 3.1)\n\n200 OK\nDate: Tue, 15 Nov 1994 08:12:31 GMT\nServer: CERN/3.0 libwww/2.17\nContent-Type: text/html\n<HTML>\n一个包含图片的页面\n  <IMG SRC=\"/myimage.gif\">\n</HTML>\n```\n\nContent-Type 示例\n\n```\nContent-Type: text/gif\n(这里是图片内容)\n```\n\n* User-Agent: 告诉服务器客户端的类型和版本信息，服务端可以因此返回不同的资源，可以用于解决浏览器兼容性问题\n* Server:用于告诉客户端服务器的类型和版本信息\n* Content-Type: 用于告诉客户端返回的资源类型，如果存在，浏览器将不考虑文件类型完全按照这个字段解析，如果不存在，则由浏览器自主判断\n* Body: 服务器返回的资源\n\n# HTTP/1.1\n\nHTTP/1.0是HTTP的第一个正式版本，它的特点是：\n\n1. 连接可以复用，节省了多次打开TCP连接的时间\n2. 增加管线化技术，实现流水线、并发两种请求方式\n3. 增加了PUT、DELETE、TRACE、OPTIONS等方法\n4. 增加了状态码\n5. 引入内容协商机制，客户端和服务器交换最合适的内容\n\n```\nGET /zh-CN/docs/Glossary/CORS-safelisted_request_header HTTP/1.1\nHost: developer.mozilla.org\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.9\nAccept-Encoding: gzip, deflate, br\nReferer: https://developer.mozilla.org/zh-CN/docs/Glossary/CORS-safelisted_request_header\n\n200 OK\nConnection: Keep-Alive\nContent-Encoding: gzip\nContent-Type: text/html; charset=utf-8\nDate: Wed, 20 Jul 2016 10:55:30 GMT\nKeep-Alive: timeout=5, max=1000\nEtag: \"547fa7e369ef56031dd3bff2ace9fc0832eb251a\"\nLast-Modified: Tue, 19 Jul 2016 00:59:33 GMT\nServer: Apache\nTransfer-Encoding: chunked\nVary: Cookie, Accept-Encoding\n\n```\n\n可以看到，新增加了几个字段\n\n* Accept: 告诉服务器客户端接受的资源类型\n* Accept-Language: 告诉服务器客户端接受的语言\n* Accept-Encoding: 告诉服务器客户端接受的编码方式\n* Referer: 告诉服务器客户端请求的来源,允许服务器生成回退链接，用于日志记录等，但是可能会带来隐私问题，Referrer-Policy可以控制这个字段的发送\n* Content-Encoding: 告诉客户端返回的资源的编码方式\n* Etag: 用于缓存控制\n* Last-Modified: 用于缓存控制\n* Transfer-Encoding: chunked，告诉客户端返回的资源是分块传输的\n* Vary: Cookie, Accept-Encoding，告诉客户端服务器根据这两个字段来生成缓存\n* Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接\n* Keep-Alive: timeout=5, max=1000，告诉客户端服务器保持连接的时间和最大连接数\n* Server: Apache，告诉客户端服务器的类型和版本信息\n\n## 特性\n\n在这个版本里，增加了许多字段,这些字段可以让客户端和服务器更好的交互，提高了HTTP的性能\n\n### TCP连接复用\n\n相关字段：\n\n* Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接\n* Keep-Alive: timeout=5, max=1000，告诉客户端服务器保持连接的时间和最大连接数\n\n在HTTP1.0以及其以前，发送一个HTTP请求需要建立一个TCP连接，信息发送之后，立即关闭连接，这样的方式效率很低，因为TCP连接的建立和关闭都需要时间，\n而且每次建立连接都需要三次握手。\n所以HTTP1.1引入了长连接，即在一个TCP连接上可以发送多个HTTP请求，这样就可以节省大量的时间。\n\n![TCP连接复用](multi-tcp.png)\n\n### HTTP缓存\n\n#### 强缓存\n\n![强缓存](strong-save.png)\n\n浏览器不会向服务器发送请求，直接从***缓存***中读取资源\n\n* Expires: Tue, 19 Jul 2016 00:59:33 GMT\n* Cache-Control: max-age=3600\n\n在HTTP 1.0时，使用是Expires字段，告诉客户端资源的过期时间\n但是时间格式难以解析，也发现了很多实现的错误，有可能通过故意偏移系统时钟来诱发问题\n\n在HTTP 1.1时，引入了Cache-Control字段，可以更加灵活的控制缓存策略,如max-age=3600，表示资源在3600秒内有效\n\n上文提到，直接从缓存中读取资源，这里的缓存是指浏览器的缓存\n初次请求时，浏览器会将资源缓存到本地，下次请求时，浏览器会判断是否有**_名称相同_**的资源，如果有，直接从本地读取，不会向服务器发送请求\n\n比如第一次请求一个index.html，浏览器会将这个资源缓存到本地，下次请求时，浏览器会判断是否有index.html这个资源，如果有，直接从本地读取\n\n拓展：\n为什么在本地开发原生html的时候需要保存一下才能显示最新的界面？\n\n因为浏览器会缓存html页面，保存一下是为了更改html资源的hash值,这样才能显示最新的界面\n\n#### 协商缓存\n\n两种方法\n\n1. Etag + If-None-Match\n\n* 第一次请求时，设置Etag\n* 第二次请求时，随If-None-Match字段发送Etag，服务器根据Etag判断资源是否更新，如果没有更新，返回304，否则返回200\n\n2. Last-Modified + If-Modified-Since\n\n* 第一次请求时，设置Last-Modified\n* 第二次请求时，随If-Modified-Since字段发送Last-Modified，服务器根据Last-Modified判断资源是否更新，如果没有更新，返回304，否则返回200\n\n# HTTP/2.0\n\n特点：\n\n1. 由原来的文本协议变成了二进制协议，即，不在可读\n2. 多路复用，一个TCP连接上可以同时发送多个请求\n3. 首部压缩，减少了首部的大小\n\n![HTTP/2.0](http2.png)\n\n# HTTPS\n\n![HTTPS](App-Tsl.png)\n\nHTTPS是HTTP的安全版本，它是在HTTP的基础上加入了SSL或者TLS协议，用于加密数据传输\n\nSSL是TSL的前身\n\n## TSL加密过程\n\n1. 客户端向服务器发送一个请求，请求建立一个安全连接,同时发送TSL版本，以及生成并发送第一个随机数 （此时，客户端拥有第一随机数，服务端拥有第一随机数）\n2. 服务端收到请求，向客户端发送一个证书，证书中包含了服务端的公钥，以及生成并发送第二个随机数\n   （客户端拥有公钥、第一随机数，第二随机数，服务端拥有公钥、私钥、第一随机数，第二随机数)\n3.\n\n客户端生成一个预主密钥，并使用公钥加密，之后发送到服务端，服务端用私钥解密（此时，客户端拥有公钥、第一随机数，第二随机数、预主密钥，服务端拥有公钥、私钥、第一随机数，第二随机数,预主密钥)\n\n4. 之后，服务端和客户端分别用第一随机数、第二随机数、预主密钥计算出会话密钥\n5. 之后，开始通信\n\n这样具体在哪些方面比较安全？\n\n1. 信息是加密的，即人类无法阅读\n2. 客户端全程不接触用来解密的私钥，防止了客户端离谱的操作带来的问题\n3. 会话密钥生成过程中完全没有经过网络传输\n\n### 公钥私钥加密解密示例\n\n1. 公钥 (17, 3233) 私钥 (275, 3233)\n2. 加密过程\n    * 明文 72\n    * 密文 72^17 % 3233 = 2201\n3. 解密过程\n    * 密文 2201\n    * 明文 2201^275 % 3233 = 72\n\n注意：\n\n1. 这只是一个简单的示例，攻击者可以通过密文、公钥爆破解出原来的明文。但是!\n   由于爆破过程中可以产生多个结果，所以，爆破者无法确定哪个是正确的明文!再但是，由于计算机的计算能力，爆破者可以通过多次尝试，找到正确的明文\n2. 为了防止这种情况，真实的情况可以通过增加密文长度，增加公钥私钥长度，增加计算量，来增加破解难度\n2.\n    3. 比如RSA加密\n","source":"_posts/10http.md","raw":"---\ntitle: HTTP 驾驭网络的艺术\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription: 本文将会以HTTP的历史为主线，讲述不同版本之间的差异，以及不同版本的新特性。\ntop_img:\ntags:\n---\n\n在开始之前，明确几个概念：\nHTTP 即 “超文本传输层协议”\n协议是指计算机之间通信的规则的集合，这些规则是**_约定俗称_**的。\n超文本，HTML，是http设置之初的传输目标\n\n本文将会以HTTP的历史为主线，讲述不同版本之间的差异，以及不同版本的新特性。\n\n# 概述\n\nHTTP分为三个版本：HTTP/0.9,HTTP/1.0、HTTP/1.1、HTTP/2.0，HTTP/3.0\n\n# HTTP/0.9\n\nHTTP/0.9是HTTP的第一个版本，它是一个极简的协议\n只有一个命令GET，没有HEADER等描述数据的信息，服务器发送完毕数据之后就关闭TCP连接。\n\n他的报文只有一行，如下：\n\n```\nGET /index.html\n```\n\n# HTTP/1.0\n\n1. 随着每个请求发送协议版本信息，原来第一行只有 方法+路径，现在变成了 方法+路径+协议版本\n2. 服务端会发送状态码，使客户端可以更灵活的处理请求\n3. 新增了一些请求方法，POST、HEAD\n4. 引入了HTTP Header，具备了传输纯文本HTML以外的能力\n\n以下是HTTP/1.0的报文格式：\n\n```\nGET /mypage.html HTTP/1.0\nUser-Agent: NCSA_Mosaic/2.0 (Windows 3.1)\n\n200 OK\nDate: Tue, 15 Nov 1994 08:12:31 GMT\nServer: CERN/3.0 libwww/2.17\nContent-Type: text/html\n<HTML>\n一个包含图片的页面\n  <IMG SRC=\"/myimage.gif\">\n</HTML>\n```\n\nContent-Type 示例\n\n```\nContent-Type: text/gif\n(这里是图片内容)\n```\n\n* User-Agent: 告诉服务器客户端的类型和版本信息，服务端可以因此返回不同的资源，可以用于解决浏览器兼容性问题\n* Server:用于告诉客户端服务器的类型和版本信息\n* Content-Type: 用于告诉客户端返回的资源类型，如果存在，浏览器将不考虑文件类型完全按照这个字段解析，如果不存在，则由浏览器自主判断\n* Body: 服务器返回的资源\n\n# HTTP/1.1\n\nHTTP/1.0是HTTP的第一个正式版本，它的特点是：\n\n1. 连接可以复用，节省了多次打开TCP连接的时间\n2. 增加管线化技术，实现流水线、并发两种请求方式\n3. 增加了PUT、DELETE、TRACE、OPTIONS等方法\n4. 增加了状态码\n5. 引入内容协商机制，客户端和服务器交换最合适的内容\n\n```\nGET /zh-CN/docs/Glossary/CORS-safelisted_request_header HTTP/1.1\nHost: developer.mozilla.org\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.9\nAccept-Encoding: gzip, deflate, br\nReferer: https://developer.mozilla.org/zh-CN/docs/Glossary/CORS-safelisted_request_header\n\n200 OK\nConnection: Keep-Alive\nContent-Encoding: gzip\nContent-Type: text/html; charset=utf-8\nDate: Wed, 20 Jul 2016 10:55:30 GMT\nKeep-Alive: timeout=5, max=1000\nEtag: \"547fa7e369ef56031dd3bff2ace9fc0832eb251a\"\nLast-Modified: Tue, 19 Jul 2016 00:59:33 GMT\nServer: Apache\nTransfer-Encoding: chunked\nVary: Cookie, Accept-Encoding\n\n```\n\n可以看到，新增加了几个字段\n\n* Accept: 告诉服务器客户端接受的资源类型\n* Accept-Language: 告诉服务器客户端接受的语言\n* Accept-Encoding: 告诉服务器客户端接受的编码方式\n* Referer: 告诉服务器客户端请求的来源,允许服务器生成回退链接，用于日志记录等，但是可能会带来隐私问题，Referrer-Policy可以控制这个字段的发送\n* Content-Encoding: 告诉客户端返回的资源的编码方式\n* Etag: 用于缓存控制\n* Last-Modified: 用于缓存控制\n* Transfer-Encoding: chunked，告诉客户端返回的资源是分块传输的\n* Vary: Cookie, Accept-Encoding，告诉客户端服务器根据这两个字段来生成缓存\n* Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接\n* Keep-Alive: timeout=5, max=1000，告诉客户端服务器保持连接的时间和最大连接数\n* Server: Apache，告诉客户端服务器的类型和版本信息\n\n## 特性\n\n在这个版本里，增加了许多字段,这些字段可以让客户端和服务器更好的交互，提高了HTTP的性能\n\n### TCP连接复用\n\n相关字段：\n\n* Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接\n* Keep-Alive: timeout=5, max=1000，告诉客户端服务器保持连接的时间和最大连接数\n\n在HTTP1.0以及其以前，发送一个HTTP请求需要建立一个TCP连接，信息发送之后，立即关闭连接，这样的方式效率很低，因为TCP连接的建立和关闭都需要时间，\n而且每次建立连接都需要三次握手。\n所以HTTP1.1引入了长连接，即在一个TCP连接上可以发送多个HTTP请求，这样就可以节省大量的时间。\n\n![TCP连接复用](multi-tcp.png)\n\n### HTTP缓存\n\n#### 强缓存\n\n![强缓存](strong-save.png)\n\n浏览器不会向服务器发送请求，直接从***缓存***中读取资源\n\n* Expires: Tue, 19 Jul 2016 00:59:33 GMT\n* Cache-Control: max-age=3600\n\n在HTTP 1.0时，使用是Expires字段，告诉客户端资源的过期时间\n但是时间格式难以解析，也发现了很多实现的错误，有可能通过故意偏移系统时钟来诱发问题\n\n在HTTP 1.1时，引入了Cache-Control字段，可以更加灵活的控制缓存策略,如max-age=3600，表示资源在3600秒内有效\n\n上文提到，直接从缓存中读取资源，这里的缓存是指浏览器的缓存\n初次请求时，浏览器会将资源缓存到本地，下次请求时，浏览器会判断是否有**_名称相同_**的资源，如果有，直接从本地读取，不会向服务器发送请求\n\n比如第一次请求一个index.html，浏览器会将这个资源缓存到本地，下次请求时，浏览器会判断是否有index.html这个资源，如果有，直接从本地读取\n\n拓展：\n为什么在本地开发原生html的时候需要保存一下才能显示最新的界面？\n\n因为浏览器会缓存html页面，保存一下是为了更改html资源的hash值,这样才能显示最新的界面\n\n#### 协商缓存\n\n两种方法\n\n1. Etag + If-None-Match\n\n* 第一次请求时，设置Etag\n* 第二次请求时，随If-None-Match字段发送Etag，服务器根据Etag判断资源是否更新，如果没有更新，返回304，否则返回200\n\n2. Last-Modified + If-Modified-Since\n\n* 第一次请求时，设置Last-Modified\n* 第二次请求时，随If-Modified-Since字段发送Last-Modified，服务器根据Last-Modified判断资源是否更新，如果没有更新，返回304，否则返回200\n\n# HTTP/2.0\n\n特点：\n\n1. 由原来的文本协议变成了二进制协议，即，不在可读\n2. 多路复用，一个TCP连接上可以同时发送多个请求\n3. 首部压缩，减少了首部的大小\n\n![HTTP/2.0](http2.png)\n\n# HTTPS\n\n![HTTPS](App-Tsl.png)\n\nHTTPS是HTTP的安全版本，它是在HTTP的基础上加入了SSL或者TLS协议，用于加密数据传输\n\nSSL是TSL的前身\n\n## TSL加密过程\n\n1. 客户端向服务器发送一个请求，请求建立一个安全连接,同时发送TSL版本，以及生成并发送第一个随机数 （此时，客户端拥有第一随机数，服务端拥有第一随机数）\n2. 服务端收到请求，向客户端发送一个证书，证书中包含了服务端的公钥，以及生成并发送第二个随机数\n   （客户端拥有公钥、第一随机数，第二随机数，服务端拥有公钥、私钥、第一随机数，第二随机数)\n3.\n\n客户端生成一个预主密钥，并使用公钥加密，之后发送到服务端，服务端用私钥解密（此时，客户端拥有公钥、第一随机数，第二随机数、预主密钥，服务端拥有公钥、私钥、第一随机数，第二随机数,预主密钥)\n\n4. 之后，服务端和客户端分别用第一随机数、第二随机数、预主密钥计算出会话密钥\n5. 之后，开始通信\n\n这样具体在哪些方面比较安全？\n\n1. 信息是加密的，即人类无法阅读\n2. 客户端全程不接触用来解密的私钥，防止了客户端离谱的操作带来的问题\n3. 会话密钥生成过程中完全没有经过网络传输\n\n### 公钥私钥加密解密示例\n\n1. 公钥 (17, 3233) 私钥 (275, 3233)\n2. 加密过程\n    * 明文 72\n    * 密文 72^17 % 3233 = 2201\n3. 解密过程\n    * 密文 2201\n    * 明文 2201^275 % 3233 = 72\n\n注意：\n\n1. 这只是一个简单的示例，攻击者可以通过密文、公钥爆破解出原来的明文。但是!\n   由于爆破过程中可以产生多个结果，所以，爆破者无法确定哪个是正确的明文!再但是，由于计算机的计算能力，爆破者可以通过多次尝试，找到正确的明文\n2. 为了防止这种情况，真实的情况可以通过增加密文长度，增加公钥私钥长度，增加计算量，来增加破解难度\n2.\n    3. 比如RSA加密\n","slug":"10http","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gdi0001zw6khpjshz59","content":"<p>在开始之前，明确几个概念：<br>HTTP 即 “超文本传输层协议”<br>协议是指计算机之间通信的规则的集合，这些规则是**<em>约定俗称</em>**的。<br>超文本，HTML，是http设置之初的传输目标</p>\n<p>本文将会以HTTP的历史为主线，讲述不同版本之间的差异，以及不同版本的新特性。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>HTTP分为三个版本：HTTP&#x2F;0.9,HTTP&#x2F;1.0、HTTP&#x2F;1.1、HTTP&#x2F;2.0，HTTP&#x2F;3.0</p>\n<h1 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP&#x2F;0.9\"></a>HTTP&#x2F;0.9</h1><p>HTTP&#x2F;0.9是HTTP的第一个版本，它是一个极简的协议<br>只有一个命令GET，没有HEADER等描述数据的信息，服务器发送完毕数据之后就关闭TCP连接。</p>\n<p>他的报文只有一行，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /index.html</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP&#x2F;1.0\"></a>HTTP&#x2F;1.0</h1><ol>\n<li>随着每个请求发送协议版本信息，原来第一行只有 方法+路径，现在变成了 方法+路径+协议版本</li>\n<li>服务端会发送状态码，使客户端可以更灵活的处理请求</li>\n<li>新增了一些请求方法，POST、HEAD</li>\n<li>引入了HTTP Header，具备了传输纯文本HTML以外的能力</li>\n</ol>\n<p>以下是HTTP&#x2F;1.0的报文格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /mypage.html HTTP/1.0</span><br><span class=\"line\">User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)</span><br><span class=\"line\"></span><br><span class=\"line\">200 OK</span><br><span class=\"line\">Date: Tue, 15 Nov 1994 08:12:31 GMT</span><br><span class=\"line\">Server: CERN/3.0 libwww/2.17</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">&lt;HTML&gt;</span><br><span class=\"line\">一个包含图片的页面</span><br><span class=\"line\">  &lt;IMG SRC=&quot;/myimage.gif&quot;&gt;</span><br><span class=\"line\">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Content-Type 示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: text/gif</span><br><span class=\"line\">(这里是图片内容)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>User-Agent: 告诉服务器客户端的类型和版本信息，服务端可以因此返回不同的资源，可以用于解决浏览器兼容性问题</li>\n<li>Server:用于告诉客户端服务器的类型和版本信息</li>\n<li>Content-Type: 用于告诉客户端返回的资源类型，如果存在，浏览器将不考虑文件类型完全按照这个字段解析，如果不存在，则由浏览器自主判断</li>\n<li>Body: 服务器返回的资源</li>\n</ul>\n<h1 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP&#x2F;1.1\"></a>HTTP&#x2F;1.1</h1><p>HTTP&#x2F;1.0是HTTP的第一个正式版本，它的特点是：</p>\n<ol>\n<li>连接可以复用，节省了多次打开TCP连接的时间</li>\n<li>增加管线化技术，实现流水线、并发两种请求方式</li>\n<li>增加了PUT、DELETE、TRACE、OPTIONS等方法</li>\n<li>增加了状态码</li>\n<li>引入内容协商机制，客户端和服务器交换最合适的内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /zh-CN/docs/Glossary/CORS-safelisted_request_header HTTP/1.1</span><br><span class=\"line\">Host: developer.mozilla.org</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br</span><br><span class=\"line\">Referer: https://developer.mozilla.org/zh-CN/docs/Glossary/CORS-safelisted_request_header</span><br><span class=\"line\"></span><br><span class=\"line\">200 OK</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Date: Wed, 20 Jul 2016 10:55:30 GMT</span><br><span class=\"line\">Keep-Alive: timeout=5, max=1000</span><br><span class=\"line\">Etag: &quot;547fa7e369ef56031dd3bff2ace9fc0832eb251a&quot;</span><br><span class=\"line\">Last-Modified: Tue, 19 Jul 2016 00:59:33 GMT</span><br><span class=\"line\">Server: Apache</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Vary: Cookie, Accept-Encoding</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，新增加了几个字段</p>\n<ul>\n<li>Accept: 告诉服务器客户端接受的资源类型</li>\n<li>Accept-Language: 告诉服务器客户端接受的语言</li>\n<li>Accept-Encoding: 告诉服务器客户端接受的编码方式</li>\n<li>Referer: 告诉服务器客户端请求的来源,允许服务器生成回退链接，用于日志记录等，但是可能会带来隐私问题，Referrer-Policy可以控制这个字段的发送</li>\n<li>Content-Encoding: 告诉客户端返回的资源的编码方式</li>\n<li>Etag: 用于缓存控制</li>\n<li>Last-Modified: 用于缓存控制</li>\n<li>Transfer-Encoding: chunked，告诉客户端返回的资源是分块传输的</li>\n<li>Vary: Cookie, Accept-Encoding，告诉客户端服务器根据这两个字段来生成缓存</li>\n<li>Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接</li>\n<li>Keep-Alive: timeout&#x3D;5, max&#x3D;1000，告诉客户端服务器保持连接的时间和最大连接数</li>\n<li>Server: Apache，告诉客户端服务器的类型和版本信息</li>\n</ul>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p>在这个版本里，增加了许多字段,这些字段可以让客户端和服务器更好的交互，提高了HTTP的性能</p>\n<h3 id=\"TCP连接复用\"><a href=\"#TCP连接复用\" class=\"headerlink\" title=\"TCP连接复用\"></a>TCP连接复用</h3><p>相关字段：</p>\n<ul>\n<li>Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接</li>\n<li>Keep-Alive: timeout&#x3D;5, max&#x3D;1000，告诉客户端服务器保持连接的时间和最大连接数</li>\n</ul>\n<p>在HTTP1.0以及其以前，发送一个HTTP请求需要建立一个TCP连接，信息发送之后，立即关闭连接，这样的方式效率很低，因为TCP连接的建立和关闭都需要时间，<br>而且每次建立连接都需要三次握手。<br>所以HTTP1.1引入了长连接，即在一个TCP连接上可以发送多个HTTP请求，这样就可以节省大量的时间。</p>\n<p><img src=\"/2024/07/12/10http/multi-tcp.png\" alt=\"TCP连接复用\"></p>\n<h3 id=\"HTTP缓存\"><a href=\"#HTTP缓存\" class=\"headerlink\" title=\"HTTP缓存\"></a>HTTP缓存</h3><h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><p><img src=\"/2024/07/12/10http/strong-save.png\" alt=\"强缓存\"></p>\n<p>浏览器不会向服务器发送请求，直接从<em><strong>缓存</strong></em>中读取资源</p>\n<ul>\n<li>Expires: Tue, 19 Jul 2016 00:59:33 GMT</li>\n<li>Cache-Control: max-age&#x3D;3600</li>\n</ul>\n<p>在HTTP 1.0时，使用是Expires字段，告诉客户端资源的过期时间<br>但是时间格式难以解析，也发现了很多实现的错误，有可能通过故意偏移系统时钟来诱发问题</p>\n<p>在HTTP 1.1时，引入了Cache-Control字段，可以更加灵活的控制缓存策略,如max-age&#x3D;3600，表示资源在3600秒内有效</p>\n<p>上文提到，直接从缓存中读取资源，这里的缓存是指浏览器的缓存<br>初次请求时，浏览器会将资源缓存到本地，下次请求时，浏览器会判断是否有**<em>名称相同</em>**的资源，如果有，直接从本地读取，不会向服务器发送请求</p>\n<p>比如第一次请求一个index.html，浏览器会将这个资源缓存到本地，下次请求时，浏览器会判断是否有index.html这个资源，如果有，直接从本地读取</p>\n<p>拓展：<br>为什么在本地开发原生html的时候需要保存一下才能显示最新的界面？</p>\n<p>因为浏览器会缓存html页面，保存一下是为了更改html资源的hash值,这样才能显示最新的界面</p>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><p>两种方法</p>\n<ol>\n<li>Etag + If-None-Match</li>\n</ol>\n<ul>\n<li>第一次请求时，设置Etag</li>\n<li>第二次请求时，随If-None-Match字段发送Etag，服务器根据Etag判断资源是否更新，如果没有更新，返回304，否则返回200</li>\n</ul>\n<ol start=\"2\">\n<li>Last-Modified + If-Modified-Since</li>\n</ol>\n<ul>\n<li>第一次请求时，设置Last-Modified</li>\n<li>第二次请求时，随If-Modified-Since字段发送Last-Modified，服务器根据Last-Modified判断资源是否更新，如果没有更新，返回304，否则返回200</li>\n</ul>\n<h1 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP&#x2F;2.0\"></a>HTTP&#x2F;2.0</h1><p>特点：</p>\n<ol>\n<li>由原来的文本协议变成了二进制协议，即，不在可读</li>\n<li>多路复用，一个TCP连接上可以同时发送多个请求</li>\n<li>首部压缩，减少了首部的大小</li>\n</ol>\n<p><img src=\"/2024/07/12/10http/http2.png\" alt=\"HTTP/2.0\"></p>\n<h1 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h1><p><img src=\"/2024/07/12/10http/App-Tsl.png\" alt=\"HTTPS\"></p>\n<p>HTTPS是HTTP的安全版本，它是在HTTP的基础上加入了SSL或者TLS协议，用于加密数据传输</p>\n<p>SSL是TSL的前身</p>\n<h2 id=\"TSL加密过程\"><a href=\"#TSL加密过程\" class=\"headerlink\" title=\"TSL加密过程\"></a>TSL加密过程</h2><ol>\n<li>客户端向服务器发送一个请求，请求建立一个安全连接,同时发送TSL版本，以及生成并发送第一个随机数 （此时，客户端拥有第一随机数，服务端拥有第一随机数）</li>\n<li>服务端收到请求，向客户端发送一个证书，证书中包含了服务端的公钥，以及生成并发送第二个随机数<br>（客户端拥有公钥、第一随机数，第二随机数，服务端拥有公钥、私钥、第一随机数，第二随机数)</li>\n<li></li>\n</ol>\n<p>客户端生成一个预主密钥，并使用公钥加密，之后发送到服务端，服务端用私钥解密（此时，客户端拥有公钥、第一随机数，第二随机数、预主密钥，服务端拥有公钥、私钥、第一随机数，第二随机数,预主密钥)</p>\n<ol start=\"4\">\n<li>之后，服务端和客户端分别用第一随机数、第二随机数、预主密钥计算出会话密钥</li>\n<li>之后，开始通信</li>\n</ol>\n<p>这样具体在哪些方面比较安全？</p>\n<ol>\n<li>信息是加密的，即人类无法阅读</li>\n<li>客户端全程不接触用来解密的私钥，防止了客户端离谱的操作带来的问题</li>\n<li>会话密钥生成过程中完全没有经过网络传输</li>\n</ol>\n<h3 id=\"公钥私钥加密解密示例\"><a href=\"#公钥私钥加密解密示例\" class=\"headerlink\" title=\"公钥私钥加密解密示例\"></a>公钥私钥加密解密示例</h3><ol>\n<li>公钥 (17, 3233) 私钥 (275, 3233)</li>\n<li>加密过程<ul>\n<li>明文 72</li>\n<li>密文 72^17 % 3233 &#x3D; 2201</li>\n</ul>\n</li>\n<li>解密过程<ul>\n<li>密文 2201</li>\n<li>明文 2201^275 % 3233 &#x3D; 72</li>\n</ul>\n</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>这只是一个简单的示例，攻击者可以通过密文、公钥爆破解出原来的明文。但是!<br>由于爆破过程中可以产生多个结果，所以，爆破者无法确定哪个是正确的明文!再但是，由于计算机的计算能力，爆破者可以通过多次尝试，找到正确的明文</li>\n<li>为了防止这种情况，真实的情况可以通过增加密文长度，增加公钥私钥长度，增加计算量，来增加破解难度</li>\n<li><ol start=\"3\">\n<li>比如RSA加密</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>在开始之前，明确几个概念：<br>HTTP 即 “超文本传输层协议”<br>协议是指计算机之间通信的规则的集合，这些规则是**<em>约定俗称</em>**的。<br>超文本，HTML，是http设置之初的传输目标</p>\n<p>本文将会以HTTP的历史为主线，讲述不同版本之间的差异，以及不同版本的新特性。</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>HTTP分为三个版本：HTTP&#x2F;0.9,HTTP&#x2F;1.0、HTTP&#x2F;1.1、HTTP&#x2F;2.0，HTTP&#x2F;3.0</p>\n<h1 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP&#x2F;0.9\"></a>HTTP&#x2F;0.9</h1><p>HTTP&#x2F;0.9是HTTP的第一个版本，它是一个极简的协议<br>只有一个命令GET，没有HEADER等描述数据的信息，服务器发送完毕数据之后就关闭TCP连接。</p>\n<p>他的报文只有一行，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /index.html</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP&#x2F;1.0\"></a>HTTP&#x2F;1.0</h1><ol>\n<li>随着每个请求发送协议版本信息，原来第一行只有 方法+路径，现在变成了 方法+路径+协议版本</li>\n<li>服务端会发送状态码，使客户端可以更灵活的处理请求</li>\n<li>新增了一些请求方法，POST、HEAD</li>\n<li>引入了HTTP Header，具备了传输纯文本HTML以外的能力</li>\n</ol>\n<p>以下是HTTP&#x2F;1.0的报文格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /mypage.html HTTP/1.0</span><br><span class=\"line\">User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)</span><br><span class=\"line\"></span><br><span class=\"line\">200 OK</span><br><span class=\"line\">Date: Tue, 15 Nov 1994 08:12:31 GMT</span><br><span class=\"line\">Server: CERN/3.0 libwww/2.17</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">&lt;HTML&gt;</span><br><span class=\"line\">一个包含图片的页面</span><br><span class=\"line\">  &lt;IMG SRC=&quot;/myimage.gif&quot;&gt;</span><br><span class=\"line\">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Content-Type 示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type: text/gif</span><br><span class=\"line\">(这里是图片内容)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>User-Agent: 告诉服务器客户端的类型和版本信息，服务端可以因此返回不同的资源，可以用于解决浏览器兼容性问题</li>\n<li>Server:用于告诉客户端服务器的类型和版本信息</li>\n<li>Content-Type: 用于告诉客户端返回的资源类型，如果存在，浏览器将不考虑文件类型完全按照这个字段解析，如果不存在，则由浏览器自主判断</li>\n<li>Body: 服务器返回的资源</li>\n</ul>\n<h1 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP&#x2F;1.1\"></a>HTTP&#x2F;1.1</h1><p>HTTP&#x2F;1.0是HTTP的第一个正式版本，它的特点是：</p>\n<ol>\n<li>连接可以复用，节省了多次打开TCP连接的时间</li>\n<li>增加管线化技术，实现流水线、并发两种请求方式</li>\n<li>增加了PUT、DELETE、TRACE、OPTIONS等方法</li>\n<li>增加了状态码</li>\n<li>引入内容协商机制，客户端和服务器交换最合适的内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /zh-CN/docs/Glossary/CORS-safelisted_request_header HTTP/1.1</span><br><span class=\"line\">Host: developer.mozilla.org</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.9</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br</span><br><span class=\"line\">Referer: https://developer.mozilla.org/zh-CN/docs/Glossary/CORS-safelisted_request_header</span><br><span class=\"line\"></span><br><span class=\"line\">200 OK</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Date: Wed, 20 Jul 2016 10:55:30 GMT</span><br><span class=\"line\">Keep-Alive: timeout=5, max=1000</span><br><span class=\"line\">Etag: &quot;547fa7e369ef56031dd3bff2ace9fc0832eb251a&quot;</span><br><span class=\"line\">Last-Modified: Tue, 19 Jul 2016 00:59:33 GMT</span><br><span class=\"line\">Server: Apache</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Vary: Cookie, Accept-Encoding</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，新增加了几个字段</p>\n<ul>\n<li>Accept: 告诉服务器客户端接受的资源类型</li>\n<li>Accept-Language: 告诉服务器客户端接受的语言</li>\n<li>Accept-Encoding: 告诉服务器客户端接受的编码方式</li>\n<li>Referer: 告诉服务器客户端请求的来源,允许服务器生成回退链接，用于日志记录等，但是可能会带来隐私问题，Referrer-Policy可以控制这个字段的发送</li>\n<li>Content-Encoding: 告诉客户端返回的资源的编码方式</li>\n<li>Etag: 用于缓存控制</li>\n<li>Last-Modified: 用于缓存控制</li>\n<li>Transfer-Encoding: chunked，告诉客户端返回的资源是分块传输的</li>\n<li>Vary: Cookie, Accept-Encoding，告诉客户端服务器根据这两个字段来生成缓存</li>\n<li>Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接</li>\n<li>Keep-Alive: timeout&#x3D;5, max&#x3D;1000，告诉客户端服务器保持连接的时间和最大连接数</li>\n<li>Server: Apache，告诉客户端服务器的类型和版本信息</li>\n</ul>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><p>在这个版本里，增加了许多字段,这些字段可以让客户端和服务器更好的交互，提高了HTTP的性能</p>\n<h3 id=\"TCP连接复用\"><a href=\"#TCP连接复用\" class=\"headerlink\" title=\"TCP连接复用\"></a>TCP连接复用</h3><p>相关字段：</p>\n<ul>\n<li>Connection: Keep-Alive，告诉服务器客户端是否支持长连接，即保持TCP连接</li>\n<li>Keep-Alive: timeout&#x3D;5, max&#x3D;1000，告诉客户端服务器保持连接的时间和最大连接数</li>\n</ul>\n<p>在HTTP1.0以及其以前，发送一个HTTP请求需要建立一个TCP连接，信息发送之后，立即关闭连接，这样的方式效率很低，因为TCP连接的建立和关闭都需要时间，<br>而且每次建立连接都需要三次握手。<br>所以HTTP1.1引入了长连接，即在一个TCP连接上可以发送多个HTTP请求，这样就可以节省大量的时间。</p>\n<p><img src=\"/2024/07/12/10http/multi-tcp.png\" alt=\"TCP连接复用\"></p>\n<h3 id=\"HTTP缓存\"><a href=\"#HTTP缓存\" class=\"headerlink\" title=\"HTTP缓存\"></a>HTTP缓存</h3><h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><p><img src=\"/2024/07/12/10http/strong-save.png\" alt=\"强缓存\"></p>\n<p>浏览器不会向服务器发送请求，直接从<em><strong>缓存</strong></em>中读取资源</p>\n<ul>\n<li>Expires: Tue, 19 Jul 2016 00:59:33 GMT</li>\n<li>Cache-Control: max-age&#x3D;3600</li>\n</ul>\n<p>在HTTP 1.0时，使用是Expires字段，告诉客户端资源的过期时间<br>但是时间格式难以解析，也发现了很多实现的错误，有可能通过故意偏移系统时钟来诱发问题</p>\n<p>在HTTP 1.1时，引入了Cache-Control字段，可以更加灵活的控制缓存策略,如max-age&#x3D;3600，表示资源在3600秒内有效</p>\n<p>上文提到，直接从缓存中读取资源，这里的缓存是指浏览器的缓存<br>初次请求时，浏览器会将资源缓存到本地，下次请求时，浏览器会判断是否有**<em>名称相同</em>**的资源，如果有，直接从本地读取，不会向服务器发送请求</p>\n<p>比如第一次请求一个index.html，浏览器会将这个资源缓存到本地，下次请求时，浏览器会判断是否有index.html这个资源，如果有，直接从本地读取</p>\n<p>拓展：<br>为什么在本地开发原生html的时候需要保存一下才能显示最新的界面？</p>\n<p>因为浏览器会缓存html页面，保存一下是为了更改html资源的hash值,这样才能显示最新的界面</p>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><p>两种方法</p>\n<ol>\n<li>Etag + If-None-Match</li>\n</ol>\n<ul>\n<li>第一次请求时，设置Etag</li>\n<li>第二次请求时，随If-None-Match字段发送Etag，服务器根据Etag判断资源是否更新，如果没有更新，返回304，否则返回200</li>\n</ul>\n<ol start=\"2\">\n<li>Last-Modified + If-Modified-Since</li>\n</ol>\n<ul>\n<li>第一次请求时，设置Last-Modified</li>\n<li>第二次请求时，随If-Modified-Since字段发送Last-Modified，服务器根据Last-Modified判断资源是否更新，如果没有更新，返回304，否则返回200</li>\n</ul>\n<h1 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP&#x2F;2.0\"></a>HTTP&#x2F;2.0</h1><p>特点：</p>\n<ol>\n<li>由原来的文本协议变成了二进制协议，即，不在可读</li>\n<li>多路复用，一个TCP连接上可以同时发送多个请求</li>\n<li>首部压缩，减少了首部的大小</li>\n</ol>\n<p><img src=\"/2024/07/12/10http/http2.png\" alt=\"HTTP/2.0\"></p>\n<h1 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h1><p><img src=\"/2024/07/12/10http/App-Tsl.png\" alt=\"HTTPS\"></p>\n<p>HTTPS是HTTP的安全版本，它是在HTTP的基础上加入了SSL或者TLS协议，用于加密数据传输</p>\n<p>SSL是TSL的前身</p>\n<h2 id=\"TSL加密过程\"><a href=\"#TSL加密过程\" class=\"headerlink\" title=\"TSL加密过程\"></a>TSL加密过程</h2><ol>\n<li>客户端向服务器发送一个请求，请求建立一个安全连接,同时发送TSL版本，以及生成并发送第一个随机数 （此时，客户端拥有第一随机数，服务端拥有第一随机数）</li>\n<li>服务端收到请求，向客户端发送一个证书，证书中包含了服务端的公钥，以及生成并发送第二个随机数<br>（客户端拥有公钥、第一随机数，第二随机数，服务端拥有公钥、私钥、第一随机数，第二随机数)</li>\n<li></li>\n</ol>\n<p>客户端生成一个预主密钥，并使用公钥加密，之后发送到服务端，服务端用私钥解密（此时，客户端拥有公钥、第一随机数，第二随机数、预主密钥，服务端拥有公钥、私钥、第一随机数，第二随机数,预主密钥)</p>\n<ol start=\"4\">\n<li>之后，服务端和客户端分别用第一随机数、第二随机数、预主密钥计算出会话密钥</li>\n<li>之后，开始通信</li>\n</ol>\n<p>这样具体在哪些方面比较安全？</p>\n<ol>\n<li>信息是加密的，即人类无法阅读</li>\n<li>客户端全程不接触用来解密的私钥，防止了客户端离谱的操作带来的问题</li>\n<li>会话密钥生成过程中完全没有经过网络传输</li>\n</ol>\n<h3 id=\"公钥私钥加密解密示例\"><a href=\"#公钥私钥加密解密示例\" class=\"headerlink\" title=\"公钥私钥加密解密示例\"></a>公钥私钥加密解密示例</h3><ol>\n<li>公钥 (17, 3233) 私钥 (275, 3233)</li>\n<li>加密过程<ul>\n<li>明文 72</li>\n<li>密文 72^17 % 3233 &#x3D; 2201</li>\n</ul>\n</li>\n<li>解密过程<ul>\n<li>密文 2201</li>\n<li>明文 2201^275 % 3233 &#x3D; 72</li>\n</ul>\n</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>这只是一个简单的示例，攻击者可以通过密文、公钥爆破解出原来的明文。但是!<br>由于爆破过程中可以产生多个结果，所以，爆破者无法确定哪个是正确的明文!再但是，由于计算机的计算能力，爆破者可以通过多次尝试，找到正确的明文</li>\n<li>为了防止这种情况，真实的情况可以通过增加密文长度，增加公钥私钥长度，增加计算量，来增加破解难度</li>\n<li><ol start=\"3\">\n<li>比如RSA加密</li>\n</ol>\n</li>\n</ol>\n"},{"title":"OAuth2.0与SSO：打造一个属于懒蛋的世界","date":"2024-07-22T13:03:07.285Z","updated":"2024-07-23T09:31:10.740Z","description":"试想一下，你是一个懒蛋，你不想记住各种各样的账号密码，你不想在各种网站上注册账号，你只想使用一个账号密码，然后就可以访问所有的网站，这个时候，OAuth2.0和SSO就是你的救星。","top_img":null,"_content":"\n试想一下，你是一个懒蛋，\n你不想记住各种各样的账号密码，\n你不想在各种网站上注册账号，\n你只想使用一个账号密码，\n然后就可以访问所有的网站，\n这个时候，OAuth2.0和SSO就是你的救星。\n\n# OAuth2.0\n\n<img src=\"xichuangzhu.jpg\" height=\"300px\" alt=\"app\">\n\n请看上图的最下方，有许多用其他方式登录的选项，这就是OAuth2的应用场景\n\n点击微信登录之后\n\n<img src=\"wechatusers.jpg\" height=\"300px\" alt=\"选择用户\">\n<img src=\"loginsuccess.jpg\" height=\"300px\" alt=\"登录成功\">\n\n那么，西窗烛是怎么和微信的用户信息进行关联的呢？\n\n<img src=\"oauth2.png\" height=\"400px\" alt=\"oauth2全流程演示\">\n\n第一步，用户登录时需要选择登录方式，西窗烛确认用户登录方式后，返回一个<span style=\"color: red\">uri</span>跳转到对应的授权界面\n第二步，用户选择对应的<span style=\"color: red\">登录用户</span>，同意授权\n第三步，西窗烛告诉微信 “用户要使用你的资源，快给我” ，微信Auth服务返回一个Access Token给西窗烛\n最后一步，西窗烛 使用Access Token向微信（Resource）资源服务请求对应用户的信息\n\n大概流程就是这样，我们下期再见...\n\n等等！你也发现了，上面的流程漏洞百出对不对？\n别急，我已经预判到了你的想法，让我们慢慢讲\n\n### 西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\n\n首先，能够实现微信登录的应用都是经过微信审核认证通过的，\n微信会给审核通过的应用一个Secret Id 和Secret Key，\n应用索要用户信息时需要携带这两个键，用于告诉微信 “是谁在向你要信息”\n\n就像是一个房子，只有拥有钥匙的客人才能够进去使用\n\n### 如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办 ？\n\n这也不需要着急，还记得我们说的第一步吗，\n西窗烛返回一个uri，然后用户的会跳转到对应uri的界面，在这里是微信界面，\n事实上，此时，用户就已经进入到微信所能掌控的领域了，而并不是西窗烛，\n<span  style=\"color: orange\">用户根据微信提供的授权界面进行授权</span>\n换句话说，这个操作是在 _**微信_** 进行的！\n\n### 好好好算你厉害，最后一个问题，应用如果使用Access Token随意获取用户信息怎么办（冷笑）？\n\n你先冷静，我猜你的问题是\n应用申请完一个用户的Access Token，但是用这个用户的Access Token请求其他用户的信息怎么办，对不对？\n这位同志，我建议你先去看一下JWT，Token中是包含目标用户id、以及有效时间的\n不仅能够防止不同用户的Access Token隔离\n也能防止一个Access Token请求多次\n\n\n既然这位同志没有问题了，那么我们开始介绍SSO单点登录\n\n# SSO单点登录\n\nSSO单点登录，是指用户只需要登录一次（通过一个专门的服务提供商），就可以访问所有的应用，而不需要再次登录\n那有人就会问了，这不就是OAuth2吗？\n还是那句话：别急，我们往下看!\n\n还是那句话，先上图！\n<img src=\"ssoa.png\" alt=\"SSO大致流程\">\n\n很乱，看不懂，对吧？我们慢慢来\n\n首先我们设想现在有一个用户，叫user1，然后服务提供商叫做identity provider，有两个应用，分别叫做app1和app2\n\n用户登陆时，\n1. 用户访问app1，app1发现用户没有登录，返回一个SAR（Service Authorization Request）给浏览器\n2. 用户根据返回的SAR，跳转到SAR指定的identity provider的登录界面\n3. identity provider给用户展示一个登录界面，用户正常登录\n4. 用户登录之后，identity provider返回一个SAML给用户 \n5. 用户拿着SAML，跳转到app1的界面，app1进行验证（公钥私钥）\n6. 验证通过，app1允许用户登录\n\n这里面有几个专业名词，稍微解释一下:\n\n1. SAML：Security Assertion Markup Language，安全断言标记语言，是一种基于XML的标准，用于在不同的安全域之间传递身份验证和授权数据\n简单的来说，在这个场景中，就是一个包含有用户信息的、加密的XML文件\n\n2. SAR：SAML Authorization Request, SAML授权请求\n\n3. identity provider：身份提供商，负责用户的认证和授权\n\n当用户第二次登录时：\n1. 用户访问app2, app2也会返回一个SAR给浏览器\n2. 浏览器根据SAR跳转到identity provider的登录界面，此时，identity provider会发现用户已经登录过了，直接返回SAML给用户\n3. 用户拿着SAML，跳转到app2的界面，app2进行验证\n\n这就是SSO单点登录的大致流程，当然，实际上，还有很多细节需要处理，比如SAML的加密解密，SAML的有效时间等等\n\n\n# OAuth2.0与SSO的区别\n\n简单的来说， OAuth2.0是一种授权协议，SSO是一种登录方式\nOAuth2主要用于不同团体的应用，而SSO主要用于同一个团体，比如公司内部的应用\n\n1. OAuth2主要用于授权一些平台账号的资源，比如头像、用户名之类的，“平台”有自己专门的功能，\n2. SSO主要用于公司内部的应用，而identity provider就是公司的统一认证中心，专门负责用户的认证和授权\n\nCasdoor：一个开源的SSO单点登录系统，可以用于公司内部的应用\n\n\n","source":"_posts/11oauth2-sso.md","raw":"---\ntitle: OAuth2.0与SSO：打造一个属于懒蛋的世界\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription: 试想一下，你是一个懒蛋，你不想记住各种各样的账号密码，你不想在各种网站上注册账号，你只想使用一个账号密码，然后就可以访问所有的网站，这个时候，OAuth2.0和SSO就是你的救星。\ntop_img:\ntags:\n  - develop\n  - 本手 \n---\n\n试想一下，你是一个懒蛋，\n你不想记住各种各样的账号密码，\n你不想在各种网站上注册账号，\n你只想使用一个账号密码，\n然后就可以访问所有的网站，\n这个时候，OAuth2.0和SSO就是你的救星。\n\n# OAuth2.0\n\n<img src=\"xichuangzhu.jpg\" height=\"300px\" alt=\"app\">\n\n请看上图的最下方，有许多用其他方式登录的选项，这就是OAuth2的应用场景\n\n点击微信登录之后\n\n<img src=\"wechatusers.jpg\" height=\"300px\" alt=\"选择用户\">\n<img src=\"loginsuccess.jpg\" height=\"300px\" alt=\"登录成功\">\n\n那么，西窗烛是怎么和微信的用户信息进行关联的呢？\n\n<img src=\"oauth2.png\" height=\"400px\" alt=\"oauth2全流程演示\">\n\n第一步，用户登录时需要选择登录方式，西窗烛确认用户登录方式后，返回一个<span style=\"color: red\">uri</span>跳转到对应的授权界面\n第二步，用户选择对应的<span style=\"color: red\">登录用户</span>，同意授权\n第三步，西窗烛告诉微信 “用户要使用你的资源，快给我” ，微信Auth服务返回一个Access Token给西窗烛\n最后一步，西窗烛 使用Access Token向微信（Resource）资源服务请求对应用户的信息\n\n大概流程就是这样，我们下期再见...\n\n等等！你也发现了，上面的流程漏洞百出对不对？\n别急，我已经预判到了你的想法，让我们慢慢讲\n\n### 西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\n\n首先，能够实现微信登录的应用都是经过微信审核认证通过的，\n微信会给审核通过的应用一个Secret Id 和Secret Key，\n应用索要用户信息时需要携带这两个键，用于告诉微信 “是谁在向你要信息”\n\n就像是一个房子，只有拥有钥匙的客人才能够进去使用\n\n### 如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办 ？\n\n这也不需要着急，还记得我们说的第一步吗，\n西窗烛返回一个uri，然后用户的会跳转到对应uri的界面，在这里是微信界面，\n事实上，此时，用户就已经进入到微信所能掌控的领域了，而并不是西窗烛，\n<span  style=\"color: orange\">用户根据微信提供的授权界面进行授权</span>\n换句话说，这个操作是在 _**微信_** 进行的！\n\n### 好好好算你厉害，最后一个问题，应用如果使用Access Token随意获取用户信息怎么办（冷笑）？\n\n你先冷静，我猜你的问题是\n应用申请完一个用户的Access Token，但是用这个用户的Access Token请求其他用户的信息怎么办，对不对？\n这位同志，我建议你先去看一下JWT，Token中是包含目标用户id、以及有效时间的\n不仅能够防止不同用户的Access Token隔离\n也能防止一个Access Token请求多次\n\n\n既然这位同志没有问题了，那么我们开始介绍SSO单点登录\n\n# SSO单点登录\n\nSSO单点登录，是指用户只需要登录一次（通过一个专门的服务提供商），就可以访问所有的应用，而不需要再次登录\n那有人就会问了，这不就是OAuth2吗？\n还是那句话：别急，我们往下看!\n\n还是那句话，先上图！\n<img src=\"ssoa.png\" alt=\"SSO大致流程\">\n\n很乱，看不懂，对吧？我们慢慢来\n\n首先我们设想现在有一个用户，叫user1，然后服务提供商叫做identity provider，有两个应用，分别叫做app1和app2\n\n用户登陆时，\n1. 用户访问app1，app1发现用户没有登录，返回一个SAR（Service Authorization Request）给浏览器\n2. 用户根据返回的SAR，跳转到SAR指定的identity provider的登录界面\n3. identity provider给用户展示一个登录界面，用户正常登录\n4. 用户登录之后，identity provider返回一个SAML给用户 \n5. 用户拿着SAML，跳转到app1的界面，app1进行验证（公钥私钥）\n6. 验证通过，app1允许用户登录\n\n这里面有几个专业名词，稍微解释一下:\n\n1. SAML：Security Assertion Markup Language，安全断言标记语言，是一种基于XML的标准，用于在不同的安全域之间传递身份验证和授权数据\n简单的来说，在这个场景中，就是一个包含有用户信息的、加密的XML文件\n\n2. SAR：SAML Authorization Request, SAML授权请求\n\n3. identity provider：身份提供商，负责用户的认证和授权\n\n当用户第二次登录时：\n1. 用户访问app2, app2也会返回一个SAR给浏览器\n2. 浏览器根据SAR跳转到identity provider的登录界面，此时，identity provider会发现用户已经登录过了，直接返回SAML给用户\n3. 用户拿着SAML，跳转到app2的界面，app2进行验证\n\n这就是SSO单点登录的大致流程，当然，实际上，还有很多细节需要处理，比如SAML的加密解密，SAML的有效时间等等\n\n\n# OAuth2.0与SSO的区别\n\n简单的来说， OAuth2.0是一种授权协议，SSO是一种登录方式\nOAuth2主要用于不同团体的应用，而SSO主要用于同一个团体，比如公司内部的应用\n\n1. OAuth2主要用于授权一些平台账号的资源，比如头像、用户名之类的，“平台”有自己专门的功能，\n2. SSO主要用于公司内部的应用，而identity provider就是公司的统一认证中心，专门负责用户的认证和授权\n\nCasdoor：一个开源的SSO单点登录系统，可以用于公司内部的应用\n\n\n","slug":"11oauth2-sso","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gdm0003zw6k47vo6txz","content":"<p>试想一下，你是一个懒蛋，<br>你不想记住各种各样的账号密码，<br>你不想在各种网站上注册账号，<br>你只想使用一个账号密码，<br>然后就可以访问所有的网站，<br>这个时候，OAuth2.0和SSO就是你的救星。</p>\n<h1 id=\"OAuth2-0\"><a href=\"#OAuth2-0\" class=\"headerlink\" title=\"OAuth2.0\"></a>OAuth2.0</h1><img src=\"xichuangzhu.jpg\" height=\"300px\" alt=\"app\">\n\n<p>请看上图的最下方，有许多用其他方式登录的选项，这就是OAuth2的应用场景</p>\n<p>点击微信登录之后</p>\n<img src=\"wechatusers.jpg\" height=\"300px\" alt=\"选择用户\">\n<img src=\"loginsuccess.jpg\" height=\"300px\" alt=\"登录成功\">\n\n<p>那么，西窗烛是怎么和微信的用户信息进行关联的呢？</p>\n<img src=\"oauth2.png\" height=\"400px\" alt=\"oauth2全流程演示\">\n\n<p>第一步，用户登录时需要选择登录方式，西窗烛确认用户登录方式后，返回一个<span style=\"color: red\">uri</span>跳转到对应的授权界面<br>第二步，用户选择对应的<span style=\"color: red\">登录用户</span>，同意授权<br>第三步，西窗烛告诉微信 “用户要使用你的资源，快给我” ，微信Auth服务返回一个Access Token给西窗烛<br>最后一步，西窗烛 使用Access Token向微信（Resource）资源服务请求对应用户的信息</p>\n<p>大概流程就是这样，我们下期再见…</p>\n<p>等等！你也发现了，上面的流程漏洞百出对不对？<br>别急，我已经预判到了你的想法，让我们慢慢讲</p>\n<h3 id=\"西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\"><a href=\"#西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\" class=\"headerlink\" title=\"西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\"></a>西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？</h3><p>首先，能够实现微信登录的应用都是经过微信审核认证通过的，<br>微信会给审核通过的应用一个Secret Id 和Secret Key，<br>应用索要用户信息时需要携带这两个键，用于告诉微信 “是谁在向你要信息”</p>\n<p>就像是一个房子，只有拥有钥匙的客人才能够进去使用</p>\n<h3 id=\"如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办-？\"><a href=\"#如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办-？\" class=\"headerlink\" title=\"如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办 ？\"></a>如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办 ？</h3><p>这也不需要着急，还记得我们说的第一步吗，<br>西窗烛返回一个uri，然后用户的会跳转到对应uri的界面，在这里是微信界面，<br>事实上，此时，用户就已经进入到微信所能掌控的领域了，而并不是西窗烛，<br><span  style=\"color: orange\">用户根据微信提供的授权界面进行授权</span><br>换句话说，这个操作是在 _<strong>微信_</strong> 进行的！</p>\n<h3 id=\"好好好算你厉害，最后一个问题，应用如果使用Access-Token随意获取用户信息怎么办（冷笑）？\"><a href=\"#好好好算你厉害，最后一个问题，应用如果使用Access-Token随意获取用户信息怎么办（冷笑）？\" class=\"headerlink\" title=\"好好好算你厉害，最后一个问题，应用如果使用Access Token随意获取用户信息怎么办（冷笑）？\"></a>好好好算你厉害，最后一个问题，应用如果使用Access Token随意获取用户信息怎么办（冷笑）？</h3><p>你先冷静，我猜你的问题是<br>应用申请完一个用户的Access Token，但是用这个用户的Access Token请求其他用户的信息怎么办，对不对？<br>这位同志，我建议你先去看一下JWT，Token中是包含目标用户id、以及有效时间的<br>不仅能够防止不同用户的Access Token隔离<br>也能防止一个Access Token请求多次</p>\n<p>既然这位同志没有问题了，那么我们开始介绍SSO单点登录</p>\n<h1 id=\"SSO单点登录\"><a href=\"#SSO单点登录\" class=\"headerlink\" title=\"SSO单点登录\"></a>SSO单点登录</h1><p>SSO单点登录，是指用户只需要登录一次（通过一个专门的服务提供商），就可以访问所有的应用，而不需要再次登录<br>那有人就会问了，这不就是OAuth2吗？<br>还是那句话：别急，我们往下看!</p>\n<p>还是那句话，先上图！<br><img src=\"ssoa.png\" alt=\"SSO大致流程\"></p>\n<p>很乱，看不懂，对吧？我们慢慢来</p>\n<p>首先我们设想现在有一个用户，叫user1，然后服务提供商叫做identity provider，有两个应用，分别叫做app1和app2</p>\n<p>用户登陆时，</p>\n<ol>\n<li>用户访问app1，app1发现用户没有登录，返回一个SAR（Service Authorization Request）给浏览器</li>\n<li>用户根据返回的SAR，跳转到SAR指定的identity provider的登录界面</li>\n<li>identity provider给用户展示一个登录界面，用户正常登录</li>\n<li>用户登录之后，identity provider返回一个SAML给用户 </li>\n<li>用户拿着SAML，跳转到app1的界面，app1进行验证（公钥私钥）</li>\n<li>验证通过，app1允许用户登录</li>\n</ol>\n<p>这里面有几个专业名词，稍微解释一下:</p>\n<ol>\n<li><p>SAML：Security Assertion Markup Language，安全断言标记语言，是一种基于XML的标准，用于在不同的安全域之间传递身份验证和授权数据<br>简单的来说，在这个场景中，就是一个包含有用户信息的、加密的XML文件</p>\n</li>\n<li><p>SAR：SAML Authorization Request, SAML授权请求</p>\n</li>\n<li><p>identity provider：身份提供商，负责用户的认证和授权</p>\n</li>\n</ol>\n<p>当用户第二次登录时：</p>\n<ol>\n<li>用户访问app2, app2也会返回一个SAR给浏览器</li>\n<li>浏览器根据SAR跳转到identity provider的登录界面，此时，identity provider会发现用户已经登录过了，直接返回SAML给用户</li>\n<li>用户拿着SAML，跳转到app2的界面，app2进行验证</li>\n</ol>\n<p>这就是SSO单点登录的大致流程，当然，实际上，还有很多细节需要处理，比如SAML的加密解密，SAML的有效时间等等</p>\n<h1 id=\"OAuth2-0与SSO的区别\"><a href=\"#OAuth2-0与SSO的区别\" class=\"headerlink\" title=\"OAuth2.0与SSO的区别\"></a>OAuth2.0与SSO的区别</h1><p>简单的来说， OAuth2.0是一种授权协议，SSO是一种登录方式<br>OAuth2主要用于不同团体的应用，而SSO主要用于同一个团体，比如公司内部的应用</p>\n<ol>\n<li>OAuth2主要用于授权一些平台账号的资源，比如头像、用户名之类的，“平台”有自己专门的功能，</li>\n<li>SSO主要用于公司内部的应用，而identity provider就是公司的统一认证中心，专门负责用户的认证和授权</li>\n</ol>\n<p>Casdoor：一个开源的SSO单点登录系统，可以用于公司内部的应用</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>试想一下，你是一个懒蛋，<br>你不想记住各种各样的账号密码，<br>你不想在各种网站上注册账号，<br>你只想使用一个账号密码，<br>然后就可以访问所有的网站，<br>这个时候，OAuth2.0和SSO就是你的救星。</p>\n<h1 id=\"OAuth2-0\"><a href=\"#OAuth2-0\" class=\"headerlink\" title=\"OAuth2.0\"></a>OAuth2.0</h1><img src=\"xichuangzhu.jpg\" height=\"300px\" alt=\"app\">\n\n<p>请看上图的最下方，有许多用其他方式登录的选项，这就是OAuth2的应用场景</p>\n<p>点击微信登录之后</p>\n<img src=\"wechatusers.jpg\" height=\"300px\" alt=\"选择用户\">\n<img src=\"loginsuccess.jpg\" height=\"300px\" alt=\"登录成功\">\n\n<p>那么，西窗烛是怎么和微信的用户信息进行关联的呢？</p>\n<img src=\"oauth2.png\" height=\"400px\" alt=\"oauth2全流程演示\">\n\n<p>第一步，用户登录时需要选择登录方式，西窗烛确认用户登录方式后，返回一个<span style=\"color: red\">uri</span>跳转到对应的授权界面<br>第二步，用户选择对应的<span style=\"color: red\">登录用户</span>，同意授权<br>第三步，西窗烛告诉微信 “用户要使用你的资源，快给我” ，微信Auth服务返回一个Access Token给西窗烛<br>最后一步，西窗烛 使用Access Token向微信（Resource）资源服务请求对应用户的信息</p>\n<p>大概流程就是这样，我们下期再见…</p>\n<p>等等！你也发现了，上面的流程漏洞百出对不对？<br>别急，我已经预判到了你的想法，让我们慢慢讲</p>\n<h3 id=\"西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\"><a href=\"#西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\" class=\"headerlink\" title=\"西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？\"></a>西窗烛告诉微信要资源他就给，万一是一个恶意软件呢？</h3><p>首先，能够实现微信登录的应用都是经过微信审核认证通过的，<br>微信会给审核通过的应用一个Secret Id 和Secret Key，<br>应用索要用户信息时需要携带这两个键，用于告诉微信 “是谁在向你要信息”</p>\n<p>就像是一个房子，只有拥有钥匙的客人才能够进去使用</p>\n<h3 id=\"如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办-？\"><a href=\"#如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办-？\" class=\"headerlink\" title=\"如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办 ？\"></a>如果是一个伪装成好的软件的恶意软件，用户没同意也说他同意了怎么办 ？</h3><p>这也不需要着急，还记得我们说的第一步吗，<br>西窗烛返回一个uri，然后用户的会跳转到对应uri的界面，在这里是微信界面，<br>事实上，此时，用户就已经进入到微信所能掌控的领域了，而并不是西窗烛，<br><span  style=\"color: orange\">用户根据微信提供的授权界面进行授权</span><br>换句话说，这个操作是在 _<strong>微信_</strong> 进行的！</p>\n<h3 id=\"好好好算你厉害，最后一个问题，应用如果使用Access-Token随意获取用户信息怎么办（冷笑）？\"><a href=\"#好好好算你厉害，最后一个问题，应用如果使用Access-Token随意获取用户信息怎么办（冷笑）？\" class=\"headerlink\" title=\"好好好算你厉害，最后一个问题，应用如果使用Access Token随意获取用户信息怎么办（冷笑）？\"></a>好好好算你厉害，最后一个问题，应用如果使用Access Token随意获取用户信息怎么办（冷笑）？</h3><p>你先冷静，我猜你的问题是<br>应用申请完一个用户的Access Token，但是用这个用户的Access Token请求其他用户的信息怎么办，对不对？<br>这位同志，我建议你先去看一下JWT，Token中是包含目标用户id、以及有效时间的<br>不仅能够防止不同用户的Access Token隔离<br>也能防止一个Access Token请求多次</p>\n<p>既然这位同志没有问题了，那么我们开始介绍SSO单点登录</p>\n<h1 id=\"SSO单点登录\"><a href=\"#SSO单点登录\" class=\"headerlink\" title=\"SSO单点登录\"></a>SSO单点登录</h1><p>SSO单点登录，是指用户只需要登录一次（通过一个专门的服务提供商），就可以访问所有的应用，而不需要再次登录<br>那有人就会问了，这不就是OAuth2吗？<br>还是那句话：别急，我们往下看!</p>\n<p>还是那句话，先上图！<br><img src=\"ssoa.png\" alt=\"SSO大致流程\"></p>\n<p>很乱，看不懂，对吧？我们慢慢来</p>\n<p>首先我们设想现在有一个用户，叫user1，然后服务提供商叫做identity provider，有两个应用，分别叫做app1和app2</p>\n<p>用户登陆时，</p>\n<ol>\n<li>用户访问app1，app1发现用户没有登录，返回一个SAR（Service Authorization Request）给浏览器</li>\n<li>用户根据返回的SAR，跳转到SAR指定的identity provider的登录界面</li>\n<li>identity provider给用户展示一个登录界面，用户正常登录</li>\n<li>用户登录之后，identity provider返回一个SAML给用户 </li>\n<li>用户拿着SAML，跳转到app1的界面，app1进行验证（公钥私钥）</li>\n<li>验证通过，app1允许用户登录</li>\n</ol>\n<p>这里面有几个专业名词，稍微解释一下:</p>\n<ol>\n<li><p>SAML：Security Assertion Markup Language，安全断言标记语言，是一种基于XML的标准，用于在不同的安全域之间传递身份验证和授权数据<br>简单的来说，在这个场景中，就是一个包含有用户信息的、加密的XML文件</p>\n</li>\n<li><p>SAR：SAML Authorization Request, SAML授权请求</p>\n</li>\n<li><p>identity provider：身份提供商，负责用户的认证和授权</p>\n</li>\n</ol>\n<p>当用户第二次登录时：</p>\n<ol>\n<li>用户访问app2, app2也会返回一个SAR给浏览器</li>\n<li>浏览器根据SAR跳转到identity provider的登录界面，此时，identity provider会发现用户已经登录过了，直接返回SAML给用户</li>\n<li>用户拿着SAML，跳转到app2的界面，app2进行验证</li>\n</ol>\n<p>这就是SSO单点登录的大致流程，当然，实际上，还有很多细节需要处理，比如SAML的加密解密，SAML的有效时间等等</p>\n<h1 id=\"OAuth2-0与SSO的区别\"><a href=\"#OAuth2-0与SSO的区别\" class=\"headerlink\" title=\"OAuth2.0与SSO的区别\"></a>OAuth2.0与SSO的区别</h1><p>简单的来说， OAuth2.0是一种授权协议，SSO是一种登录方式<br>OAuth2主要用于不同团体的应用，而SSO主要用于同一个团体，比如公司内部的应用</p>\n<ol>\n<li>OAuth2主要用于授权一些平台账号的资源，比如头像、用户名之类的，“平台”有自己专门的功能，</li>\n<li>SSO主要用于公司内部的应用，而identity provider就是公司的统一认证中心，专门负责用户的认证和授权</li>\n</ol>\n<p>Casdoor：一个开源的SSO单点登录系统，可以用于公司内部的应用</p>\n"},{"title":"javascript-词法环境","date":"2024-07-26T22:47:30.515Z","updated":"2024-07-26T23:25:14.938Z","description":null,"top_img":null,"_content":"\n词法环境：\n每个运行的函数、代码块、以及整个脚本，都有一个词法环境，\n这个词法环境是一个内部隐藏的关联对象\n\n词法环境包括两个部分：\n1. 存储自己作用域内所有的变量\n2. 对外部词法环境的引用\n\n思考逻辑：\n声明一个变量是在这个变量所处地方的***词法环境***对象（特殊内部对象的属性）添加一个属性\n修改一个变量也是修改词法环境内部的一个属性\n\n不过，词法环境只是存在于规范层面，用来具体的描述对象是怎么工作的\n事实上并不存在与之对应的对象\n\n### 词法环境间的引用\n\n在一个函数运行时，会自动创建一个新的词法环境来储存他内部的局部变量和参数\n\n![执行过程](functioncreate.png)\n\n此时，我我们有两个词法环境\n一个是函数内部的，一个是全局、函数外部的\n\n当代码要访问一个变量的时候，首先会搜索内部词法环境，然后搜索外部，\n直到全局词法环境或者找到自己要的\n\n注意：每次某个函数被调用时，都会创建一个新的词法环境对象，词法环境中对外部对象的引用是一样的\n所有的函数在“诞生”时都会记住创建它们的词法环境。所有函数都有名为 [[Environment]] 的隐藏属性，该属性保存了对创建该函数的词法环境的引用。\n\n### 使用例子：闭包\n\n闭包指的是一个函数可以记住外部变量并且可以访问这些变量，除了new Function(string)之外的所有函数都是天生带有闭包\n\njavascript的函数会通过[[Environment]]属性记住创建的位置、访问外部变量\n\n\n### 示例\n\n\n![示例](count-example.png)\n\n当使用makeCounter()是，改函数创建一个自己的词法环境，并包含count这个属性\n之后，调用counter时，会创建一个counter的词法环境，之后添加对外部makeCounter词法环境的引用，并尝试搜索count\n但是由于counter词法环境不存在count,于是便会向myCounter搜索\n\n调用counter时，触发 count++ 代码，此时，首先会在counter的此法环境中搜索count，\n由于counter函数的词法环境不存在其他变量，于是便会向上搜索，更改myCounter的词法变量的属性\n\n当我们再次调用makCounter()时，makeCounter会再次创建一个词法环境，这个词法环境包含其内部的新的count\n\n词法环境结构如下：\n![闭包示例](bibao-example.jpg)\n","source":"_posts/12lexical-env.md","raw":"---\ntitle: javascript-词法环境\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription:\ntop_img:\ntags:\n  - 本手\n---\n\n词法环境：\n每个运行的函数、代码块、以及整个脚本，都有一个词法环境，\n这个词法环境是一个内部隐藏的关联对象\n\n词法环境包括两个部分：\n1. 存储自己作用域内所有的变量\n2. 对外部词法环境的引用\n\n思考逻辑：\n声明一个变量是在这个变量所处地方的***词法环境***对象（特殊内部对象的属性）添加一个属性\n修改一个变量也是修改词法环境内部的一个属性\n\n不过，词法环境只是存在于规范层面，用来具体的描述对象是怎么工作的\n事实上并不存在与之对应的对象\n\n### 词法环境间的引用\n\n在一个函数运行时，会自动创建一个新的词法环境来储存他内部的局部变量和参数\n\n![执行过程](functioncreate.png)\n\n此时，我我们有两个词法环境\n一个是函数内部的，一个是全局、函数外部的\n\n当代码要访问一个变量的时候，首先会搜索内部词法环境，然后搜索外部，\n直到全局词法环境或者找到自己要的\n\n注意：每次某个函数被调用时，都会创建一个新的词法环境对象，词法环境中对外部对象的引用是一样的\n所有的函数在“诞生”时都会记住创建它们的词法环境。所有函数都有名为 [[Environment]] 的隐藏属性，该属性保存了对创建该函数的词法环境的引用。\n\n### 使用例子：闭包\n\n闭包指的是一个函数可以记住外部变量并且可以访问这些变量，除了new Function(string)之外的所有函数都是天生带有闭包\n\njavascript的函数会通过[[Environment]]属性记住创建的位置、访问外部变量\n\n\n### 示例\n\n\n![示例](count-example.png)\n\n当使用makeCounter()是，改函数创建一个自己的词法环境，并包含count这个属性\n之后，调用counter时，会创建一个counter的词法环境，之后添加对外部makeCounter词法环境的引用，并尝试搜索count\n但是由于counter词法环境不存在count,于是便会向myCounter搜索\n\n调用counter时，触发 count++ 代码，此时，首先会在counter的此法环境中搜索count，\n由于counter函数的词法环境不存在其他变量，于是便会向上搜索，更改myCounter的词法变量的属性\n\n当我们再次调用makCounter()时，makeCounter会再次创建一个词法环境，这个词法环境包含其内部的新的count\n\n词法环境结构如下：\n![闭包示例](bibao-example.jpg)\n","slug":"12lexical-env","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gdo0005zw6k9g7k0rt0","content":"<p>词法环境：<br>每个运行的函数、代码块、以及整个脚本，都有一个词法环境，<br>这个词法环境是一个内部隐藏的关联对象</p>\n<p>词法环境包括两个部分：</p>\n<ol>\n<li>存储自己作用域内所有的变量</li>\n<li>对外部词法环境的引用</li>\n</ol>\n<p>思考逻辑：<br>声明一个变量是在这个变量所处地方的<em><strong>词法环境</strong></em>对象（特殊内部对象的属性）添加一个属性<br>修改一个变量也是修改词法环境内部的一个属性</p>\n<p>不过，词法环境只是存在于规范层面，用来具体的描述对象是怎么工作的<br>事实上并不存在与之对应的对象</p>\n<h3 id=\"词法环境间的引用\"><a href=\"#词法环境间的引用\" class=\"headerlink\" title=\"词法环境间的引用\"></a>词法环境间的引用</h3><p>在一个函数运行时，会自动创建一个新的词法环境来储存他内部的局部变量和参数</p>\n<p><img src=\"/2024/07/27/12lexical-env/functioncreate.png\" alt=\"执行过程\"></p>\n<p>此时，我我们有两个词法环境<br>一个是函数内部的，一个是全局、函数外部的</p>\n<p>当代码要访问一个变量的时候，首先会搜索内部词法环境，然后搜索外部，<br>直到全局词法环境或者找到自己要的</p>\n<p>注意：每次某个函数被调用时，都会创建一个新的词法环境对象，词法环境中对外部对象的引用是一样的<br>所有的函数在“诞生”时都会记住创建它们的词法环境。所有函数都有名为 [[Environment]] 的隐藏属性，该属性保存了对创建该函数的词法环境的引用。</p>\n<h3 id=\"使用例子：闭包\"><a href=\"#使用例子：闭包\" class=\"headerlink\" title=\"使用例子：闭包\"></a>使用例子：闭包</h3><p>闭包指的是一个函数可以记住外部变量并且可以访问这些变量，除了new Function(string)之外的所有函数都是天生带有闭包</p>\n<p>javascript的函数会通过[[Environment]]属性记住创建的位置、访问外部变量</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><img src=\"/2024/07/27/12lexical-env/count-example.png\" alt=\"示例\"></p>\n<p>当使用makeCounter()是，改函数创建一个自己的词法环境，并包含count这个属性<br>之后，调用counter时，会创建一个counter的词法环境，之后添加对外部makeCounter词法环境的引用，并尝试搜索count<br>但是由于counter词法环境不存在count,于是便会向myCounter搜索</p>\n<p>调用counter时，触发 count++ 代码，此时，首先会在counter的此法环境中搜索count，<br>由于counter函数的词法环境不存在其他变量，于是便会向上搜索，更改myCounter的词法变量的属性</p>\n<p>当我们再次调用makCounter()时，makeCounter会再次创建一个词法环境，这个词法环境包含其内部的新的count</p>\n<p>词法环境结构如下：<br><img src=\"/2024/07/27/12lexical-env/bibao-example.jpg\" alt=\"闭包示例\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>词法环境：<br>每个运行的函数、代码块、以及整个脚本，都有一个词法环境，<br>这个词法环境是一个内部隐藏的关联对象</p>\n<p>词法环境包括两个部分：</p>\n<ol>\n<li>存储自己作用域内所有的变量</li>\n<li>对外部词法环境的引用</li>\n</ol>\n<p>思考逻辑：<br>声明一个变量是在这个变量所处地方的<em><strong>词法环境</strong></em>对象（特殊内部对象的属性）添加一个属性<br>修改一个变量也是修改词法环境内部的一个属性</p>\n<p>不过，词法环境只是存在于规范层面，用来具体的描述对象是怎么工作的<br>事实上并不存在与之对应的对象</p>\n<h3 id=\"词法环境间的引用\"><a href=\"#词法环境间的引用\" class=\"headerlink\" title=\"词法环境间的引用\"></a>词法环境间的引用</h3><p>在一个函数运行时，会自动创建一个新的词法环境来储存他内部的局部变量和参数</p>\n<p><img src=\"/2024/07/27/12lexical-env/functioncreate.png\" alt=\"执行过程\"></p>\n<p>此时，我我们有两个词法环境<br>一个是函数内部的，一个是全局、函数外部的</p>\n<p>当代码要访问一个变量的时候，首先会搜索内部词法环境，然后搜索外部，<br>直到全局词法环境或者找到自己要的</p>\n<p>注意：每次某个函数被调用时，都会创建一个新的词法环境对象，词法环境中对外部对象的引用是一样的<br>所有的函数在“诞生”时都会记住创建它们的词法环境。所有函数都有名为 [[Environment]] 的隐藏属性，该属性保存了对创建该函数的词法环境的引用。</p>\n<h3 id=\"使用例子：闭包\"><a href=\"#使用例子：闭包\" class=\"headerlink\" title=\"使用例子：闭包\"></a>使用例子：闭包</h3><p>闭包指的是一个函数可以记住外部变量并且可以访问这些变量，除了new Function(string)之外的所有函数都是天生带有闭包</p>\n<p>javascript的函数会通过[[Environment]]属性记住创建的位置、访问外部变量</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p><img src=\"/2024/07/27/12lexical-env/count-example.png\" alt=\"示例\"></p>\n<p>当使用makeCounter()是，改函数创建一个自己的词法环境，并包含count这个属性<br>之后，调用counter时，会创建一个counter的词法环境，之后添加对外部makeCounter词法环境的引用，并尝试搜索count<br>但是由于counter词法环境不存在count,于是便会向myCounter搜索</p>\n<p>调用counter时，触发 count++ 代码，此时，首先会在counter的此法环境中搜索count，<br>由于counter函数的词法环境不存在其他变量，于是便会向上搜索，更改myCounter的词法变量的属性</p>\n<p>当我们再次调用makCounter()时，makeCounter会再次创建一个词法环境，这个词法环境包含其内部的新的count</p>\n<p>词法环境结构如下：<br><img src=\"/2024/07/27/12lexical-env/bibao-example.jpg\" alt=\"闭包示例\"></p>\n"},{"title":"参与开源四个月，我干了什么？","date":"2024-07-27T10:48:43.325Z","updated":"2024-08-01T04:38:59.652Z","description":"本篇博客记录了我在开源项目GLCC中的工作，从五月一号开始，到目前，八月一号","top_img":null,"_content":"\n上接我的OSPP那篇文章，\nOSPP落选之后，我又报名了GLCC，由于已经做过一部分项目，\n所以也算是顺利入选了。\n\n项目地址：[Casibase](https://casibase.org/)\n演示网站：[Casibase演示网站](https://ai.casibase.com/chat)\n\n\n","source":"_posts/12what-I-Do-GLCC.md","raw":"---\ntitle: 参与开源四个月，我干了什么？\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription: 本篇博客记录了我在开源项目GLCC中的工作，从五月一号开始，到目前，八月一号\ntop_img:\ntags:\n  - 本手\n---\n\n上接我的OSPP那篇文章，\nOSPP落选之后，我又报名了GLCC，由于已经做过一部分项目，\n所以也算是顺利入选了。\n\n项目地址：[Casibase](https://casibase.org/)\n演示网站：[Casibase演示网站](https://ai.casibase.com/chat)\n\n\n","slug":"12what-I-Do-GLCC","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gds0008zw6k20gb0je1","content":"<p>上接我的OSPP那篇文章，<br>OSPP落选之后，我又报名了GLCC，由于已经做过一部分项目，<br>所以也算是顺利入选了。</p>\n<p>项目地址：<a href=\"https://casibase.org/\">Casibase</a><br>演示网站：<a href=\"https://ai.casibase.com/chat\">Casibase演示网站</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>上接我的OSPP那篇文章，<br>OSPP落选之后，我又报名了GLCC，由于已经做过一部分项目，<br>所以也算是顺利入选了。</p>\n<p>项目地址：<a href=\"https://casibase.org/\">Casibase</a><br>演示网站：<a href=\"https://ai.casibase.com/chat\">Casibase演示网站</a></p>\n"},{"title":"TypeScript Part1","date":"2024-08-04T00:32:53.801Z","updated":"2024-08-04T08:28:58.447Z","description":"本篇博客记录了TypeScript的一些基础知识，包括类型、接口、类、泛型等， 旨在帮助新手更好的学习TypeScript","top_img":null,"_content":"\n# TypeScript\n\n### 常见类型\n\n1. 布尔\n2. 数字 number\n3. 字符串 string\n4. 数组\n5. 元组 let x :[string,number] = [’hello’,10]\n6. 枚举 enum\n7. Any 不检查，直接通过编译\n8. void 没有任何类型，只能赋值为undefined 和 null\n9. null undefined\n10. Never 永远不存在类型， 必会抛出异常或者根本不会有返回值\n11. Object非原始类型\n12. 类型断言 尖括号、as\n\n## 接口\n\n### 正常值\n\n```jsx\ninterface LabelledValue {\n  label: string;\n  option?:string;\n  readonly name:string;\n}\n\nfunction read(conf:LabelledValue){\n}\n\nread({label:\"123.\",name:\"liming\",color:\"red\"})\n```\n\n1. 添加 ？ 为可选，可不传递\n2. 指挥检查是否存在，不会检查顺序\n3. readonly 只读，不可改变\n4. 如果一个对象字面量存在任何“目标类型”不包含的属性时，会报错,如上面的color\n\n### 函数\n\n```jsx\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n  // name:string;\n}\nlet mySearch: SearchFunc;\nmySearch = function(src: string, sub: string): boolean {\n  let result = src.search(sub);\n  return result > -1;\n}\n```\n\n1. 函数的入参不需要和接口定义的名字一样\n2. 如果不在入参处设置类型断言，会逐个进行匹配\n\n### 可索引类型\n\n```jsx\ninterface StringArray {\n  [index: number]: string;\n  readonly [name:string]: number;\n}\n```\n\n1. 当遇到number类型的时候，需要返回string类型数据\n2. 两种索引签名，number、string\n3. 你可以将索引签名设置为只读，这样就防止了给索引赋值：\n\n### 类类型\n\n```jsx\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n1. 不检查私有成员，只检查公有\n\n### 接口继承\n\n```jsx\ninterface Shape {\n    color: string;\n}\n\ninterface PenStroke {\n    penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\nsquare.penWidth = 5.0;\n```\n\n### 混合类型\n\n```jsx\n太过于邪恶，避之\n```\n\n### 接口继承类\n\n1. 继承类的成员，但是不继承实现\n    1. 比如类中有一个state：”fulfilled“，会继承state，但不会继承fulfilled\n2. 继承 ”继承类的接口“ 的类必须再次实现类的属性\n\n## 类\n\n### 修饰符\n\n- public\n- private\n- protected 可以在派生类中访问（即子类）\n- readonly 只读\n\n### 存取器\n\n```jsx\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n\t\t   console.log(newName);\n    }\n}\n```\n\n1. 存取器要求设置为ES5或者更高，不支持降级到ECMA3\n2. 只带有get的存取器默认推断为readonly\n\n### 抽象类\n\n```jsx\n大致和java相同\n```\n\n### ★★高级技巧★★\n\n声明类时\n\n```jsx\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n创建了一个构造函数，会在new创建实例的时候调用。\n\n上面的代码被编译之后：\n\n```jsx\nlet Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return \"Hello, \" + this.greeting;\n    };\n    return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n回顾：**使用new函数会发生什么？**\n\n1. 创建一个空对象，成为newInstance（新的实例）\n2. 如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype\n3. 使用给定参数执行构造函数，并把newInstance绑定为this上下文\n4. 如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance\n\n## 函数\n\n类型推断：\n\n```jsx\n// The parameters `x` and `y` have the type number\nlet myAdd: (baseValue: number, increment: number) => number =\n    function(x, y) { return x + y; };\n```\n\nx 和 y会被自动推断为 number类型\n\n### 可选参数和默认参数\n\n1. 使用 ？修饰 比如 name?:string\n2. 可选参数必须放到默认参数之后\n3. 剩余参数  \n    \n    ```jsx\n    function buildName(firstName: string, ...restOfName: string[]) {\n      return firstName + \" \" + restOfName.join(\" \");\n    }\n    ```\n    \n\n### 重载\n\n```jsx\nfunction pickCard(x: {suit: string; card: number; }[]): number;\nfunction pickCard(x: number): {suit: string; card: number; };\nfunction pickCard(x:any): any {\n    // Check to see if we're working with an object/array\n    // if so, they gave us the deck and we'll pick the card\n    if (typeof x == \"object\") {\n        let pickedCard = Math.floor(Math.random() * x.length);\n        return pickedCard;\n    }\n    // Otherwise just let them pick the card\n    else if (typeof x == \"number\") {\n        let pickedSuit = Math.floor(x / 13);\n        return { suit: suits[pickedSuit], card: x % 13 };\n    }\n}\n```\n\n1. 被重载的函数不能声明方法体\n2. 只有一个方法可以声明方法体，并且重复的入参必须为any\n3.  它按照顺序查找重载列表，尝试使用第一个满足的定义。  因此，在定义重载的时候，一定要把最精确的定义放在最前面。\n\n## 泛型\n\n```jsx\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n```\n\n1. 使用尖括号定义\n2. 意义：arg的类型和identity函数返回的值的类型一样\n\n```jsx\nfunction loggingIdentity<T>(arg: T[]): T[] {\n    console.log(arg.length);  // Array has a .length, so no more error\n    return arg;\n}\n```\n\n1. 泛型参数名只要在数量上和使用方式上能对应就行\n\n### 泛型类\n\n```jsx\nclass Person<T>{\n\tzeroValue: T;\n\tname:T;\n}\n\nlet liu = new Person<string>();\nliu.name=\"asdf\"\nliu.zeroValue=\"adfa\"\n```\n\n1. 类有两部分，静态部分和实例部分，泛型指的是实例部分的类型\n\n### 泛型约束\n\n```jsx\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);  // Now we know it has a .length property, so no more error\n    return arg;\n}\n```\n\n1. 如果我们想获得arg的长度，可以让泛型T继承一个带有length属性的接口\n2. 如果T为number会报错，string则不会\n3. 或者\n\n```jsx\nloggingIdentity<string>('hello')\nloggingIdentity<number>(234) //报错\nloggingIdentity({length: 10})\n```\n\n### 在泛型里使用类类型\n\n```jsx\nfunction create<T>(c: {new(): T; }): T {\n    return new c();\n}\n```\n\n1. 在此处，***new（）代表一个无参的构造函数***\n2. 所以此处的入参c的意义为：一个含有无参的构造函数的对象\n\n```jsx\n//***类型标注***，表示一个没有参数的构造函数。\nfunction create<T>(c: {new(): T; }): T {\n    console.log(c)\n    return new c();\n}\n\nclass Anim {\n    constructor() {}\n    // constructor(name:string) {} 则会报错\n}\n\nconsole.log(create(Anim) instanceof Anim);  //true\n\n//create(Anim)会创造一个animal对象\n```\n\n小思考题\n\n## 枚举\n\n### 数字枚举\n\n```jsx\nenum Animal {\n    Cat = 2,\n    Dog, //3\n    Rabbit=6,\n    Lion //7\n}\n\nconsole.log(Animal.Cat === 2)\n\nenum E {\n    A = getSomeValue(),\n    B, // error! 'A' is not constant-initialized, so 'B' needs an initializer\n}\n```\n\n1. 索引从0开始，下面的比上面的增加1\n2. 如果某一个成员不是constant值，那么下面的成员必须初始化\n\n### 字符串枚举\n\n即使用字符串进行初始化\n\n```jsx\n\nenum Animal {\n    Cat = \"Cat\",\n    Dog = \"Dog1\",\n}\n\nconsole.log(Animal.Cat) // Cat\n```\n\n1. 没有自增长行为，可以序列化\n\n### 异构\n\n即数字、字符串混合，不建议\n\n### 联合枚举与枚举成员的类型\n\n```jsx\nenum ShapeKind {\n    Circle,\n    Square,\n}\n\ninterface Circle {\n    kind: ShapeKind.Circle;\n    radius: number;\n}\n\ninterface Square {\n    kind: ShapeKind.Square;\n    sideLength: number;\n}\n\nlet c: Circle = {\n    kind: ShapeKind.Square,\n    //    ~~~~~~~~~~~~~~~~ Error!\n    radius: 100,\n}\n```\n\n1. 枚举成员成为了类型，意义为：这里Circle接口的kind只能为**ShapeKind.Circle类型**\n2. 枚举类型成为了枚举成员的类型联合\n\n### ★★反向映射★★\n\n```jsx\nenum Enum {\n    A\n}\nlet a = Enum.A;\nlet nameOfA = Enum[a]; // \"A\"\n```\n\n***★★可能会将编译为★★***\n\n```jsx\nvar Enum;\n(function (Enum) {\n    Enum[Enum[\"A\"] = 0] = \"A\";\n})(Enum || (Enum = {}));\nvar a = Enum.A;\nvar nameOfA = Enum[a]; // \"A\"\n```\n\n或许添加两个输出会更加直观\n\n```jsx\nvar Enum;\n(function (Enum) {\n  Enum[Enum[\"A\"] = 0] = \"A\";\n})(Enum || (Enum = {}));\nvar a = Enum.A;\nvar nameOfA = Enum[a]; // \"A\"\nconsole.log(Enum[0]) //A\nconsole.log(Enum[\"A\"]) //0\n```\n\n**枚举类型被编译为一个Enum对象，包含了正向name→value 和反向映射 value → name , 不会为字符串枚举成员生成反向映射**\n\n例子：\n\n```jsx\nenum Enum {\n    A = 1,\n    B,\n    C = 2\n}\n\nconsole.log(Enum.B === Enum.C) // true\nconsole.log(Enum[2]) // C\n```\n\n过程\n\n1. 生成一个Enum对象\n2. 设置A的正向映射为1，同时设置1的反向映射为A\n3. 设置B的正向映射为2，同时设置2的反向映射为B\n4. 设置C的正向映射为2，同时设置2的反向映射为C，覆盖了原来的B\n\n```jsx\n(function (Enum) {\n  Enum[Enum[\"A\"] = 1] = \"A\"\n  Enum[Enum[\"B\"] = 2] = \"B\"\n  Enum[Enum[\"C\"] = 2] = \"C\"\n}(Enum || (Enum = {})))\n```\n\n## 类型推论\n\n### 最佳通用类型\n\n```jsx\nlet x = [0, 1, null];\nx : (number|null)[]\n```\n\n```jsx\nlet zoo = [new Rhino(), new Elephant(), new Snake()];\n(Rhino | Elephant | Snake)[]\n```\n\n### 上下文类型\n\n```jsx\nwindow.onmousedown = function(mouseEvent) {\n    console.log(mouseEvent.button);  //<- Error\n};\n```\n\n根据上文的window.onmousedown推断出mouseEvent的类型为MouseEvent\n\n```jsx\nmouseEvent:any\n```\n\n使用注解抵消上下文类恶行\n\n## 类型兼容性\n\n1. 如果x要兼容y，y至少具有与x相同的属性\n\n```jsx\ninterface Named {\n    name: string;\n}\n\nlet x: Named;\n// y's inferred type is { name: string; location: string; }\nlet y = { name: 'Alice', location: 'Seattle' };\nx = y;\n```\n\n过程：编译器***递归检查***x中的每个属性，看是否在y中能找到属性名一样且类型相同的属性\n\n### 比较两个函数\n\n```jsx\nlet x = (a: number) => 0;\nlet y = (b: number, s: string) => 0;\n\ny = x; // OK\nx = y; // Error\n```\n\n理解\n\n1. y赋值给x可以，因为同时传递b和s之后，b的值可以赋值给a，也满足x的条件\n2. x赋值给y不行，因为只传递a之后，无值可用\n3. 编译时不会赋值尝试，只会根据类型进行判断\n\n```jsx\nlet x = () => ({name: 'Alice'});\nlet y = () => ({name: 'Alice', location: 'Seattle'});\n\nx = y; // OK\ny = x; // Error, because x() lacks a location property\n```\n\n1. 把y赋值给x那么参数依然可以调用name(x中所有的值\n2. 源函数的返回值类型必须是目标函数返回值类型的子类型\n\n### 函数参数双向协变\n\n```jsx\nenum EventType { Mouse, Keyboard }\n\ninterface Event {\n    timestamp: number;\n}\n\ninterface MouseEvent extends Event {\n    // @ts-ignore\n    x: number\n    // @ts-ignore\n    y: number\n}\n\nfunction listenEvent(eventType: EventType, handler: (n: Event) => void) {\n    /* ... */\n}\n\n// 1\nlistenEvent(EventType.Mouse, (e: MouseEvent) => console.log(e.x + ',' + e.y));\n\n// 2\nlistenEvent(EventType.Mouse, (e: Event) => console.log((<MouseEvent>e).x + ',' + (<MouseEvent>e).y));\nlistenEvent(EventType.Mouse, <(e: Event) => void>((e: MouseEvent) => console.log(e.x + ',' + e.y)));\n\n```\n\n1. 1处报错，因为MouseEvent是Event的衍生类，不能“覆盖”Event\n2. 可以传入Event，之后使用 as 或者 <> 显示判断类型\n\n### 可选参数和剩余参数\n\n1. 可选参数  ?.  ，剩余参数 …args\n2. 可选参数可以当作无限个可选参数\n\n```jsx\nfunction invokeLater(args: any[], callback: (...args: any[]) => void) {\n    /* ... Invoke callback with 'args' ... */\n}\n\n// Unsound - invokeLater \"might\" provide any number of arguments\ninvokeLater([1, 2], (x, y) => console.log(x + ', ' + y));\n\n// Confusing (x and y are actually required) and undiscoverable\ninvokeLater([1, 2], (x?, y?) => console.log(x + ', ' + y));\n```\n\n此时，args为x,y….\n\n## 高级类型\n\n### 交叉类型\n\n1. 多个类型合并为一个类型\n2. Person & Serializable & Loggable ,同时有这三种类型的成员\n\n```jsx\nfunction extend<T, U>(first: T, second: U): T & U {\n    let result = <T & U>{};\n    for (let id in first) {\n        (<any>result)[id] = (<any>first)[id];\n    }\n    for (let id in second) {\n        if (!result.hasOwnProperty(id)) {\n            (<any>result)[id] = (<any>second)[id];\n        }\n    }\n    return result;\n}\n```\n\n### 联合类型\n\n1. 表示可以是几个类型之一\n2. number | boolean | string 表示可以是这三个类型之一\n3. 如果一个值是联合类型，只能访问共有的成员\n\n```jsx\ninterface Bird {\n\tmove()\n\tdance()\n\t}\n\t\n\tinterface Fish {\n\t\tmove()\n\t\teat()\n\t}\n\t\nlet ani: Bird | Fish\nani.move()\nani.dance() //wrong\n```\n\n### 类型保护和区分类型\n\n使用联合类型时用来区分不同类型\n\n1. **类型断言**\n\n```jsx\nlet pet = getSmallPet();\n\nif ((<Fish>pet).swim) {\n    (<Fish>pet).swim();\n}\nelse {\n    (<Bird>pet).fly();\n}\n```\n\n1. **类型保护**\n\n```jsx\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (<Fish>pet).swim !== undefined;\n}\n\nif(isFish(pet)){\n\tpet.swim();\n}\n```\n\n1. pet is Fish ：类型谓词\n2. 这样可以判断在if分支中一定是Fish类型\n\n1. **typeof、instanceof**\n\n### 可选参数和可选属性\n\n1. 使用了—strictNullChecks 可选参数会自动加上 | undefined\n\n```jsx\nfunction f(x: number, y?: number) {\n    return x + (y || 0);\n}\nf(1, 2);\nf(1);\nf(1, undefined);\nf(1, null); // error, 'null' is not assignable to 'number | undefined'\n```\n\n### 类型别名\n\n给类型起一个新的名字\n\n```jsx\ntype Name = string;\n```\n\n1. 不会新建一个类型\n2. 创建了一个新的名字来引用那个类型\n3. 接口类型可以是泛型\n\n```jsx\ntype Container<T> = { value: T };\n```\n\n1. 在属性里引用自己\n\n```jsx\ntype Tree<T> = {\n    value: T;\n    left: Tree<T>;\n    right: Tree<T>;\n}\n```\n\n### ☆☆接口和类型别名☆☆\n\ninterface和type\n\n1. 接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用\n2. 类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的\n3. 多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错\n4. type可以表示联合类型和交叉类型，interface则会报错\n    \n    ```jsx\n    type Animal = \"fish\" | \"cow\"\n    interface Animal = \"fish\" | \"cow\" //报错\n    ```\n    \n5. type 可以表示元组、枚举、基本类型（如 string、number、boolean）、字面量类型等，而 interface 不能。\n\n### 可辨识类型\n\n```jsx\ninterface Square {\n    kind: \"square\";\n    size: number;\n}\ninterface Rectangle {\n    kind: \"rectangle\";\n    width: number;\n    height: number;\n}\ninterface Circle {\n    kind: \"circle\";\n    radius: number;\n}\ninterface Triangle {\n\t\tkind: \"triangle\";\n\t\twidth: number\n}\ntype Shape = Square | Rectangle | Circle | Triangle;\nfunction area(s: Shape) {\n    switch (s.kind) {\n        case \"square\": return s.size * s.size;\n        case \"rectangle\": return s.height * s.width;\n        case \"circle\": return Math.PI * s.radius ** 2;\n        default : return assertNever(s) //检查是否是Never\n    }\n}\n```\n\n### 索引类型\n\n让编译器可以检查使用了动态属性名的代码\n\n```jsx\ninterface Person {\n    name?: string\n}\n\nlet personProps: keyof Person = \"age\"\n```\n\npersonProps是Person中的一个属性,\n\ntype、interface、class都可以使用\n\n### 映射类型\n\n```jsx\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n} ///把T中所有的类型变为只读的\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n} ///把T中所有的类型变为可选的\n```\n\n1. keyof T表示T中所有属性名的联合类型\n2. P in keyof T 类型映射，遍历T的所有属性名，为每个属性名P创建一个新的类型\n3. T[P] 表示属性P在T中的类型\n4. readonly 表示这个属性是只读的\n\n## Symbol\n\n一些内置的Symbol：\n\n1. Symbol.hasIntance 会被instanceof运算符调用，构造器对象用来识别一个对象是否是实例\n\n```jsx\nclass MyObject {\n    static [Symbol.hasInstance](instance) {\n        return Array.isArray(instance);\n    }\n}\n\nconsole.log([] instanceof MyObject); // 输出：true\nconsole.log({} instanceof MyObject); // 输出：false\n```\n\n1. Symbol.iterator\n    \n    ```jsx\n    class MyObject {\n        static [Symbol.hasInstance](instance) {\n            return Array.isArray(instance);\n        }\n    }\n    \n    console.log([] instanceof MyObject); // 输出：true\n    console.log({} instanceof MyObject); // 输出：false\n    ```\n    \n2. Symbol.toPrimitive\n    \n    ```jsx\n    被ToPrimitive抽象调用，对象转化为相应的原始值\n    ```\n    \n\n## 声明合并\n\n编译器将针对同一个名字的两个独立生命合并为单一声明\n\nts声明会创建：命名空间、类型、值。\n\n### 接口\n\n1. 非函数成员应该是唯一的\n2. 同名函数会被当成重载，在后面声明的接口优先级更高（出现在靠前的位置）\n3. 出现特殊的函数签名的时候，即，有一个参数是单一的字符串字面量，会被提升到最顶端\n\n### 命名空间\n\n```jsx\nnamespace Animals {\n    export class Zebra { }\n}\n\nnamespace Animals {\n    export interface Legged { numberOfLegs: number; }\n    export class Dog { }\n}\n\n///等价于\nnamespace Animals {\n    export interface Legged { numberOfLegs: number; }\n\n    export class Zebra { }\n    export class Dog { }\n}\n```\n\n### 模块扩展\n\n```jsx\n// observable.js\nexport class Observable<T> {\n    // ... implementation left as an exercise for the reader ...\n}\n\n// map.js\nimport { Observable } from \"./observable\";\nObservable.prototype.map = function (f) {\n    // ... another exercise for the reader\n}\n```\n\n编译器不会进行提示，通知编译器：\n\n```jsx\n// observable.ts stays the same\n// map.ts\nimport { Observable } from \"./observable\";\ndeclare module \"./observable\" {\n    interface Observable<T> {\n        map<U>(f: (x: T) => U): Observable<U>;\n    }\n}\nObservable.prototype.map = function (f) {\n    // ... another exercise for the reader\n}\n\n// consumer.ts\nimport { Observable } from \"./observable\";\nimport \"./map\";\nlet o: Observable<number>;\no.map(x => x.toFixed());\n```\n","source":"_posts/13.1TypeScript.md","raw":"---\ntitle: TypeScript Part1\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription: 本篇博客记录了TypeScript的一些基础知识，包括类型、接口、类、泛型等， 旨在帮助新手更好的学习TypeScript\ntop_img:\ntags:\n- 本手\n---\n\n# TypeScript\n\n### 常见类型\n\n1. 布尔\n2. 数字 number\n3. 字符串 string\n4. 数组\n5. 元组 let x :[string,number] = [’hello’,10]\n6. 枚举 enum\n7. Any 不检查，直接通过编译\n8. void 没有任何类型，只能赋值为undefined 和 null\n9. null undefined\n10. Never 永远不存在类型， 必会抛出异常或者根本不会有返回值\n11. Object非原始类型\n12. 类型断言 尖括号、as\n\n## 接口\n\n### 正常值\n\n```jsx\ninterface LabelledValue {\n  label: string;\n  option?:string;\n  readonly name:string;\n}\n\nfunction read(conf:LabelledValue){\n}\n\nread({label:\"123.\",name:\"liming\",color:\"red\"})\n```\n\n1. 添加 ？ 为可选，可不传递\n2. 指挥检查是否存在，不会检查顺序\n3. readonly 只读，不可改变\n4. 如果一个对象字面量存在任何“目标类型”不包含的属性时，会报错,如上面的color\n\n### 函数\n\n```jsx\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n  // name:string;\n}\nlet mySearch: SearchFunc;\nmySearch = function(src: string, sub: string): boolean {\n  let result = src.search(sub);\n  return result > -1;\n}\n```\n\n1. 函数的入参不需要和接口定义的名字一样\n2. 如果不在入参处设置类型断言，会逐个进行匹配\n\n### 可索引类型\n\n```jsx\ninterface StringArray {\n  [index: number]: string;\n  readonly [name:string]: number;\n}\n```\n\n1. 当遇到number类型的时候，需要返回string类型数据\n2. 两种索引签名，number、string\n3. 你可以将索引签名设置为只读，这样就防止了给索引赋值：\n\n### 类类型\n\n```jsx\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n1. 不检查私有成员，只检查公有\n\n### 接口继承\n\n```jsx\ninterface Shape {\n    color: string;\n}\n\ninterface PenStroke {\n    penWidth: number;\n}\n\ninterface Square extends Shape, PenStroke {\n    sideLength: number;\n}\n\nlet square = <Square>{};\nsquare.color = \"blue\";\nsquare.sideLength = 10;\nsquare.penWidth = 5.0;\n```\n\n### 混合类型\n\n```jsx\n太过于邪恶，避之\n```\n\n### 接口继承类\n\n1. 继承类的成员，但是不继承实现\n    1. 比如类中有一个state：”fulfilled“，会继承state，但不会继承fulfilled\n2. 继承 ”继承类的接口“ 的类必须再次实现类的属性\n\n## 类\n\n### 修饰符\n\n- public\n- private\n- protected 可以在派生类中访问（即子类）\n- readonly 只读\n\n### 存取器\n\n```jsx\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n\t\t   console.log(newName);\n    }\n}\n```\n\n1. 存取器要求设置为ES5或者更高，不支持降级到ECMA3\n2. 只带有get的存取器默认推断为readonly\n\n### 抽象类\n\n```jsx\n大致和java相同\n```\n\n### ★★高级技巧★★\n\n声明类时\n\n```jsx\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n创建了一个构造函数，会在new创建实例的时候调用。\n\n上面的代码被编译之后：\n\n```jsx\nlet Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return \"Hello, \" + this.greeting;\n    };\n    return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n回顾：**使用new函数会发生什么？**\n\n1. 创建一个空对象，成为newInstance（新的实例）\n2. 如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype\n3. 使用给定参数执行构造函数，并把newInstance绑定为this上下文\n4. 如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance\n\n## 函数\n\n类型推断：\n\n```jsx\n// The parameters `x` and `y` have the type number\nlet myAdd: (baseValue: number, increment: number) => number =\n    function(x, y) { return x + y; };\n```\n\nx 和 y会被自动推断为 number类型\n\n### 可选参数和默认参数\n\n1. 使用 ？修饰 比如 name?:string\n2. 可选参数必须放到默认参数之后\n3. 剩余参数  \n    \n    ```jsx\n    function buildName(firstName: string, ...restOfName: string[]) {\n      return firstName + \" \" + restOfName.join(\" \");\n    }\n    ```\n    \n\n### 重载\n\n```jsx\nfunction pickCard(x: {suit: string; card: number; }[]): number;\nfunction pickCard(x: number): {suit: string; card: number; };\nfunction pickCard(x:any): any {\n    // Check to see if we're working with an object/array\n    // if so, they gave us the deck and we'll pick the card\n    if (typeof x == \"object\") {\n        let pickedCard = Math.floor(Math.random() * x.length);\n        return pickedCard;\n    }\n    // Otherwise just let them pick the card\n    else if (typeof x == \"number\") {\n        let pickedSuit = Math.floor(x / 13);\n        return { suit: suits[pickedSuit], card: x % 13 };\n    }\n}\n```\n\n1. 被重载的函数不能声明方法体\n2. 只有一个方法可以声明方法体，并且重复的入参必须为any\n3.  它按照顺序查找重载列表，尝试使用第一个满足的定义。  因此，在定义重载的时候，一定要把最精确的定义放在最前面。\n\n## 泛型\n\n```jsx\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n```\n\n1. 使用尖括号定义\n2. 意义：arg的类型和identity函数返回的值的类型一样\n\n```jsx\nfunction loggingIdentity<T>(arg: T[]): T[] {\n    console.log(arg.length);  // Array has a .length, so no more error\n    return arg;\n}\n```\n\n1. 泛型参数名只要在数量上和使用方式上能对应就行\n\n### 泛型类\n\n```jsx\nclass Person<T>{\n\tzeroValue: T;\n\tname:T;\n}\n\nlet liu = new Person<string>();\nliu.name=\"asdf\"\nliu.zeroValue=\"adfa\"\n```\n\n1. 类有两部分，静态部分和实例部分，泛型指的是实例部分的类型\n\n### 泛型约束\n\n```jsx\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);  // Now we know it has a .length property, so no more error\n    return arg;\n}\n```\n\n1. 如果我们想获得arg的长度，可以让泛型T继承一个带有length属性的接口\n2. 如果T为number会报错，string则不会\n3. 或者\n\n```jsx\nloggingIdentity<string>('hello')\nloggingIdentity<number>(234) //报错\nloggingIdentity({length: 10})\n```\n\n### 在泛型里使用类类型\n\n```jsx\nfunction create<T>(c: {new(): T; }): T {\n    return new c();\n}\n```\n\n1. 在此处，***new（）代表一个无参的构造函数***\n2. 所以此处的入参c的意义为：一个含有无参的构造函数的对象\n\n```jsx\n//***类型标注***，表示一个没有参数的构造函数。\nfunction create<T>(c: {new(): T; }): T {\n    console.log(c)\n    return new c();\n}\n\nclass Anim {\n    constructor() {}\n    // constructor(name:string) {} 则会报错\n}\n\nconsole.log(create(Anim) instanceof Anim);  //true\n\n//create(Anim)会创造一个animal对象\n```\n\n小思考题\n\n## 枚举\n\n### 数字枚举\n\n```jsx\nenum Animal {\n    Cat = 2,\n    Dog, //3\n    Rabbit=6,\n    Lion //7\n}\n\nconsole.log(Animal.Cat === 2)\n\nenum E {\n    A = getSomeValue(),\n    B, // error! 'A' is not constant-initialized, so 'B' needs an initializer\n}\n```\n\n1. 索引从0开始，下面的比上面的增加1\n2. 如果某一个成员不是constant值，那么下面的成员必须初始化\n\n### 字符串枚举\n\n即使用字符串进行初始化\n\n```jsx\n\nenum Animal {\n    Cat = \"Cat\",\n    Dog = \"Dog1\",\n}\n\nconsole.log(Animal.Cat) // Cat\n```\n\n1. 没有自增长行为，可以序列化\n\n### 异构\n\n即数字、字符串混合，不建议\n\n### 联合枚举与枚举成员的类型\n\n```jsx\nenum ShapeKind {\n    Circle,\n    Square,\n}\n\ninterface Circle {\n    kind: ShapeKind.Circle;\n    radius: number;\n}\n\ninterface Square {\n    kind: ShapeKind.Square;\n    sideLength: number;\n}\n\nlet c: Circle = {\n    kind: ShapeKind.Square,\n    //    ~~~~~~~~~~~~~~~~ Error!\n    radius: 100,\n}\n```\n\n1. 枚举成员成为了类型，意义为：这里Circle接口的kind只能为**ShapeKind.Circle类型**\n2. 枚举类型成为了枚举成员的类型联合\n\n### ★★反向映射★★\n\n```jsx\nenum Enum {\n    A\n}\nlet a = Enum.A;\nlet nameOfA = Enum[a]; // \"A\"\n```\n\n***★★可能会将编译为★★***\n\n```jsx\nvar Enum;\n(function (Enum) {\n    Enum[Enum[\"A\"] = 0] = \"A\";\n})(Enum || (Enum = {}));\nvar a = Enum.A;\nvar nameOfA = Enum[a]; // \"A\"\n```\n\n或许添加两个输出会更加直观\n\n```jsx\nvar Enum;\n(function (Enum) {\n  Enum[Enum[\"A\"] = 0] = \"A\";\n})(Enum || (Enum = {}));\nvar a = Enum.A;\nvar nameOfA = Enum[a]; // \"A\"\nconsole.log(Enum[0]) //A\nconsole.log(Enum[\"A\"]) //0\n```\n\n**枚举类型被编译为一个Enum对象，包含了正向name→value 和反向映射 value → name , 不会为字符串枚举成员生成反向映射**\n\n例子：\n\n```jsx\nenum Enum {\n    A = 1,\n    B,\n    C = 2\n}\n\nconsole.log(Enum.B === Enum.C) // true\nconsole.log(Enum[2]) // C\n```\n\n过程\n\n1. 生成一个Enum对象\n2. 设置A的正向映射为1，同时设置1的反向映射为A\n3. 设置B的正向映射为2，同时设置2的反向映射为B\n4. 设置C的正向映射为2，同时设置2的反向映射为C，覆盖了原来的B\n\n```jsx\n(function (Enum) {\n  Enum[Enum[\"A\"] = 1] = \"A\"\n  Enum[Enum[\"B\"] = 2] = \"B\"\n  Enum[Enum[\"C\"] = 2] = \"C\"\n}(Enum || (Enum = {})))\n```\n\n## 类型推论\n\n### 最佳通用类型\n\n```jsx\nlet x = [0, 1, null];\nx : (number|null)[]\n```\n\n```jsx\nlet zoo = [new Rhino(), new Elephant(), new Snake()];\n(Rhino | Elephant | Snake)[]\n```\n\n### 上下文类型\n\n```jsx\nwindow.onmousedown = function(mouseEvent) {\n    console.log(mouseEvent.button);  //<- Error\n};\n```\n\n根据上文的window.onmousedown推断出mouseEvent的类型为MouseEvent\n\n```jsx\nmouseEvent:any\n```\n\n使用注解抵消上下文类恶行\n\n## 类型兼容性\n\n1. 如果x要兼容y，y至少具有与x相同的属性\n\n```jsx\ninterface Named {\n    name: string;\n}\n\nlet x: Named;\n// y's inferred type is { name: string; location: string; }\nlet y = { name: 'Alice', location: 'Seattle' };\nx = y;\n```\n\n过程：编译器***递归检查***x中的每个属性，看是否在y中能找到属性名一样且类型相同的属性\n\n### 比较两个函数\n\n```jsx\nlet x = (a: number) => 0;\nlet y = (b: number, s: string) => 0;\n\ny = x; // OK\nx = y; // Error\n```\n\n理解\n\n1. y赋值给x可以，因为同时传递b和s之后，b的值可以赋值给a，也满足x的条件\n2. x赋值给y不行，因为只传递a之后，无值可用\n3. 编译时不会赋值尝试，只会根据类型进行判断\n\n```jsx\nlet x = () => ({name: 'Alice'});\nlet y = () => ({name: 'Alice', location: 'Seattle'});\n\nx = y; // OK\ny = x; // Error, because x() lacks a location property\n```\n\n1. 把y赋值给x那么参数依然可以调用name(x中所有的值\n2. 源函数的返回值类型必须是目标函数返回值类型的子类型\n\n### 函数参数双向协变\n\n```jsx\nenum EventType { Mouse, Keyboard }\n\ninterface Event {\n    timestamp: number;\n}\n\ninterface MouseEvent extends Event {\n    // @ts-ignore\n    x: number\n    // @ts-ignore\n    y: number\n}\n\nfunction listenEvent(eventType: EventType, handler: (n: Event) => void) {\n    /* ... */\n}\n\n// 1\nlistenEvent(EventType.Mouse, (e: MouseEvent) => console.log(e.x + ',' + e.y));\n\n// 2\nlistenEvent(EventType.Mouse, (e: Event) => console.log((<MouseEvent>e).x + ',' + (<MouseEvent>e).y));\nlistenEvent(EventType.Mouse, <(e: Event) => void>((e: MouseEvent) => console.log(e.x + ',' + e.y)));\n\n```\n\n1. 1处报错，因为MouseEvent是Event的衍生类，不能“覆盖”Event\n2. 可以传入Event，之后使用 as 或者 <> 显示判断类型\n\n### 可选参数和剩余参数\n\n1. 可选参数  ?.  ，剩余参数 …args\n2. 可选参数可以当作无限个可选参数\n\n```jsx\nfunction invokeLater(args: any[], callback: (...args: any[]) => void) {\n    /* ... Invoke callback with 'args' ... */\n}\n\n// Unsound - invokeLater \"might\" provide any number of arguments\ninvokeLater([1, 2], (x, y) => console.log(x + ', ' + y));\n\n// Confusing (x and y are actually required) and undiscoverable\ninvokeLater([1, 2], (x?, y?) => console.log(x + ', ' + y));\n```\n\n此时，args为x,y….\n\n## 高级类型\n\n### 交叉类型\n\n1. 多个类型合并为一个类型\n2. Person & Serializable & Loggable ,同时有这三种类型的成员\n\n```jsx\nfunction extend<T, U>(first: T, second: U): T & U {\n    let result = <T & U>{};\n    for (let id in first) {\n        (<any>result)[id] = (<any>first)[id];\n    }\n    for (let id in second) {\n        if (!result.hasOwnProperty(id)) {\n            (<any>result)[id] = (<any>second)[id];\n        }\n    }\n    return result;\n}\n```\n\n### 联合类型\n\n1. 表示可以是几个类型之一\n2. number | boolean | string 表示可以是这三个类型之一\n3. 如果一个值是联合类型，只能访问共有的成员\n\n```jsx\ninterface Bird {\n\tmove()\n\tdance()\n\t}\n\t\n\tinterface Fish {\n\t\tmove()\n\t\teat()\n\t}\n\t\nlet ani: Bird | Fish\nani.move()\nani.dance() //wrong\n```\n\n### 类型保护和区分类型\n\n使用联合类型时用来区分不同类型\n\n1. **类型断言**\n\n```jsx\nlet pet = getSmallPet();\n\nif ((<Fish>pet).swim) {\n    (<Fish>pet).swim();\n}\nelse {\n    (<Bird>pet).fly();\n}\n```\n\n1. **类型保护**\n\n```jsx\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (<Fish>pet).swim !== undefined;\n}\n\nif(isFish(pet)){\n\tpet.swim();\n}\n```\n\n1. pet is Fish ：类型谓词\n2. 这样可以判断在if分支中一定是Fish类型\n\n1. **typeof、instanceof**\n\n### 可选参数和可选属性\n\n1. 使用了—strictNullChecks 可选参数会自动加上 | undefined\n\n```jsx\nfunction f(x: number, y?: number) {\n    return x + (y || 0);\n}\nf(1, 2);\nf(1);\nf(1, undefined);\nf(1, null); // error, 'null' is not assignable to 'number | undefined'\n```\n\n### 类型别名\n\n给类型起一个新的名字\n\n```jsx\ntype Name = string;\n```\n\n1. 不会新建一个类型\n2. 创建了一个新的名字来引用那个类型\n3. 接口类型可以是泛型\n\n```jsx\ntype Container<T> = { value: T };\n```\n\n1. 在属性里引用自己\n\n```jsx\ntype Tree<T> = {\n    value: T;\n    left: Tree<T>;\n    right: Tree<T>;\n}\n```\n\n### ☆☆接口和类型别名☆☆\n\ninterface和type\n\n1. 接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用\n2. 类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的\n3. 多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错\n4. type可以表示联合类型和交叉类型，interface则会报错\n    \n    ```jsx\n    type Animal = \"fish\" | \"cow\"\n    interface Animal = \"fish\" | \"cow\" //报错\n    ```\n    \n5. type 可以表示元组、枚举、基本类型（如 string、number、boolean）、字面量类型等，而 interface 不能。\n\n### 可辨识类型\n\n```jsx\ninterface Square {\n    kind: \"square\";\n    size: number;\n}\ninterface Rectangle {\n    kind: \"rectangle\";\n    width: number;\n    height: number;\n}\ninterface Circle {\n    kind: \"circle\";\n    radius: number;\n}\ninterface Triangle {\n\t\tkind: \"triangle\";\n\t\twidth: number\n}\ntype Shape = Square | Rectangle | Circle | Triangle;\nfunction area(s: Shape) {\n    switch (s.kind) {\n        case \"square\": return s.size * s.size;\n        case \"rectangle\": return s.height * s.width;\n        case \"circle\": return Math.PI * s.radius ** 2;\n        default : return assertNever(s) //检查是否是Never\n    }\n}\n```\n\n### 索引类型\n\n让编译器可以检查使用了动态属性名的代码\n\n```jsx\ninterface Person {\n    name?: string\n}\n\nlet personProps: keyof Person = \"age\"\n```\n\npersonProps是Person中的一个属性,\n\ntype、interface、class都可以使用\n\n### 映射类型\n\n```jsx\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n} ///把T中所有的类型变为只读的\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n} ///把T中所有的类型变为可选的\n```\n\n1. keyof T表示T中所有属性名的联合类型\n2. P in keyof T 类型映射，遍历T的所有属性名，为每个属性名P创建一个新的类型\n3. T[P] 表示属性P在T中的类型\n4. readonly 表示这个属性是只读的\n\n## Symbol\n\n一些内置的Symbol：\n\n1. Symbol.hasIntance 会被instanceof运算符调用，构造器对象用来识别一个对象是否是实例\n\n```jsx\nclass MyObject {\n    static [Symbol.hasInstance](instance) {\n        return Array.isArray(instance);\n    }\n}\n\nconsole.log([] instanceof MyObject); // 输出：true\nconsole.log({} instanceof MyObject); // 输出：false\n```\n\n1. Symbol.iterator\n    \n    ```jsx\n    class MyObject {\n        static [Symbol.hasInstance](instance) {\n            return Array.isArray(instance);\n        }\n    }\n    \n    console.log([] instanceof MyObject); // 输出：true\n    console.log({} instanceof MyObject); // 输出：false\n    ```\n    \n2. Symbol.toPrimitive\n    \n    ```jsx\n    被ToPrimitive抽象调用，对象转化为相应的原始值\n    ```\n    \n\n## 声明合并\n\n编译器将针对同一个名字的两个独立生命合并为单一声明\n\nts声明会创建：命名空间、类型、值。\n\n### 接口\n\n1. 非函数成员应该是唯一的\n2. 同名函数会被当成重载，在后面声明的接口优先级更高（出现在靠前的位置）\n3. 出现特殊的函数签名的时候，即，有一个参数是单一的字符串字面量，会被提升到最顶端\n\n### 命名空间\n\n```jsx\nnamespace Animals {\n    export class Zebra { }\n}\n\nnamespace Animals {\n    export interface Legged { numberOfLegs: number; }\n    export class Dog { }\n}\n\n///等价于\nnamespace Animals {\n    export interface Legged { numberOfLegs: number; }\n\n    export class Zebra { }\n    export class Dog { }\n}\n```\n\n### 模块扩展\n\n```jsx\n// observable.js\nexport class Observable<T> {\n    // ... implementation left as an exercise for the reader ...\n}\n\n// map.js\nimport { Observable } from \"./observable\";\nObservable.prototype.map = function (f) {\n    // ... another exercise for the reader\n}\n```\n\n编译器不会进行提示，通知编译器：\n\n```jsx\n// observable.ts stays the same\n// map.ts\nimport { Observable } from \"./observable\";\ndeclare module \"./observable\" {\n    interface Observable<T> {\n        map<U>(f: (x: T) => U): Observable<U>;\n    }\n}\nObservable.prototype.map = function (f) {\n    // ... another exercise for the reader\n}\n\n// consumer.ts\nimport { Observable } from \"./observable\";\nimport \"./map\";\nlet o: Observable<number>;\no.map(x => x.toFixed());\n```\n","slug":"13.1TypeScript","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gdt0009zw6k38yy059o","content":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h3 id=\"常见类型\"><a href=\"#常见类型\" class=\"headerlink\" title=\"常见类型\"></a>常见类型</h3><ol>\n<li>布尔</li>\n<li>数字 number</li>\n<li>字符串 string</li>\n<li>数组</li>\n<li>元组 let x :[string,number] &#x3D; [’hello’,10]</li>\n<li>枚举 enum</li>\n<li>Any 不检查，直接通过编译</li>\n<li>void 没有任何类型，只能赋值为undefined 和 null</li>\n<li>null undefined</li>\n<li>Never 永远不存在类型， 必会抛出异常或者根本不会有返回值</li>\n<li>Object非原始类型</li>\n<li>类型断言 尖括号、as</li>\n</ol>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><h3 id=\"正常值\"><a href=\"#正常值\" class=\"headerlink\" title=\"正常值\"></a>正常值</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">LabelledValue</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">label</span>: string;</span><br><span class=\"line\">  option?:string;</span><br><span class=\"line\">  readonly <span class=\"attr\">name</span>:string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">read</span>(<span class=\"params\">conf:LabelledValue</span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">read</span>(&#123;<span class=\"attr\">label</span>:<span class=\"string\">&quot;123.&quot;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&quot;liming&quot;</span>,<span class=\"attr\">color</span>:<span class=\"string\">&quot;red&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>添加 ？ 为可选，可不传递</li>\n<li>指挥检查是否存在，不会检查顺序</li>\n<li>readonly 只读，不可改变</li>\n<li>如果一个对象字面量存在任何“目标类型”不包含的属性时，会报错,如上面的color</li>\n</ol>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: string, <span class=\"attr\">subString</span>: string): boolean;</span><br><span class=\"line\">  <span class=\"comment\">// name:string;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">src: string, sub: string</span>): boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = src.<span class=\"title function_\">search</span>(sub);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>函数的入参不需要和接口定义的名字一样</li>\n<li>如果不在入参处设置类型断言，会逐个进行匹配</li>\n</ol>\n<h3 id=\"可索引类型\"><a href=\"#可索引类型\" class=\"headerlink\" title=\"可索引类型\"></a>可索引类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">StringArray</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: number]: string;</span><br><span class=\"line\">  readonly [<span class=\"attr\">name</span>:string]: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>当遇到number类型的时候，需要返回string类型数据</li>\n<li>两种索引签名，number、string</li>\n<li>你可以将索引签名设置为只读，这样就防止了给索引赋值：</li>\n</ol>\n<h3 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"attr\">d</span>: <span class=\"title class_\">Date</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> implements <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentTime</span> = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">h: number, m: number</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不检查私有成员，只检查公有</li>\n</ol>\n<h3 id=\"接口继承\"><a href=\"#接口继承\" class=\"headerlink\" title=\"接口继承\"></a>接口继承</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">penWidth</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span>, <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;<span class=\"title class_\">Square</span>&gt;&#123;&#125;;</span><br><span class=\"line\">square.<span class=\"property\">color</span> = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.<span class=\"property\">sideLength</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">square.<span class=\"property\">penWidth</span> = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">太过于邪恶，避之</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h3><ol>\n<li>继承类的成员，但是不继承实现<ol>\n<li>比如类中有一个state：”fulfilled“，会继承state，但不会继承fulfilled</li>\n</ol>\n</li>\n<li>继承 ”继承类的接口“ 的类必须再次实现类的属性</li>\n</ol>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><ul>\n<li>public</li>\n<li>private</li>\n<li>protected 可以在派生类中访问（即子类）</li>\n<li>readonly 只读</li>\n</ul>\n<h3 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">_fullName</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">fullName</span>(): string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">fullName</span>(<span class=\"params\">newName: string</span>) &#123;</span><br><span class=\"line\">\t\t   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>存取器要求设置为ES5或者更高，不支持降级到ECMA3</li>\n<li>只带有get的存取器默认推断为readonly</li>\n</ol>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大致和java相同</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"★★高级技巧★★\"><a href=\"#★★高级技巧★★\" class=\"headerlink\" title=\"★★高级技巧★★\"></a>★★高级技巧★★</h3><p>声明类时</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">greeting</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">message: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">greeter</span>: <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个构造函数，会在new创建实例的时候调用。</p>\n<p>上面的代码被编译之后：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Greeter</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Greeter</span>(<span class=\"params\">message</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Greeter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">greet</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>回顾：<strong>使用new函数会发生什么？</strong></p>\n<ol>\n<li>创建一个空对象，成为newInstance（新的实例）</li>\n<li>如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype</li>\n<li>使用给定参数执行构造函数，并把newInstance绑定为this上下文</li>\n<li>如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance</li>\n</ol>\n<h2 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>类型推断：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The parameters `x` and `y` have the type number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myAdd</span>: <span class=\"function\">(<span class=\"params\">baseValue: number, increment: number</span>) =&gt;</span> number =</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>x 和 y会被自动推断为 number类型</p>\n<h3 id=\"可选参数和默认参数\"><a href=\"#可选参数和默认参数\" class=\"headerlink\" title=\"可选参数和默认参数\"></a>可选参数和默认参数</h3><ol>\n<li><p>使用 ？修饰 比如 name?:string</p>\n</li>\n<li><p>可选参数必须放到默认参数之后</p>\n</li>\n<li><p>剩余参数  </p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName: string, ...restOfName: string[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + restOfName.<span class=\"title function_\">join</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pickCard</span>(<span class=\"params\">x: &#123;suit: string; card: number; &#125;[]</span>): number;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pickCard</span>(<span class=\"params\">x: number</span>): &#123;<span class=\"attr\">suit</span>: string; <span class=\"attr\">card</span>: number; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pickCard</span>(<span class=\"params\">x:any</span>): any &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Check to see if we&#x27;re working with an object/array</span></span><br><span class=\"line\">    <span class=\"comment\">// if so, they gave us the deck and we&#x27;ll pick the card</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x == <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pickedCard = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * x.<span class=\"property\">length</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pickedCard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Otherwise just let them pick the card</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x == <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pickedSuit = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(x / <span class=\"number\">13</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">suit</span>: suits[pickedSuit], <span class=\"attr\">card</span>: x % <span class=\"number\">13</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>被重载的函数不能声明方法体</li>\n<li>只有一个方法可以声明方法体，并且重复的入参必须为any</li>\n<li>它按照顺序查找重载列表，尝试使用第一个满足的定义。  因此，在定义重载的时候，一定要把最精确的定义放在最前面。</li>\n</ol>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用尖括号定义</li>\n<li>意义：arg的类型和identity函数返回的值的类型一样</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T&gt;(<span class=\"attr\">arg</span>: T[]): T[] &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);  <span class=\"comment\">// Array has a .length, so no more error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>泛型参数名只要在数量上和使用方式上能对应就行</li>\n</ol>\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt;&#123;</span><br><span class=\"line\">\t<span class=\"attr\">zeroValue</span>: T;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> liu = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>&lt;string&gt;();</span><br><span class=\"line\">liu.<span class=\"property\">name</span>=<span class=\"string\">&quot;asdf&quot;</span></span><br><span class=\"line\">liu.<span class=\"property\">zeroValue</span>=<span class=\"string\">&quot;adfa&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>类有两部分，静态部分和实例部分，泛型指的是实例部分的类型</li>\n</ol>\n<h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Lengthwise</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Lengthwise</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);  <span class=\"comment\">// Now we know it has a .length property, so no more error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>如果我们想获得arg的长度，可以让泛型T继承一个带有length属性的接口</li>\n<li>如果T为number会报错，string则不会</li>\n<li>或者</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loggingIdentity&lt;string&gt;(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">loggingIdentity&lt;number&gt;(<span class=\"number\">234</span>) <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(&#123;<span class=\"attr\">length</span>: <span class=\"number\">10</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在泛型里使用类类型\"><a href=\"#在泛型里使用类类型\" class=\"headerlink\" title=\"在泛型里使用类类型\"></a>在泛型里使用类类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> create&lt;T&gt;(<span class=\"attr\">c</span>: &#123;<span class=\"title function_\">new</span>(): T; &#125;): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">c</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在此处，<em><strong>new（）代表一个无参的构造函数</strong></em></li>\n<li>所以此处的入参c的意义为：一个含有无参的构造函数的对象</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//***类型标注***，表示一个没有参数的构造函数。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> create&lt;T&gt;(<span class=\"attr\">c</span>: &#123;<span class=\"title function_\">new</span>(): T; &#125;): T &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">c</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Anim</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// constructor(name:string) &#123;&#125; 则会报错</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">create</span>(<span class=\"title class_\">Anim</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Anim</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//create(Anim)会创造一个animal对象</span></span><br></pre></td></tr></table></figure>\n\n<p>小思考题</p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><h3 id=\"数字枚举\"><a href=\"#数字枚举\" class=\"headerlink\" title=\"数字枚举\"></a>数字枚举</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Cat</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Dog</span>, <span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"title class_\">Rabbit</span>=<span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Lion</span> <span class=\"comment\">//7</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\">Cat</span> === <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">enum E &#123;</span><br><span class=\"line\">    A = <span class=\"title function_\">getSomeValue</span>(),</span><br><span class=\"line\">    B, <span class=\"comment\">// error! &#x27;A&#x27; is not constant-initialized, so &#x27;B&#x27; needs an initializer</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>索引从0开始，下面的比上面的增加1</li>\n<li>如果某一个成员不是constant值，那么下面的成员必须初始化</li>\n</ol>\n<h3 id=\"字符串枚举\"><a href=\"#字符串枚举\" class=\"headerlink\" title=\"字符串枚举\"></a>字符串枚举</h3><p>即使用字符串进行初始化</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">enum <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Cat</span> = <span class=\"string\">&quot;Cat&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Dog</span> = <span class=\"string\">&quot;Dog1&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\">Cat</span>) <span class=\"comment\">// Cat</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>没有自增长行为，可以序列化</li>\n</ol>\n<h3 id=\"异构\"><a href=\"#异构\" class=\"headerlink\" title=\"异构\"></a>异构</h3><p>即数字、字符串混合，不建议</p>\n<h3 id=\"联合枚举与枚举成员的类型\"><a href=\"#联合枚举与枚举成员的类型\" class=\"headerlink\" title=\"联合枚举与枚举成员的类型\"></a>联合枚举与枚举成员的类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">ShapeKind</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Circle</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Square</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"title class_\">ShapeKind</span>.<span class=\"property\">Circle</span>;</span><br><span class=\"line\">    <span class=\"attr\">radius</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"title class_\">ShapeKind</span>.<span class=\"property\">Square</span>;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Circle</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"title class_\">ShapeKind</span>.<span class=\"property\">Square</span>,</span><br><span class=\"line\">    <span class=\"comment\">//    ~~~~~~~~~~~~~~~~ Error!</span></span><br><span class=\"line\">    <span class=\"attr\">radius</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>枚举成员成为了类型，意义为：这里Circle接口的kind只能为<strong>ShapeKind.Circle类型</strong></li>\n<li>枚举类型成为了枚举成员的类型联合</li>\n</ol>\n<h3 id=\"★★反向映射★★\"><a href=\"#★★反向映射★★\" class=\"headerlink\" title=\"★★反向映射★★\"></a>★★反向映射★★</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Enum</span> &#123;</span><br><span class=\"line\">    A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em><strong>★★可能会将编译为★★</strong></em></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Enum</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>或许添加两个输出会更加直观</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Enum</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>[<span class=\"number\">0</span>]) <span class=\"comment\">//A</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>]) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>枚举类型被编译为一个Enum对象，包含了正向name→value 和反向映射 value → name , 不会为字符串枚举成员生成反向映射</strong></p>\n<p>例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Enum</span> &#123;</span><br><span class=\"line\">    A = <span class=\"number\">1</span>,</span><br><span class=\"line\">    B,</span><br><span class=\"line\">    C = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>.<span class=\"property\">B</span> === <span class=\"title class_\">Enum</span>.<span class=\"property\">C</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>[<span class=\"number\">2</span>]) <span class=\"comment\">// C</span></span><br></pre></td></tr></table></figure>\n\n<p>过程</p>\n<ol>\n<li>生成一个Enum对象</li>\n<li>设置A的正向映射为1，同时设置1的反向映射为A</li>\n<li>设置B的正向映射为2，同时设置2的反向映射为B</li>\n<li>设置C的正向映射为2，同时设置2的反向映射为C，覆盖了原来的B</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;B&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;C&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#125;(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;)))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型推论\"><a href=\"#类型推论\" class=\"headerlink\" title=\"类型推论\"></a>类型推论</h2><h3 id=\"最佳通用类型\"><a href=\"#最佳通用类型\" class=\"headerlink\" title=\"最佳通用类型\"></a>最佳通用类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">null</span>];</span><br><span class=\"line\">x : (number|<span class=\"literal\">null</span>)[]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> zoo = [<span class=\"keyword\">new</span> <span class=\"title class_\">Rhino</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">Elephant</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">Snake</span>()];</span><br><span class=\"line\">(<span class=\"title class_\">Rhino</span> | <span class=\"title class_\">Elephant</span> | <span class=\"title class_\">Snake</span>)[]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上下文类型\"><a href=\"#上下文类型\" class=\"headerlink\" title=\"上下文类型\"></a>上下文类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onmousedown</span> = <span class=\"keyword\">function</span>(<span class=\"params\">mouseEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mouseEvent.<span class=\"property\">button</span>);  <span class=\"comment\">//&lt;- Error</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>根据上文的window.onmousedown推断出mouseEvent的类型为MouseEvent</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mouseEvent</span>:any</span><br></pre></td></tr></table></figure>\n\n<p>使用注解抵消上下文类恶行</p>\n<h2 id=\"类型兼容性\"><a href=\"#类型兼容性\" class=\"headerlink\" title=\"类型兼容性\"></a>类型兼容性</h2><ol>\n<li>如果x要兼容y，y至少具有与x相同的属性</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Named</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"title class_\">Named</span>;</span><br><span class=\"line\"><span class=\"comment\">// y&#x27;s inferred type is &#123; name: string; location: string; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">location</span>: <span class=\"string\">&#x27;Seattle&#x27;</span> &#125;;</span><br><span class=\"line\">x = y;</span><br></pre></td></tr></table></figure>\n\n<p>过程：编译器<em><strong>递归检查</strong></em>x中的每个属性，看是否在y中能找到属性名一样且类型相同的属性</p>\n<h3 id=\"比较两个函数\"><a href=\"#比较两个函数\" class=\"headerlink\" title=\"比较两个函数\"></a>比较两个函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">x</span> = (<span class=\"params\">a: number</span>) =&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">y</span> = (<span class=\"params\">b: number, s: string</span>) =&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">y = x; <span class=\"comment\">// OK</span></span><br><span class=\"line\">x = y; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<p>理解</p>\n<ol>\n<li>y赋值给x可以，因为同时传递b和s之后，b的值可以赋值给a，也满足x的条件</li>\n<li>x赋值给y不行，因为只传递a之后，无值可用</li>\n<li>编译时不会赋值尝试，只会根据类型进行判断</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">x</span> = (<span class=\"params\"></span>) =&gt; (&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">y</span> = (<span class=\"params\"></span>) =&gt; (&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">location</span>: <span class=\"string\">&#x27;Seattle&#x27;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">x = y; <span class=\"comment\">// OK</span></span><br><span class=\"line\">y = x; <span class=\"comment\">// Error, because x() lacks a location property</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>把y赋值给x那么参数依然可以调用name(x中所有的值</li>\n<li>源函数的返回值类型必须是目标函数返回值类型的子类型</li>\n</ol>\n<h3 id=\"函数参数双向协变\"><a href=\"#函数参数双向协变\" class=\"headerlink\" title=\"函数参数双向协变\"></a>函数参数双向协变</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">EventType</span> &#123; <span class=\"title class_\">Mouse</span>, <span class=\"title class_\">Keyboard</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">timestamp</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">MouseEvent</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">    <span class=\"attr\">x</span>: number</span><br><span class=\"line\">    <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">    <span class=\"attr\">y</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">listenEvent</span>(<span class=\"params\">eventType: EventType, handler: (n: Event) =&gt; <span class=\"keyword\">void</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title function_\">listenEvent</span>(<span class=\"title class_\">EventType</span>.<span class=\"property\">Mouse</span>, <span class=\"function\">(<span class=\"params\">e: MouseEvent</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">x</span> + <span class=\"string\">&#x27;,&#x27;</span> + e.<span class=\"property\">y</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"title function_\">listenEvent</span>(<span class=\"title class_\">EventType</span>.<span class=\"property\">Mouse</span>, <span class=\"function\">(<span class=\"params\">e: Event</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((&lt;<span class=\"title class_\">MouseEvent</span>&gt;e).<span class=\"property\">x</span> + <span class=\"string\">&#x27;,&#x27;</span> + (&lt;<span class=\"title class_\">MouseEvent</span>&gt;e).<span class=\"property\">y</span>));</span><br><span class=\"line\"><span class=\"title function_\">listenEvent</span>(<span class=\"title class_\">EventType</span>.<span class=\"property\">Mouse</span>, &lt;<span class=\"function\">(<span class=\"params\">e: Event</span>) =&gt;</span> <span class=\"keyword\">void</span>&gt;(<span class=\"function\">(<span class=\"params\">e: MouseEvent</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">x</span> + <span class=\"string\">&#x27;,&#x27;</span> + e.<span class=\"property\">y</span>)));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>1处报错，因为MouseEvent是Event的衍生类，不能“覆盖”Event</li>\n<li>可以传入Event，之后使用 as 或者 &lt;&gt; 显示判断类型</li>\n</ol>\n<h3 id=\"可选参数和剩余参数\"><a href=\"#可选参数和剩余参数\" class=\"headerlink\" title=\"可选参数和剩余参数\"></a>可选参数和剩余参数</h3><ol>\n<li>可选参数  ?.  ，剩余参数 …args</li>\n<li>可选参数可以当作无限个可选参数</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">invokeLater</span>(<span class=\"params\">args: any[], callback: (...args: any[]) =&gt; <span class=\"keyword\">void</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... Invoke callback with &#x27;args&#x27; ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Unsound - invokeLater &quot;might&quot; provide any number of arguments</span></span><br><span class=\"line\"><span class=\"title function_\">invokeLater</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x + <span class=\"string\">&#x27;, &#x27;</span> + y));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Confusing (x and y are actually required) and undiscoverable</span></span><br><span class=\"line\"><span class=\"title function_\">invokeLater</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"function\">(<span class=\"params\">x?, y?</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x + <span class=\"string\">&#x27;, &#x27;</span> + y));</span><br></pre></td></tr></table></figure>\n\n<p>此时，args为x,y….</p>\n<h2 id=\"高级类型\"><a href=\"#高级类型\" class=\"headerlink\" title=\"高级类型\"></a>高级类型</h2><h3 id=\"交叉类型\"><a href=\"#交叉类型\" class=\"headerlink\" title=\"交叉类型\"></a>交叉类型</h3><ol>\n<li>多个类型合并为一个类型</li>\n<li>Person &amp; Serializable &amp; Loggable ,同时有这三种类型的成员</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> extend&lt;T, U&gt;(<span class=\"attr\">first</span>: T, <span class=\"attr\">second</span>: U): T &amp; U &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class=\"line\">    for (let id in first) &#123;</span><br><span class=\"line\">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let id in second) &#123;</span><br><span class=\"line\">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class=\"line\">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h3><ol>\n<li>表示可以是几个类型之一</li>\n<li>number | boolean | string 表示可以是这三个类型之一</li>\n<li>如果一个值是联合类型，只能访问共有的成员</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Bird</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">move</span>()</span><br><span class=\"line\">\t<span class=\"title function_\">dance</span>()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tinterface <span class=\"title class_\">Fish</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">move</span>()</span><br><span class=\"line\">\t\t<span class=\"title function_\">eat</span>()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ani</span>: <span class=\"title class_\">Bird</span> | <span class=\"title class_\">Fish</span></span><br><span class=\"line\">ani.<span class=\"title function_\">move</span>()</span><br><span class=\"line\">ani.<span class=\"title function_\">dance</span>() <span class=\"comment\">//wrong</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型保护和区分类型\"><a href=\"#类型保护和区分类型\" class=\"headerlink\" title=\"类型保护和区分类型\"></a>类型保护和区分类型</h3><p>使用联合类型时用来区分不同类型</p>\n<ol>\n<li><strong>类型断言</strong></li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pet = <span class=\"title function_\">getSmallPet</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((&lt;<span class=\"title class_\">Fish</span>&gt;pet).<span class=\"property\">swim</span>) &#123;</span><br><span class=\"line\">    (&lt;<span class=\"title class_\">Fish</span>&gt;pet).<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    (&lt;<span class=\"title class_\">Bird</span>&gt;pet).<span class=\"title function_\">fly</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>类型保护</strong></li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isFish</span>(<span class=\"params\">pet: Fish | Bird</span>): pet is <span class=\"title class_\">Fish</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&lt;<span class=\"title class_\">Fish</span>&gt;pet).<span class=\"property\">swim</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_\">isFish</span>(pet))&#123;</span><br><span class=\"line\">\tpet.<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>pet is Fish ：类型谓词</p>\n</li>\n<li><p>这样可以判断在if分支中一定是Fish类型</p>\n</li>\n<li><p><strong>typeof、instanceof</strong></p>\n</li>\n</ol>\n<h3 id=\"可选参数和可选属性\"><a href=\"#可选参数和可选属性\" class=\"headerlink\" title=\"可选参数和可选属性\"></a>可选参数和可选属性</h3><ol>\n<li>使用了—strictNullChecks 可选参数会自动加上 | undefined</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">x: number, y?: number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + (y || <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>, <span class=\"literal\">null</span>); <span class=\"comment\">// error, &#x27;null&#x27; is not assignable to &#x27;number | undefined&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><p>给类型起一个新的名字</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Name</span> = string;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不会新建一个类型</li>\n<li>创建了一个新的名字来引用那个类型</li>\n<li>接口类型可以是泛型</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Container</span>&lt;T&gt; = &#123; <span class=\"attr\">value</span>: T &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在属性里引用自己</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Tree</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: T;</span><br><span class=\"line\">    <span class=\"attr\">left</span>: <span class=\"title class_\">Tree</span>&lt;T&gt;;</span><br><span class=\"line\">    <span class=\"attr\">right</span>: <span class=\"title class_\">Tree</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"☆☆接口和类型别名☆☆\"><a href=\"#☆☆接口和类型别名☆☆\" class=\"headerlink\" title=\"☆☆接口和类型别名☆☆\"></a>☆☆接口和类型别名☆☆</h3><p>interface和type</p>\n<ol>\n<li><p>接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用</p>\n</li>\n<li><p>类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的</p>\n</li>\n<li><p>多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错</p>\n</li>\n<li><p>type可以表示联合类型和交叉类型，interface则会报错</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span></span><br><span class=\"line\">interface <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span> <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>type 可以表示元组、枚举、基本类型（如 string、number、boolean）、字面量类型等，而 interface 不能。</p>\n</li>\n</ol>\n<h3 id=\"可辨识类型\"><a href=\"#可辨识类型\" class=\"headerlink\" title=\"可辨识类型\"></a>可辨识类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">    <span class=\"attr\">size</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;rectangle&quot;</span>;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: number;</span><br><span class=\"line\">    <span class=\"attr\">height</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>;</span><br><span class=\"line\">    <span class=\"attr\">radius</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">kind</span>: <span class=\"string\">&quot;triangle&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"attr\">width</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type <span class=\"title class_\">Shape</span> = <span class=\"title class_\">Square</span> | <span class=\"title class_\">Rectangle</span> | <span class=\"title class_\">Circle</span> | <span class=\"title class_\">Triangle</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">area</span>(<span class=\"params\">s: Shape</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (s.<span class=\"property\">kind</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;square&quot;</span>: <span class=\"keyword\">return</span> s.<span class=\"property\">size</span> * s.<span class=\"property\">size</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;rectangle&quot;</span>: <span class=\"keyword\">return</span> s.<span class=\"property\">height</span> * s.<span class=\"property\">width</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;circle&quot;</span>: <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * s.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span> : <span class=\"keyword\">return</span> <span class=\"title function_\">assertNever</span>(s) <span class=\"comment\">//检查是否是Never</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><p>让编译器可以检查使用了动态属性名的代码</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    name?: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">personProps</span>: keyof <span class=\"title class_\">Person</span> = <span class=\"string\">&quot;age&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>personProps是Person中的一个属性,</p>\n<p>type、interface、class都可以使用</p>\n<h3 id=\"映射类型\"><a href=\"#映射类型\" class=\"headerlink\" title=\"映射类型\"></a>映射类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Readonly</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    readonly [P <span class=\"keyword\">in</span> keyof T]: T[P];</span><br><span class=\"line\">&#125; <span class=\"comment\">///把T中所有的类型变为只读的</span></span><br><span class=\"line\">type <span class=\"title class_\">Partial</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]?: T[P];</span><br><span class=\"line\">&#125; <span class=\"comment\">///把T中所有的类型变为可选的</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>keyof T表示T中所有属性名的联合类型</li>\n<li>P in keyof T 类型映射，遍历T的所有属性名，为每个属性名P创建一个新的类型</li>\n<li>T[P] 表示属性P在T中的类型</li>\n<li>readonly 表示这个属性是只读的</li>\n</ol>\n<h2 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h2><p>一些内置的Symbol：</p>\n<ol>\n<li>Symbol.hasIntance 会被instanceof运算符调用，构造器对象用来识别一个对象是否是实例</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：false</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>Symbol.iterator</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Symbol.toPrimitive</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">被<span class=\"title class_\">ToPrimitive</span>抽象调用，对象转化为相应的原始值</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"声明合并\"><a href=\"#声明合并\" class=\"headerlink\" title=\"声明合并\"></a>声明合并</h2><p>编译器将针对同一个名字的两个独立生命合并为单一声明</p>\n<p>ts声明会创建：命名空间、类型、值。</p>\n<h3 id=\"接口-1\"><a href=\"#接口-1\" class=\"headerlink\" title=\"接口\"></a>接口</h3><ol>\n<li>非函数成员应该是唯一的</li>\n<li>同名函数会被当成重载，在后面声明的接口优先级更高（出现在靠前的位置）</li>\n<li>出现特殊的函数签名的时候，即，有一个参数是单一的字符串字面量，会被提升到最顶端</li>\n</ol>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Animals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Zebra</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace <span class=\"title class_\">Animals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> interface <span class=\"title class_\">Legged</span> &#123; <span class=\"attr\">numberOfLegs</span>: number; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///等价于</span></span><br><span class=\"line\">namespace <span class=\"title class_\">Animals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> interface <span class=\"title class_\">Legged</span> &#123; <span class=\"attr\">numberOfLegs</span>: number; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Zebra</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块扩展\"><a href=\"#模块扩展\" class=\"headerlink\" title=\"模块扩展\"></a>模块扩展</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observable.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... implementation left as an exercise for the reader ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./observable&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span> = <span class=\"keyword\">function</span> (<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... another exercise for the reader</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器不会进行提示，通知编译器：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observable.ts stays the same</span></span><br><span class=\"line\"><span class=\"comment\">// map.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./observable&quot;</span>;</span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&quot;./observable&quot;</span> &#123;</span><br><span class=\"line\">    interface <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        map&lt;U&gt;(<span class=\"attr\">f</span>: <span class=\"function\">(<span class=\"params\">x: T</span>) =&gt;</span> U): <span class=\"title class_\">Observable</span>&lt;U&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span> = <span class=\"keyword\">function</span> (<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... another exercise for the reader</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// consumer.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./observable&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./map&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">o</span>: <span class=\"title class_\">Observable</span>&lt;number&gt;;</span><br><span class=\"line\">o.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"title function_\">toFixed</span>());</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h3 id=\"常见类型\"><a href=\"#常见类型\" class=\"headerlink\" title=\"常见类型\"></a>常见类型</h3><ol>\n<li>布尔</li>\n<li>数字 number</li>\n<li>字符串 string</li>\n<li>数组</li>\n<li>元组 let x :[string,number] &#x3D; [’hello’,10]</li>\n<li>枚举 enum</li>\n<li>Any 不检查，直接通过编译</li>\n<li>void 没有任何类型，只能赋值为undefined 和 null</li>\n<li>null undefined</li>\n<li>Never 永远不存在类型， 必会抛出异常或者根本不会有返回值</li>\n<li>Object非原始类型</li>\n<li>类型断言 尖括号、as</li>\n</ol>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><h3 id=\"正常值\"><a href=\"#正常值\" class=\"headerlink\" title=\"正常值\"></a>正常值</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">LabelledValue</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">label</span>: string;</span><br><span class=\"line\">  option?:string;</span><br><span class=\"line\">  readonly <span class=\"attr\">name</span>:string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">read</span>(<span class=\"params\">conf:LabelledValue</span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">read</span>(&#123;<span class=\"attr\">label</span>:<span class=\"string\">&quot;123.&quot;</span>,<span class=\"attr\">name</span>:<span class=\"string\">&quot;liming&quot;</span>,<span class=\"attr\">color</span>:<span class=\"string\">&quot;red&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>添加 ？ 为可选，可不传递</li>\n<li>指挥检查是否存在，不会检查顺序</li>\n<li>readonly 只读，不可改变</li>\n<li>如果一个对象字面量存在任何“目标类型”不包含的属性时，会报错,如上面的color</li>\n</ol>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: string, <span class=\"attr\">subString</span>: string): boolean;</span><br><span class=\"line\">  <span class=\"comment\">// name:string;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">src: string, sub: string</span>): boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = src.<span class=\"title function_\">search</span>(sub);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>函数的入参不需要和接口定义的名字一样</li>\n<li>如果不在入参处设置类型断言，会逐个进行匹配</li>\n</ol>\n<h3 id=\"可索引类型\"><a href=\"#可索引类型\" class=\"headerlink\" title=\"可索引类型\"></a>可索引类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">StringArray</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: number]: string;</span><br><span class=\"line\">  readonly [<span class=\"attr\">name</span>:string]: number;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>当遇到number类型的时候，需要返回string类型数据</li>\n<li>两种索引签名，number、string</li>\n<li>你可以将索引签名设置为只读，这样就防止了给索引赋值：</li>\n</ol>\n<h3 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"attr\">d</span>: <span class=\"title class_\">Date</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> implements <span class=\"title class_\">ClockInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTime</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setTime</span>(<span class=\"params\">d: <span class=\"built_in\">Date</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">currentTime</span> = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">h: number, m: number</span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不检查私有成员，只检查公有</li>\n</ol>\n<h3 id=\"接口继承\"><a href=\"#接口继承\" class=\"headerlink\" title=\"接口继承\"></a>接口继承</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">penWidth</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span>, <span class=\"title class_\">PenStroke</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> square = &lt;<span class=\"title class_\">Square</span>&gt;&#123;&#125;;</span><br><span class=\"line\">square.<span class=\"property\">color</span> = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">square.<span class=\"property\">sideLength</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">square.<span class=\"property\">penWidth</span> = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">太过于邪恶，避之</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h3><ol>\n<li>继承类的成员，但是不继承实现<ol>\n<li>比如类中有一个state：”fulfilled“，会继承state，但不会继承fulfilled</li>\n</ol>\n</li>\n<li>继承 ”继承类的接口“ 的类必须再次实现类的属性</li>\n</ol>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><ul>\n<li>public</li>\n<li>private</li>\n<li>protected 可以在派生类中访问（即子类）</li>\n<li>readonly 只读</li>\n</ul>\n<h3 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    private <span class=\"attr\">_fullName</span>: string;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">fullName</span>(): string &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_fullName</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">fullName</span>(<span class=\"params\">newName: string</span>) &#123;</span><br><span class=\"line\">\t\t   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>存取器要求设置为ES5或者更高，不支持降级到ECMA3</li>\n<li>只带有get的存取器默认推断为readonly</li>\n</ol>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大致和java相同</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"★★高级技巧★★\"><a href=\"#★★高级技巧★★\" class=\"headerlink\" title=\"★★高级技巧★★\"></a>★★高级技巧★★</h3><p>声明类时</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">greeting</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">message: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">greeter</span>: <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个构造函数，会在new创建实例的时候调用。</p>\n<p>上面的代码被编译之后：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Greeter</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Greeter</span>(<span class=\"params\">message</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Greeter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">greet</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>回顾：<strong>使用new函数会发生什么？</strong></p>\n<ol>\n<li>创建一个空对象，成为newInstance（新的实例）</li>\n<li>如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype</li>\n<li>使用给定参数执行构造函数，并把newInstance绑定为this上下文</li>\n<li>如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance</li>\n</ol>\n<h2 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>类型推断：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The parameters `x` and `y` have the type number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myAdd</span>: <span class=\"function\">(<span class=\"params\">baseValue: number, increment: number</span>) =&gt;</span> number =</span><br><span class=\"line\">    <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>x 和 y会被自动推断为 number类型</p>\n<h3 id=\"可选参数和默认参数\"><a href=\"#可选参数和默认参数\" class=\"headerlink\" title=\"可选参数和默认参数\"></a>可选参数和默认参数</h3><ol>\n<li><p>使用 ？修饰 比如 name?:string</p>\n</li>\n<li><p>可选参数必须放到默认参数之后</p>\n</li>\n<li><p>剩余参数  </p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName: string, ...restOfName: string[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + restOfName.<span class=\"title function_\">join</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pickCard</span>(<span class=\"params\">x: &#123;suit: string; card: number; &#125;[]</span>): number;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pickCard</span>(<span class=\"params\">x: number</span>): &#123;<span class=\"attr\">suit</span>: string; <span class=\"attr\">card</span>: number; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pickCard</span>(<span class=\"params\">x:any</span>): any &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Check to see if we&#x27;re working with an object/array</span></span><br><span class=\"line\">    <span class=\"comment\">// if so, they gave us the deck and we&#x27;ll pick the card</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x == <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pickedCard = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * x.<span class=\"property\">length</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pickedCard;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Otherwise just let them pick the card</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x == <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pickedSuit = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(x / <span class=\"number\">13</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">suit</span>: suits[pickedSuit], <span class=\"attr\">card</span>: x % <span class=\"number\">13</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>被重载的函数不能声明方法体</li>\n<li>只有一个方法可以声明方法体，并且重复的入参必须为any</li>\n<li>它按照顺序查找重载列表，尝试使用第一个满足的定义。  因此，在定义重载的时候，一定要把最精确的定义放在最前面。</li>\n</ol>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>使用尖括号定义</li>\n<li>意义：arg的类型和identity函数返回的值的类型一样</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T&gt;(<span class=\"attr\">arg</span>: T[]): T[] &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);  <span class=\"comment\">// Array has a .length, so no more error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>泛型参数名只要在数量上和使用方式上能对应就行</li>\n</ol>\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt;&#123;</span><br><span class=\"line\">\t<span class=\"attr\">zeroValue</span>: T;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> liu = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>&lt;string&gt;();</span><br><span class=\"line\">liu.<span class=\"property\">name</span>=<span class=\"string\">&quot;asdf&quot;</span></span><br><span class=\"line\">liu.<span class=\"property\">zeroValue</span>=<span class=\"string\">&quot;adfa&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>类有两部分，静态部分和实例部分，泛型指的是实例部分的类型</li>\n</ol>\n<h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Lengthwise</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Lengthwise</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);  <span class=\"comment\">// Now we know it has a .length property, so no more error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>如果我们想获得arg的长度，可以让泛型T继承一个带有length属性的接口</li>\n<li>如果T为number会报错，string则不会</li>\n<li>或者</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loggingIdentity&lt;string&gt;(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">loggingIdentity&lt;number&gt;(<span class=\"number\">234</span>) <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(&#123;<span class=\"attr\">length</span>: <span class=\"number\">10</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在泛型里使用类类型\"><a href=\"#在泛型里使用类类型\" class=\"headerlink\" title=\"在泛型里使用类类型\"></a>在泛型里使用类类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> create&lt;T&gt;(<span class=\"attr\">c</span>: &#123;<span class=\"title function_\">new</span>(): T; &#125;): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">c</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在此处，<em><strong>new（）代表一个无参的构造函数</strong></em></li>\n<li>所以此处的入参c的意义为：一个含有无参的构造函数的对象</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//***类型标注***，表示一个没有参数的构造函数。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> create&lt;T&gt;(<span class=\"attr\">c</span>: &#123;<span class=\"title function_\">new</span>(): T; &#125;): T &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">c</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Anim</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// constructor(name:string) &#123;&#125; 则会报错</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">create</span>(<span class=\"title class_\">Anim</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Anim</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//create(Anim)会创造一个animal对象</span></span><br></pre></td></tr></table></figure>\n\n<p>小思考题</p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><h3 id=\"数字枚举\"><a href=\"#数字枚举\" class=\"headerlink\" title=\"数字枚举\"></a>数字枚举</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Cat</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Dog</span>, <span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"title class_\">Rabbit</span>=<span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Lion</span> <span class=\"comment\">//7</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\">Cat</span> === <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">enum E &#123;</span><br><span class=\"line\">    A = <span class=\"title function_\">getSomeValue</span>(),</span><br><span class=\"line\">    B, <span class=\"comment\">// error! &#x27;A&#x27; is not constant-initialized, so &#x27;B&#x27; needs an initializer</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>索引从0开始，下面的比上面的增加1</li>\n<li>如果某一个成员不是constant值，那么下面的成员必须初始化</li>\n</ol>\n<h3 id=\"字符串枚举\"><a href=\"#字符串枚举\" class=\"headerlink\" title=\"字符串枚举\"></a>字符串枚举</h3><p>即使用字符串进行初始化</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">enum <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Cat</span> = <span class=\"string\">&quot;Cat&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Dog</span> = <span class=\"string\">&quot;Dog1&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Animal</span>.<span class=\"property\">Cat</span>) <span class=\"comment\">// Cat</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>没有自增长行为，可以序列化</li>\n</ol>\n<h3 id=\"异构\"><a href=\"#异构\" class=\"headerlink\" title=\"异构\"></a>异构</h3><p>即数字、字符串混合，不建议</p>\n<h3 id=\"联合枚举与枚举成员的类型\"><a href=\"#联合枚举与枚举成员的类型\" class=\"headerlink\" title=\"联合枚举与枚举成员的类型\"></a>联合枚举与枚举成员的类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">ShapeKind</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Circle</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Square</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"title class_\">ShapeKind</span>.<span class=\"property\">Circle</span>;</span><br><span class=\"line\">    <span class=\"attr\">radius</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"title class_\">ShapeKind</span>.<span class=\"property\">Square</span>;</span><br><span class=\"line\">    <span class=\"attr\">sideLength</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Circle</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"title class_\">ShapeKind</span>.<span class=\"property\">Square</span>,</span><br><span class=\"line\">    <span class=\"comment\">//    ~~~~~~~~~~~~~~~~ Error!</span></span><br><span class=\"line\">    <span class=\"attr\">radius</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>枚举成员成为了类型，意义为：这里Circle接口的kind只能为<strong>ShapeKind.Circle类型</strong></li>\n<li>枚举类型成为了枚举成员的类型联合</li>\n</ol>\n<h3 id=\"★★反向映射★★\"><a href=\"#★★反向映射★★\" class=\"headerlink\" title=\"★★反向映射★★\"></a>★★反向映射★★</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Enum</span> &#123;</span><br><span class=\"line\">    A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em><strong>★★可能会将编译为★★</strong></em></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Enum</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>或许添加两个输出会更加直观</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Enum</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>[<span class=\"number\">0</span>]) <span class=\"comment\">//A</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>]) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>枚举类型被编译为一个Enum对象，包含了正向name→value 和反向映射 value → name , 不会为字符串枚举成员生成反向映射</strong></p>\n<p>例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Enum</span> &#123;</span><br><span class=\"line\">    A = <span class=\"number\">1</span>,</span><br><span class=\"line\">    B,</span><br><span class=\"line\">    C = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>.<span class=\"property\">B</span> === <span class=\"title class_\">Enum</span>.<span class=\"property\">C</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Enum</span>[<span class=\"number\">2</span>]) <span class=\"comment\">// C</span></span><br></pre></td></tr></table></figure>\n\n<p>过程</p>\n<ol>\n<li>生成一个Enum对象</li>\n<li>设置A的正向映射为1，同时设置1的反向映射为A</li>\n<li>设置B的正向映射为2，同时设置2的反向映射为B</li>\n<li>设置C的正向映射为2，同时设置2的反向映射为C，覆盖了原来的B</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;B&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;B&quot;</span></span><br><span class=\"line\">  <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;C&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#125;(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;)))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型推论\"><a href=\"#类型推论\" class=\"headerlink\" title=\"类型推论\"></a>类型推论</h2><h3 id=\"最佳通用类型\"><a href=\"#最佳通用类型\" class=\"headerlink\" title=\"最佳通用类型\"></a>最佳通用类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">null</span>];</span><br><span class=\"line\">x : (number|<span class=\"literal\">null</span>)[]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> zoo = [<span class=\"keyword\">new</span> <span class=\"title class_\">Rhino</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">Elephant</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">Snake</span>()];</span><br><span class=\"line\">(<span class=\"title class_\">Rhino</span> | <span class=\"title class_\">Elephant</span> | <span class=\"title class_\">Snake</span>)[]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上下文类型\"><a href=\"#上下文类型\" class=\"headerlink\" title=\"上下文类型\"></a>上下文类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onmousedown</span> = <span class=\"keyword\">function</span>(<span class=\"params\">mouseEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mouseEvent.<span class=\"property\">button</span>);  <span class=\"comment\">//&lt;- Error</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>根据上文的window.onmousedown推断出mouseEvent的类型为MouseEvent</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mouseEvent</span>:any</span><br></pre></td></tr></table></figure>\n\n<p>使用注解抵消上下文类恶行</p>\n<h2 id=\"类型兼容性\"><a href=\"#类型兼容性\" class=\"headerlink\" title=\"类型兼容性\"></a>类型兼容性</h2><ol>\n<li>如果x要兼容y，y至少具有与x相同的属性</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Named</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"title class_\">Named</span>;</span><br><span class=\"line\"><span class=\"comment\">// y&#x27;s inferred type is &#123; name: string; location: string; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">location</span>: <span class=\"string\">&#x27;Seattle&#x27;</span> &#125;;</span><br><span class=\"line\">x = y;</span><br></pre></td></tr></table></figure>\n\n<p>过程：编译器<em><strong>递归检查</strong></em>x中的每个属性，看是否在y中能找到属性名一样且类型相同的属性</p>\n<h3 id=\"比较两个函数\"><a href=\"#比较两个函数\" class=\"headerlink\" title=\"比较两个函数\"></a>比较两个函数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">x</span> = (<span class=\"params\">a: number</span>) =&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">y</span> = (<span class=\"params\">b: number, s: string</span>) =&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">y = x; <span class=\"comment\">// OK</span></span><br><span class=\"line\">x = y; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n\n<p>理解</p>\n<ol>\n<li>y赋值给x可以，因为同时传递b和s之后，b的值可以赋值给a，也满足x的条件</li>\n<li>x赋值给y不行，因为只传递a之后，无值可用</li>\n<li>编译时不会赋值尝试，只会根据类型进行判断</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">x</span> = (<span class=\"params\"></span>) =&gt; (&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">y</span> = (<span class=\"params\"></span>) =&gt; (&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">location</span>: <span class=\"string\">&#x27;Seattle&#x27;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">x = y; <span class=\"comment\">// OK</span></span><br><span class=\"line\">y = x; <span class=\"comment\">// Error, because x() lacks a location property</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>把y赋值给x那么参数依然可以调用name(x中所有的值</li>\n<li>源函数的返回值类型必须是目标函数返回值类型的子类型</li>\n</ol>\n<h3 id=\"函数参数双向协变\"><a href=\"#函数参数双向协变\" class=\"headerlink\" title=\"函数参数双向协变\"></a>函数参数双向协变</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">EventType</span> &#123; <span class=\"title class_\">Mouse</span>, <span class=\"title class_\">Keyboard</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">timestamp</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">MouseEvent</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Event</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">    <span class=\"attr\">x</span>: number</span><br><span class=\"line\">    <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">    <span class=\"attr\">y</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">listenEvent</span>(<span class=\"params\">eventType: EventType, handler: (n: Event) =&gt; <span class=\"keyword\">void</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title function_\">listenEvent</span>(<span class=\"title class_\">EventType</span>.<span class=\"property\">Mouse</span>, <span class=\"function\">(<span class=\"params\">e: MouseEvent</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">x</span> + <span class=\"string\">&#x27;,&#x27;</span> + e.<span class=\"property\">y</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"title function_\">listenEvent</span>(<span class=\"title class_\">EventType</span>.<span class=\"property\">Mouse</span>, <span class=\"function\">(<span class=\"params\">e: Event</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((&lt;<span class=\"title class_\">MouseEvent</span>&gt;e).<span class=\"property\">x</span> + <span class=\"string\">&#x27;,&#x27;</span> + (&lt;<span class=\"title class_\">MouseEvent</span>&gt;e).<span class=\"property\">y</span>));</span><br><span class=\"line\"><span class=\"title function_\">listenEvent</span>(<span class=\"title class_\">EventType</span>.<span class=\"property\">Mouse</span>, &lt;<span class=\"function\">(<span class=\"params\">e: Event</span>) =&gt;</span> <span class=\"keyword\">void</span>&gt;(<span class=\"function\">(<span class=\"params\">e: MouseEvent</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">x</span> + <span class=\"string\">&#x27;,&#x27;</span> + e.<span class=\"property\">y</span>)));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>1处报错，因为MouseEvent是Event的衍生类，不能“覆盖”Event</li>\n<li>可以传入Event，之后使用 as 或者 &lt;&gt; 显示判断类型</li>\n</ol>\n<h3 id=\"可选参数和剩余参数\"><a href=\"#可选参数和剩余参数\" class=\"headerlink\" title=\"可选参数和剩余参数\"></a>可选参数和剩余参数</h3><ol>\n<li>可选参数  ?.  ，剩余参数 …args</li>\n<li>可选参数可以当作无限个可选参数</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">invokeLater</span>(<span class=\"params\">args: any[], callback: (...args: any[]) =&gt; <span class=\"keyword\">void</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... Invoke callback with &#x27;args&#x27; ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Unsound - invokeLater &quot;might&quot; provide any number of arguments</span></span><br><span class=\"line\"><span class=\"title function_\">invokeLater</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x + <span class=\"string\">&#x27;, &#x27;</span> + y));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Confusing (x and y are actually required) and undiscoverable</span></span><br><span class=\"line\"><span class=\"title function_\">invokeLater</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"function\">(<span class=\"params\">x?, y?</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x + <span class=\"string\">&#x27;, &#x27;</span> + y));</span><br></pre></td></tr></table></figure>\n\n<p>此时，args为x,y….</p>\n<h2 id=\"高级类型\"><a href=\"#高级类型\" class=\"headerlink\" title=\"高级类型\"></a>高级类型</h2><h3 id=\"交叉类型\"><a href=\"#交叉类型\" class=\"headerlink\" title=\"交叉类型\"></a>交叉类型</h3><ol>\n<li>多个类型合并为一个类型</li>\n<li>Person &amp; Serializable &amp; Loggable ,同时有这三种类型的成员</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> extend&lt;T, U&gt;(<span class=\"attr\">first</span>: T, <span class=\"attr\">second</span>: U): T &amp; U &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class=\"line\">    for (let id in first) &#123;</span><br><span class=\"line\">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let id in second) &#123;</span><br><span class=\"line\">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class=\"line\">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h3><ol>\n<li>表示可以是几个类型之一</li>\n<li>number | boolean | string 表示可以是这三个类型之一</li>\n<li>如果一个值是联合类型，只能访问共有的成员</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Bird</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">move</span>()</span><br><span class=\"line\">\t<span class=\"title function_\">dance</span>()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tinterface <span class=\"title class_\">Fish</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">move</span>()</span><br><span class=\"line\">\t\t<span class=\"title function_\">eat</span>()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ani</span>: <span class=\"title class_\">Bird</span> | <span class=\"title class_\">Fish</span></span><br><span class=\"line\">ani.<span class=\"title function_\">move</span>()</span><br><span class=\"line\">ani.<span class=\"title function_\">dance</span>() <span class=\"comment\">//wrong</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型保护和区分类型\"><a href=\"#类型保护和区分类型\" class=\"headerlink\" title=\"类型保护和区分类型\"></a>类型保护和区分类型</h3><p>使用联合类型时用来区分不同类型</p>\n<ol>\n<li><strong>类型断言</strong></li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pet = <span class=\"title function_\">getSmallPet</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((&lt;<span class=\"title class_\">Fish</span>&gt;pet).<span class=\"property\">swim</span>) &#123;</span><br><span class=\"line\">    (&lt;<span class=\"title class_\">Fish</span>&gt;pet).<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    (&lt;<span class=\"title class_\">Bird</span>&gt;pet).<span class=\"title function_\">fly</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>类型保护</strong></li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isFish</span>(<span class=\"params\">pet: Fish | Bird</span>): pet is <span class=\"title class_\">Fish</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&lt;<span class=\"title class_\">Fish</span>&gt;pet).<span class=\"property\">swim</span> !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_\">isFish</span>(pet))&#123;</span><br><span class=\"line\">\tpet.<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>pet is Fish ：类型谓词</p>\n</li>\n<li><p>这样可以判断在if分支中一定是Fish类型</p>\n</li>\n<li><p><strong>typeof、instanceof</strong></p>\n</li>\n</ol>\n<h3 id=\"可选参数和可选属性\"><a href=\"#可选参数和可选属性\" class=\"headerlink\" title=\"可选参数和可选属性\"></a>可选参数和可选属性</h3><ol>\n<li>使用了—strictNullChecks 可选参数会自动加上 | undefined</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">x: number, y?: number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + (y || <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>, <span class=\"literal\">null</span>); <span class=\"comment\">// error, &#x27;null&#x27; is not assignable to &#x27;number | undefined&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><p>给类型起一个新的名字</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Name</span> = string;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不会新建一个类型</li>\n<li>创建了一个新的名字来引用那个类型</li>\n<li>接口类型可以是泛型</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Container</span>&lt;T&gt; = &#123; <span class=\"attr\">value</span>: T &#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>在属性里引用自己</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Tree</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: T;</span><br><span class=\"line\">    <span class=\"attr\">left</span>: <span class=\"title class_\">Tree</span>&lt;T&gt;;</span><br><span class=\"line\">    <span class=\"attr\">right</span>: <span class=\"title class_\">Tree</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"☆☆接口和类型别名☆☆\"><a href=\"#☆☆接口和类型别名☆☆\" class=\"headerlink\" title=\"☆☆接口和类型别名☆☆\"></a>☆☆接口和类型别名☆☆</h3><p>interface和type</p>\n<ol>\n<li><p>接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用</p>\n</li>\n<li><p>类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的</p>\n</li>\n<li><p>多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错</p>\n</li>\n<li><p>type可以表示联合类型和交叉类型，interface则会报错</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span></span><br><span class=\"line\">interface <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span> <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>type 可以表示元组、枚举、基本类型（如 string、number、boolean）、字面量类型等，而 interface 不能。</p>\n</li>\n</ol>\n<h3 id=\"可辨识类型\"><a href=\"#可辨识类型\" class=\"headerlink\" title=\"可辨识类型\"></a>可辨识类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">    <span class=\"attr\">size</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;rectangle&quot;</span>;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: number;</span><br><span class=\"line\">    <span class=\"attr\">height</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>;</span><br><span class=\"line\">    <span class=\"attr\">radius</span>: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">kind</span>: <span class=\"string\">&quot;triangle&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"attr\">width</span>: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type <span class=\"title class_\">Shape</span> = <span class=\"title class_\">Square</span> | <span class=\"title class_\">Rectangle</span> | <span class=\"title class_\">Circle</span> | <span class=\"title class_\">Triangle</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">area</span>(<span class=\"params\">s: Shape</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (s.<span class=\"property\">kind</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;square&quot;</span>: <span class=\"keyword\">return</span> s.<span class=\"property\">size</span> * s.<span class=\"property\">size</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;rectangle&quot;</span>: <span class=\"keyword\">return</span> s.<span class=\"property\">height</span> * s.<span class=\"property\">width</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;circle&quot;</span>: <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * s.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span> : <span class=\"keyword\">return</span> <span class=\"title function_\">assertNever</span>(s) <span class=\"comment\">//检查是否是Never</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><p>让编译器可以检查使用了动态属性名的代码</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    name?: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">personProps</span>: keyof <span class=\"title class_\">Person</span> = <span class=\"string\">&quot;age&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>personProps是Person中的一个属性,</p>\n<p>type、interface、class都可以使用</p>\n<h3 id=\"映射类型\"><a href=\"#映射类型\" class=\"headerlink\" title=\"映射类型\"></a>映射类型</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Readonly</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    readonly [P <span class=\"keyword\">in</span> keyof T]: T[P];</span><br><span class=\"line\">&#125; <span class=\"comment\">///把T中所有的类型变为只读的</span></span><br><span class=\"line\">type <span class=\"title class_\">Partial</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]?: T[P];</span><br><span class=\"line\">&#125; <span class=\"comment\">///把T中所有的类型变为可选的</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>keyof T表示T中所有属性名的联合类型</li>\n<li>P in keyof T 类型映射，遍历T的所有属性名，为每个属性名P创建一个新的类型</li>\n<li>T[P] 表示属性P在T中的类型</li>\n<li>readonly 表示这个属性是只读的</li>\n</ol>\n<h2 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h2><p>一些内置的Symbol：</p>\n<ol>\n<li>Symbol.hasIntance 会被instanceof运算符调用，构造器对象用来识别一个对象是否是实例</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：false</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>Symbol.iterator</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> [<span class=\"title class_\">Symbol</span>.<span class=\"property\">hasInstance</span>](instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyObject</span>); <span class=\"comment\">// 输出：false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Symbol.toPrimitive</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">被<span class=\"title class_\">ToPrimitive</span>抽象调用，对象转化为相应的原始值</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"声明合并\"><a href=\"#声明合并\" class=\"headerlink\" title=\"声明合并\"></a>声明合并</h2><p>编译器将针对同一个名字的两个独立生命合并为单一声明</p>\n<p>ts声明会创建：命名空间、类型、值。</p>\n<h3 id=\"接口-1\"><a href=\"#接口-1\" class=\"headerlink\" title=\"接口\"></a>接口</h3><ol>\n<li>非函数成员应该是唯一的</li>\n<li>同名函数会被当成重载，在后面声明的接口优先级更高（出现在靠前的位置）</li>\n<li>出现特殊的函数签名的时候，即，有一个参数是单一的字符串字面量，会被提升到最顶端</li>\n</ol>\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"title class_\">Animals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Zebra</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace <span class=\"title class_\">Animals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> interface <span class=\"title class_\">Legged</span> &#123; <span class=\"attr\">numberOfLegs</span>: number; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///等价于</span></span><br><span class=\"line\">namespace <span class=\"title class_\">Animals</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> interface <span class=\"title class_\">Legged</span> &#123; <span class=\"attr\">numberOfLegs</span>: number; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Zebra</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块扩展\"><a href=\"#模块扩展\" class=\"headerlink\" title=\"模块扩展\"></a>模块扩展</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observable.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... implementation left as an exercise for the reader ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./observable&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span> = <span class=\"keyword\">function</span> (<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... another exercise for the reader</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器不会进行提示，通知编译器：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observable.ts stays the same</span></span><br><span class=\"line\"><span class=\"comment\">// map.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./observable&quot;</span>;</span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&quot;./observable&quot;</span> &#123;</span><br><span class=\"line\">    interface <span class=\"title class_\">Observable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        map&lt;U&gt;(<span class=\"attr\">f</span>: <span class=\"function\">(<span class=\"params\">x: T</span>) =&gt;</span> U): <span class=\"title class_\">Observable</span>&lt;U&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Observable</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span> = <span class=\"keyword\">function</span> (<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ... another exercise for the reader</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// consumer.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Observable</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./observable&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./map&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">o</span>: <span class=\"title class_\">Observable</span>&lt;number&gt;;</span><br><span class=\"line\">o.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"title function_\">toFixed</span>());</span><br></pre></td></tr></table></figure>\n"},{"layout":"posts","title":"一个奇怪的bug解决（误）经历","date":"2023-12-03T02:47:29.000Z","_content":"\n# 一个奇怪的实现经历\n\n## 背景\n\n事情是这样的:2023年十一月的一个晚上，本人正陷于就业和找实习的泥潭中，焦虑不已。\n于是，遂观于某位学长的前端就业讲座之中，讲到最后，学长提到了“开源项目”，大惊。\n原因是本人上学期一直想投入到某个开源项目里，奈何实力不允许，便搁置。\n搁置也罢，罢不了的是，由于太忙，竟然完全忘了“开源项目”这个概念。\n于是便突发奇想：\n~~自己开源一个项目。~~\n做一个日期闹钟app，不仅在对应的时间提醒，还可以在对应的一段时间一直浮现在桌面上\n\n那么这时候就有人要问了：为什么不在应用商店找一个呢？\n原因有二：1.外面的app太繁杂 2.我愿意\n\n## 实现:系统通知功能\n\n几经翻找，发现flutter官方并没有提供闹钟的插件，在第三方库中找到了一个名为：flutter location notice的插件。\n\n事实上，几乎推进的很顺利，直到我发现了一个奇怪的属性。\n\n```dart\n const AndroidNotificationDetails androidNotificationDetails =\n    AndroidNotificationDetails('your channel id', 'your channel name',\n        channelDescription: 'your channel description',\n        importance: Importance.max,\n        priority: Priority.high,\n        ticker: 'ticker');\nconst NotificationDetails notificationDetails =\n    NotificationDetails(android: androidNotificationDetails);\nawait flutterLocalNotificationsPlugin.show(\n    0, 'plain title', 'plain body', notificationDetails,\n    payload: 'item x');\n```\n\n什么是channel id!？什么是channel name!？\n\n### 第一步:联想\n\n我之前做过一个腾讯云储存、腾讯云聊天的项目，里面有一个id的概念，那么这个channel id的获取方式是不是类似呢？\n思考思考思考思考思考，发现应该不是，这个channel id是一个字符串\n我的云储存云聊天，是基于腾讯云服务器的，理应要一个id\n但是提醒功能，只是基于本地的，理应不需要一个id\n\n### 第二步:stackoverflow\n\n这一步上，很快，我找到了一篇类似的问题\n\n#### [flutter local notification: what's the channel id?](https://stackoverflow.com/questions/53803552/flutter-local-notification-whats-the-channel-id)\n\n喜悦之情溢于言表，然而细细看去\n这篇问题的答案对于我来说就是驴唇不对马嘴：\n\n我要问的是： channel id是什么？怎么获取？\n而不是：channel id 有什么用\n（悲伤）\n\n一秒回到解放前\n\n### 第三步: developer\n\n究其技术原因，不过是利用了android method channel，封装了一些方法\n实现功能还是要依靠原生android的api\n\n既然如此，那么我就去看看android developer的文档吧!\n\n#### [创建和管理通知渠道](https://developer.android.com/training/notify-user/channels?hl=zh-cn#CreateChannel)\n\n> 通知渠道是用户可在 Android 系统的通知设置中看到的通知类别。您可以为您的应用创建多个通知渠道。\n> 例如，您可以为您的应用的每个通知类型创建一个通知渠道。您可以在每个渠道上设置通知行为，例如您可以在某些渠道上启用或禁用通知提示、在其他渠道上显示通知标记、或在其他渠道上启用或禁用通知徽标。\n\n所以，通知渠道应该指的是：弹窗、声音、震动等等\n但是，文档里面并没有提到channel id的获取方式\n\n### 第四步:从头再捋一遍\n\n既然哪里都没有提到channel id的获取方式，那么我就从头再完成一遍插件的实现吧！\n\n第一步，初始化\n\n```Dart\nFlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n      FlutterLocalNotificationsPlugin();\nconst AndroidInitializationSettings initializationSettingsAndroid =\n      AndroidInitializationSettings('app_icon');\nfinal InitializationSettings initializationSettings = InitializationSettings(\n      android: initializationSettingsAndroid);\nawait flutterLocalNotificationsPlugin.initialize(initializationSettings,\n      onDidReceiveNotificationResponse: onDidReceiveNotificationResponse);\n```\n\n第二步，创建通知渠道\n\n```Dart\nconst AndroidNotificationDetails androidPlatformChannelSpecifics =\n      AndroidNotificationDetails('your channel id', 'your channel name',\n          'your channel description',\n          importance: Importance.max,\n          priority: Priority.high,\n          showWhen: false);\n```\n\n在这时,我凭借一种摆烂直觉，将channel id改为了一个随机字符串，然后运行，发现，没有任何问题，通知竟然也正常弹出了\n\n# 什么是channel id!？什么是channel name!？\n","source":"_posts/1android_local_notification.md","raw":"---\nlayout: posts\ntitle: 一个奇怪的bug解决（误）经历\ndate: 2023-12-03 10:47:29\ntags:\n  - android\n  - flutter\n---\n\n# 一个奇怪的实现经历\n\n## 背景\n\n事情是这样的:2023年十一月的一个晚上，本人正陷于就业和找实习的泥潭中，焦虑不已。\n于是，遂观于某位学长的前端就业讲座之中，讲到最后，学长提到了“开源项目”，大惊。\n原因是本人上学期一直想投入到某个开源项目里，奈何实力不允许，便搁置。\n搁置也罢，罢不了的是，由于太忙，竟然完全忘了“开源项目”这个概念。\n于是便突发奇想：\n~~自己开源一个项目。~~\n做一个日期闹钟app，不仅在对应的时间提醒，还可以在对应的一段时间一直浮现在桌面上\n\n那么这时候就有人要问了：为什么不在应用商店找一个呢？\n原因有二：1.外面的app太繁杂 2.我愿意\n\n## 实现:系统通知功能\n\n几经翻找，发现flutter官方并没有提供闹钟的插件，在第三方库中找到了一个名为：flutter location notice的插件。\n\n事实上，几乎推进的很顺利，直到我发现了一个奇怪的属性。\n\n```dart\n const AndroidNotificationDetails androidNotificationDetails =\n    AndroidNotificationDetails('your channel id', 'your channel name',\n        channelDescription: 'your channel description',\n        importance: Importance.max,\n        priority: Priority.high,\n        ticker: 'ticker');\nconst NotificationDetails notificationDetails =\n    NotificationDetails(android: androidNotificationDetails);\nawait flutterLocalNotificationsPlugin.show(\n    0, 'plain title', 'plain body', notificationDetails,\n    payload: 'item x');\n```\n\n什么是channel id!？什么是channel name!？\n\n### 第一步:联想\n\n我之前做过一个腾讯云储存、腾讯云聊天的项目，里面有一个id的概念，那么这个channel id的获取方式是不是类似呢？\n思考思考思考思考思考，发现应该不是，这个channel id是一个字符串\n我的云储存云聊天，是基于腾讯云服务器的，理应要一个id\n但是提醒功能，只是基于本地的，理应不需要一个id\n\n### 第二步:stackoverflow\n\n这一步上，很快，我找到了一篇类似的问题\n\n#### [flutter local notification: what's the channel id?](https://stackoverflow.com/questions/53803552/flutter-local-notification-whats-the-channel-id)\n\n喜悦之情溢于言表，然而细细看去\n这篇问题的答案对于我来说就是驴唇不对马嘴：\n\n我要问的是： channel id是什么？怎么获取？\n而不是：channel id 有什么用\n（悲伤）\n\n一秒回到解放前\n\n### 第三步: developer\n\n究其技术原因，不过是利用了android method channel，封装了一些方法\n实现功能还是要依靠原生android的api\n\n既然如此，那么我就去看看android developer的文档吧!\n\n#### [创建和管理通知渠道](https://developer.android.com/training/notify-user/channels?hl=zh-cn#CreateChannel)\n\n> 通知渠道是用户可在 Android 系统的通知设置中看到的通知类别。您可以为您的应用创建多个通知渠道。\n> 例如，您可以为您的应用的每个通知类型创建一个通知渠道。您可以在每个渠道上设置通知行为，例如您可以在某些渠道上启用或禁用通知提示、在其他渠道上显示通知标记、或在其他渠道上启用或禁用通知徽标。\n\n所以，通知渠道应该指的是：弹窗、声音、震动等等\n但是，文档里面并没有提到channel id的获取方式\n\n### 第四步:从头再捋一遍\n\n既然哪里都没有提到channel id的获取方式，那么我就从头再完成一遍插件的实现吧！\n\n第一步，初始化\n\n```Dart\nFlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n      FlutterLocalNotificationsPlugin();\nconst AndroidInitializationSettings initializationSettingsAndroid =\n      AndroidInitializationSettings('app_icon');\nfinal InitializationSettings initializationSettings = InitializationSettings(\n      android: initializationSettingsAndroid);\nawait flutterLocalNotificationsPlugin.initialize(initializationSettings,\n      onDidReceiveNotificationResponse: onDidReceiveNotificationResponse);\n```\n\n第二步，创建通知渠道\n\n```Dart\nconst AndroidNotificationDetails androidPlatformChannelSpecifics =\n      AndroidNotificationDetails('your channel id', 'your channel name',\n          'your channel description',\n          importance: Importance.max,\n          priority: Priority.high,\n          showWhen: false);\n```\n\n在这时,我凭借一种摆烂直觉，将channel id改为了一个随机字符串，然后运行，发现，没有任何问题，通知竟然也正常弹出了\n\n# 什么是channel id!？什么是channel name!？\n","slug":"1android_local_notification","published":1,"updated":"2024-02-01T15:00:44.456Z","comments":1,"photos":[],"link":"","_id":"clzoy7gdu000azw6kensr8vgz","content":"<h1 id=\"一个奇怪的实现经历\"><a href=\"#一个奇怪的实现经历\" class=\"headerlink\" title=\"一个奇怪的实现经历\"></a>一个奇怪的实现经历</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>事情是这样的:2023年十一月的一个晚上，本人正陷于就业和找实习的泥潭中，焦虑不已。<br>于是，遂观于某位学长的前端就业讲座之中，讲到最后，学长提到了“开源项目”，大惊。<br>原因是本人上学期一直想投入到某个开源项目里，奈何实力不允许，便搁置。<br>搁置也罢，罢不了的是，由于太忙，竟然完全忘了“开源项目”这个概念。<br>于是便突发奇想：<br><del>自己开源一个项目。</del><br>做一个日期闹钟app，不仅在对应的时间提醒，还可以在对应的一段时间一直浮现在桌面上</p>\n<p>那么这时候就有人要问了：为什么不在应用商店找一个呢？<br>原因有二：1.外面的app太繁杂 2.我愿意</p>\n<h2 id=\"实现-系统通知功能\"><a href=\"#实现-系统通知功能\" class=\"headerlink\" title=\"实现:系统通知功能\"></a>实现:系统通知功能</h2><p>几经翻找，发现flutter官方并没有提供闹钟的插件，在第三方库中找到了一个名为：flutter location notice的插件。</p>\n<p>事实上，几乎推进的很顺利，直到我发现了一个奇怪的属性。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> AndroidNotificationDetails androidNotificationDetails =</span><br><span class=\"line\">    AndroidNotificationDetails(<span class=\"string\">&#x27;your channel id&#x27;</span>, <span class=\"string\">&#x27;your channel name&#x27;</span>,</span><br><span class=\"line\">        channelDescription: <span class=\"string\">&#x27;your channel description&#x27;</span>,</span><br><span class=\"line\">        importance: Importance.max,</span><br><span class=\"line\">        priority: Priority.high,</span><br><span class=\"line\">        ticker: <span class=\"string\">&#x27;ticker&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> NotificationDetails notificationDetails =</span><br><span class=\"line\">    NotificationDetails(android: androidNotificationDetails);</span><br><span class=\"line\"><span class=\"keyword\">await</span> flutterLocalNotificationsPlugin.<span class=\"keyword\">show</span>(</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"string\">&#x27;plain title&#x27;</span>, <span class=\"string\">&#x27;plain body&#x27;</span>, notificationDetails,</span><br><span class=\"line\">    payload: <span class=\"string\">&#x27;item x&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>什么是channel id!？什么是channel name!？</p>\n<h3 id=\"第一步-联想\"><a href=\"#第一步-联想\" class=\"headerlink\" title=\"第一步:联想\"></a>第一步:联想</h3><p>我之前做过一个腾讯云储存、腾讯云聊天的项目，里面有一个id的概念，那么这个channel id的获取方式是不是类似呢？<br>思考思考思考思考思考，发现应该不是，这个channel id是一个字符串<br>我的云储存云聊天，是基于腾讯云服务器的，理应要一个id<br>但是提醒功能，只是基于本地的，理应不需要一个id</p>\n<h3 id=\"第二步-stackoverflow\"><a href=\"#第二步-stackoverflow\" class=\"headerlink\" title=\"第二步:stackoverflow\"></a>第二步:stackoverflow</h3><p>这一步上，很快，我找到了一篇类似的问题</p>\n<h4 id=\"flutter-local-notification-what’s-the-channel-id\"><a href=\"#flutter-local-notification-what’s-the-channel-id\" class=\"headerlink\" title=\"flutter local notification: what’s the channel id?\"></a><a href=\"https://stackoverflow.com/questions/53803552/flutter-local-notification-whats-the-channel-id\">flutter local notification: what’s the channel id?</a></h4><p>喜悦之情溢于言表，然而细细看去<br>这篇问题的答案对于我来说就是驴唇不对马嘴：</p>\n<p>我要问的是： channel id是什么？怎么获取？<br>而不是：channel id 有什么用<br>（悲伤）</p>\n<p>一秒回到解放前</p>\n<h3 id=\"第三步-developer\"><a href=\"#第三步-developer\" class=\"headerlink\" title=\"第三步: developer\"></a>第三步: developer</h3><p>究其技术原因，不过是利用了android method channel，封装了一些方法<br>实现功能还是要依靠原生android的api</p>\n<p>既然如此，那么我就去看看android developer的文档吧!</p>\n<h4 id=\"创建和管理通知渠道\"><a href=\"#创建和管理通知渠道\" class=\"headerlink\" title=\"创建和管理通知渠道\"></a><a href=\"https://developer.android.com/training/notify-user/channels?hl=zh-cn#CreateChannel\">创建和管理通知渠道</a></h4><blockquote>\n<p>通知渠道是用户可在 Android 系统的通知设置中看到的通知类别。您可以为您的应用创建多个通知渠道。<br>例如，您可以为您的应用的每个通知类型创建一个通知渠道。您可以在每个渠道上设置通知行为，例如您可以在某些渠道上启用或禁用通知提示、在其他渠道上显示通知标记、或在其他渠道上启用或禁用通知徽标。</p>\n</blockquote>\n<p>所以，通知渠道应该指的是：弹窗、声音、震动等等<br>但是，文档里面并没有提到channel id的获取方式</p>\n<h3 id=\"第四步-从头再捋一遍\"><a href=\"#第四步-从头再捋一遍\" class=\"headerlink\" title=\"第四步:从头再捋一遍\"></a>第四步:从头再捋一遍</h3><p>既然哪里都没有提到channel id的获取方式，那么我就从头再完成一遍插件的实现吧！</p>\n<p>第一步，初始化</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =</span><br><span class=\"line\">      FlutterLocalNotificationsPlugin();</span><br><span class=\"line\"><span class=\"keyword\">const</span> AndroidInitializationSettings initializationSettingsAndroid =</span><br><span class=\"line\">      AndroidInitializationSettings(<span class=\"string\">&#x27;app_icon&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> InitializationSettings initializationSettings = InitializationSettings(</span><br><span class=\"line\">      android: initializationSettingsAndroid);</span><br><span class=\"line\"><span class=\"keyword\">await</span> flutterLocalNotificationsPlugin.initialize(initializationSettings,</span><br><span class=\"line\">      onDidReceiveNotificationResponse: onDidReceiveNotificationResponse);</span><br></pre></td></tr></table></figure>\n\n<p>第二步，创建通知渠道</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AndroidNotificationDetails androidPlatformChannelSpecifics =</span><br><span class=\"line\">      AndroidNotificationDetails(<span class=\"string\">&#x27;your channel id&#x27;</span>, <span class=\"string\">&#x27;your channel name&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;your channel description&#x27;</span>,</span><br><span class=\"line\">          importance: Importance.max,</span><br><span class=\"line\">          priority: Priority.high,</span><br><span class=\"line\">          showWhen: <span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在这时,我凭借一种摆烂直觉，将channel id改为了一个随机字符串，然后运行，发现，没有任何问题，通知竟然也正常弹出了</p>\n<h1 id=\"什么是channel-id-？什么是channel-name-？\"><a href=\"#什么是channel-id-？什么是channel-name-？\" class=\"headerlink\" title=\"什么是channel id!？什么是channel name!？\"></a>什么是channel id!？什么是channel name!？</h1>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"一个奇怪的实现经历\"><a href=\"#一个奇怪的实现经历\" class=\"headerlink\" title=\"一个奇怪的实现经历\"></a>一个奇怪的实现经历</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>事情是这样的:2023年十一月的一个晚上，本人正陷于就业和找实习的泥潭中，焦虑不已。<br>于是，遂观于某位学长的前端就业讲座之中，讲到最后，学长提到了“开源项目”，大惊。<br>原因是本人上学期一直想投入到某个开源项目里，奈何实力不允许，便搁置。<br>搁置也罢，罢不了的是，由于太忙，竟然完全忘了“开源项目”这个概念。<br>于是便突发奇想：<br><del>自己开源一个项目。</del><br>做一个日期闹钟app，不仅在对应的时间提醒，还可以在对应的一段时间一直浮现在桌面上</p>\n<p>那么这时候就有人要问了：为什么不在应用商店找一个呢？<br>原因有二：1.外面的app太繁杂 2.我愿意</p>\n<h2 id=\"实现-系统通知功能\"><a href=\"#实现-系统通知功能\" class=\"headerlink\" title=\"实现:系统通知功能\"></a>实现:系统通知功能</h2><p>几经翻找，发现flutter官方并没有提供闹钟的插件，在第三方库中找到了一个名为：flutter location notice的插件。</p>\n<p>事实上，几乎推进的很顺利，直到我发现了一个奇怪的属性。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> AndroidNotificationDetails androidNotificationDetails =</span><br><span class=\"line\">    AndroidNotificationDetails(<span class=\"string\">&#x27;your channel id&#x27;</span>, <span class=\"string\">&#x27;your channel name&#x27;</span>,</span><br><span class=\"line\">        channelDescription: <span class=\"string\">&#x27;your channel description&#x27;</span>,</span><br><span class=\"line\">        importance: Importance.max,</span><br><span class=\"line\">        priority: Priority.high,</span><br><span class=\"line\">        ticker: <span class=\"string\">&#x27;ticker&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> NotificationDetails notificationDetails =</span><br><span class=\"line\">    NotificationDetails(android: androidNotificationDetails);</span><br><span class=\"line\"><span class=\"keyword\">await</span> flutterLocalNotificationsPlugin.<span class=\"keyword\">show</span>(</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"string\">&#x27;plain title&#x27;</span>, <span class=\"string\">&#x27;plain body&#x27;</span>, notificationDetails,</span><br><span class=\"line\">    payload: <span class=\"string\">&#x27;item x&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>什么是channel id!？什么是channel name!？</p>\n<h3 id=\"第一步-联想\"><a href=\"#第一步-联想\" class=\"headerlink\" title=\"第一步:联想\"></a>第一步:联想</h3><p>我之前做过一个腾讯云储存、腾讯云聊天的项目，里面有一个id的概念，那么这个channel id的获取方式是不是类似呢？<br>思考思考思考思考思考，发现应该不是，这个channel id是一个字符串<br>我的云储存云聊天，是基于腾讯云服务器的，理应要一个id<br>但是提醒功能，只是基于本地的，理应不需要一个id</p>\n<h3 id=\"第二步-stackoverflow\"><a href=\"#第二步-stackoverflow\" class=\"headerlink\" title=\"第二步:stackoverflow\"></a>第二步:stackoverflow</h3><p>这一步上，很快，我找到了一篇类似的问题</p>\n<h4 id=\"flutter-local-notification-what’s-the-channel-id\"><a href=\"#flutter-local-notification-what’s-the-channel-id\" class=\"headerlink\" title=\"flutter local notification: what’s the channel id?\"></a><a href=\"https://stackoverflow.com/questions/53803552/flutter-local-notification-whats-the-channel-id\">flutter local notification: what’s the channel id?</a></h4><p>喜悦之情溢于言表，然而细细看去<br>这篇问题的答案对于我来说就是驴唇不对马嘴：</p>\n<p>我要问的是： channel id是什么？怎么获取？<br>而不是：channel id 有什么用<br>（悲伤）</p>\n<p>一秒回到解放前</p>\n<h3 id=\"第三步-developer\"><a href=\"#第三步-developer\" class=\"headerlink\" title=\"第三步: developer\"></a>第三步: developer</h3><p>究其技术原因，不过是利用了android method channel，封装了一些方法<br>实现功能还是要依靠原生android的api</p>\n<p>既然如此，那么我就去看看android developer的文档吧!</p>\n<h4 id=\"创建和管理通知渠道\"><a href=\"#创建和管理通知渠道\" class=\"headerlink\" title=\"创建和管理通知渠道\"></a><a href=\"https://developer.android.com/training/notify-user/channels?hl=zh-cn#CreateChannel\">创建和管理通知渠道</a></h4><blockquote>\n<p>通知渠道是用户可在 Android 系统的通知设置中看到的通知类别。您可以为您的应用创建多个通知渠道。<br>例如，您可以为您的应用的每个通知类型创建一个通知渠道。您可以在每个渠道上设置通知行为，例如您可以在某些渠道上启用或禁用通知提示、在其他渠道上显示通知标记、或在其他渠道上启用或禁用通知徽标。</p>\n</blockquote>\n<p>所以，通知渠道应该指的是：弹窗、声音、震动等等<br>但是，文档里面并没有提到channel id的获取方式</p>\n<h3 id=\"第四步-从头再捋一遍\"><a href=\"#第四步-从头再捋一遍\" class=\"headerlink\" title=\"第四步:从头再捋一遍\"></a>第四步:从头再捋一遍</h3><p>既然哪里都没有提到channel id的获取方式，那么我就从头再完成一遍插件的实现吧！</p>\n<p>第一步，初始化</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =</span><br><span class=\"line\">      FlutterLocalNotificationsPlugin();</span><br><span class=\"line\"><span class=\"keyword\">const</span> AndroidInitializationSettings initializationSettingsAndroid =</span><br><span class=\"line\">      AndroidInitializationSettings(<span class=\"string\">&#x27;app_icon&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> InitializationSettings initializationSettings = InitializationSettings(</span><br><span class=\"line\">      android: initializationSettingsAndroid);</span><br><span class=\"line\"><span class=\"keyword\">await</span> flutterLocalNotificationsPlugin.initialize(initializationSettings,</span><br><span class=\"line\">      onDidReceiveNotificationResponse: onDidReceiveNotificationResponse);</span><br></pre></td></tr></table></figure>\n\n<p>第二步，创建通知渠道</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AndroidNotificationDetails androidPlatformChannelSpecifics =</span><br><span class=\"line\">      AndroidNotificationDetails(<span class=\"string\">&#x27;your channel id&#x27;</span>, <span class=\"string\">&#x27;your channel name&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;your channel description&#x27;</span>,</span><br><span class=\"line\">          importance: Importance.max,</span><br><span class=\"line\">          priority: Priority.high,</span><br><span class=\"line\">          showWhen: <span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在这时,我凭借一种摆烂直觉，将channel id改为了一个随机字符串，然后运行，发现，没有任何问题，通知竟然也正常弹出了</p>\n<h1 id=\"什么是channel-id-？什么是channel-name-？\"><a href=\"#什么是channel-id-？什么是channel-name-？\" class=\"headerlink\" title=\"什么是channel id!？什么是channel name!？\"></a>什么是channel id!？什么是channel name!？</h1>"},{"title":"TypeScript All","date":"2024-08-06T00:19:06.929Z","updated":"2024-08-11T02:42:40.253Z","description":"对于前两部分typescript较为精华的部分的总结","top_img":null,"_content":"\n# ☆☆接口和类型别名☆☆\n\ninterface和type\n\n1. 接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用\n2. 类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的\n3. 多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错\n4. type可以表示联合类型和交叉类型，interface则会报错\n5. 使用tsc编译之后,type不会存在，因为他只是“引用”,interface也不会存在，因为他只是“规范”\n6. 如果使用type something = string，type依旧不会存在\n\n    ```jsx\n    type Animal = \"fish\" | \"cow\"\n    interface Animal = \"fish\" | \"cow\" //报错\n    ```\n   \n\n# ★★反向映射★★\n\n```jsx\nenum Enum {\n    A\n}\nlet a = Enum.A;\nlet nameOfA = Enum[a]; // \"A\"\n```\n\n***★★可能会将编译为★★***\n\n```jsx\nvar Enum;\n(function (Enum) {\n    Enum[Enum[\"A\"] = 0] = \"A\";\n})(Enum || (Enum = {}));\nvar a = Enum.A;\nvar nameOfA = Enum[a]; // \"A\"\n```\n\n# ★★高级技巧★★\n\n声明类时\n\n```jsx\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n创建了一个构造函数，会在new创建实例的时候调用。\n\n上面的代码被编译之后：\n\n```jsx\nlet Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return \"Hello, \" + this.greeting;\n    };\n    return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n回顾：**使用new函数会发生什么？**\n\n1. 创建一个空对象，成为newInstance（新的实例）\n2. 如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype\n3. 使用给定参数执行构造函数，并把newInstance绑定为this上下文\n4. 如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance\n\n# any 和 unknow的区别\n\n1. unknow是类型安全的any，unknow类型的值只能赋值给unknow和any类型的变量\n2. any类型的值可以赋值给任何类型的变量\n3. any 类型是TypeScript中最不安全的类型，它允许赋值给任何类型，也可以从任何类型赋值过来。这意味着使用 any 类型时，TypeScript不会进行任何类型检查，这基本上和使用JavaScript的动态类型特性一样。 \n4. unknown 类型是TypeScript中安全类型的一种，它是 any 类型的类型安全版本。使用 unknown 类型时，你必须先对变量进行检查或类型守卫，才能访问其属性或调用其方法。\n\n举个例子\n```javascript\nfunction processAny(value: any) {\n    console.log(value.toUpperCase()); // 假设 value 是一个字符串\n    return value * 10; // 这里 TypeScript 不会报错，即使 value 不是数字\n}\nfunction processUnknow(value: unknow) {\n   console.log(value.toUpperCase()); // 假设 value 是一个字符串\n   return value * 10; // 这里 TypeScript 不会报错，即使 value 不是数字\n}\nprocessAny(123)\nprocessAny(\"123\")\nprocessUnknow(123)\nprocessUnknow(\"123\")\n```\n\n在这个例子里，processAny的两个都不会报错\nprocessUnknown的两个调用都会报错，如果不希望报错\n我们需要：\n```javascript\nfunction processUnknow(value: unknow) {\n  if (typeof value === \"string\"){\n     console.log(value.toUpperCase()); // 假设 value 是一个字符串\n  }\n  if (typeof value === \"number\"){\n     return value * 10; // 这里 TypeScript 不会报错，即使 value 不是数字\n  }\n  return \"1\"\n}\n```\n在调用之前进行类型断言\n\n# typescript 是怎么进行类型检查的，在哪个阶段发挥作用\n\nTypeScript 代码首先通过 TypeScript 编译器（tsc）进行编译。编译过程主要包括以下几个阶段：\n\n1. 解析：将 TypeScript 代码解析成抽象语法树（AST）。 \n2. 类型检查：在 AST 上进行类型检查，确保代码符合类型系统的要求。\n3. 转换：将 TypeScript 代码转换成等价的 JavaScript 代码。包括: 处理 TypeScript 特有的语法，如类型注解、接口、类等，并将其转换为 JavaScript 语法。\n4. 输出：生成编译后的 JavaScript 代码，通常是一个或多个 .js 文件。\n\n\n","source":"_posts/13-3TypeScript.md","raw":"---\ntitle: TypeScript All\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription: 对于前两部分typescript较为精华的部分的总结\ntop_img:\ntags:\n  - 本手\n---\n\n# ☆☆接口和类型别名☆☆\n\ninterface和type\n\n1. 接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用\n2. 类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的\n3. 多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错\n4. type可以表示联合类型和交叉类型，interface则会报错\n5. 使用tsc编译之后,type不会存在，因为他只是“引用”,interface也不会存在，因为他只是“规范”\n6. 如果使用type something = string，type依旧不会存在\n\n    ```jsx\n    type Animal = \"fish\" | \"cow\"\n    interface Animal = \"fish\" | \"cow\" //报错\n    ```\n   \n\n# ★★反向映射★★\n\n```jsx\nenum Enum {\n    A\n}\nlet a = Enum.A;\nlet nameOfA = Enum[a]; // \"A\"\n```\n\n***★★可能会将编译为★★***\n\n```jsx\nvar Enum;\n(function (Enum) {\n    Enum[Enum[\"A\"] = 0] = \"A\";\n})(Enum || (Enum = {}));\nvar a = Enum.A;\nvar nameOfA = Enum[a]; // \"A\"\n```\n\n# ★★高级技巧★★\n\n声明类时\n\n```jsx\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n创建了一个构造函数，会在new创建实例的时候调用。\n\n上面的代码被编译之后：\n\n```jsx\nlet Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return \"Hello, \" + this.greeting;\n    };\n    return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n回顾：**使用new函数会发生什么？**\n\n1. 创建一个空对象，成为newInstance（新的实例）\n2. 如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype\n3. 使用给定参数执行构造函数，并把newInstance绑定为this上下文\n4. 如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance\n\n# any 和 unknow的区别\n\n1. unknow是类型安全的any，unknow类型的值只能赋值给unknow和any类型的变量\n2. any类型的值可以赋值给任何类型的变量\n3. any 类型是TypeScript中最不安全的类型，它允许赋值给任何类型，也可以从任何类型赋值过来。这意味着使用 any 类型时，TypeScript不会进行任何类型检查，这基本上和使用JavaScript的动态类型特性一样。 \n4. unknown 类型是TypeScript中安全类型的一种，它是 any 类型的类型安全版本。使用 unknown 类型时，你必须先对变量进行检查或类型守卫，才能访问其属性或调用其方法。\n\n举个例子\n```javascript\nfunction processAny(value: any) {\n    console.log(value.toUpperCase()); // 假设 value 是一个字符串\n    return value * 10; // 这里 TypeScript 不会报错，即使 value 不是数字\n}\nfunction processUnknow(value: unknow) {\n   console.log(value.toUpperCase()); // 假设 value 是一个字符串\n   return value * 10; // 这里 TypeScript 不会报错，即使 value 不是数字\n}\nprocessAny(123)\nprocessAny(\"123\")\nprocessUnknow(123)\nprocessUnknow(\"123\")\n```\n\n在这个例子里，processAny的两个都不会报错\nprocessUnknown的两个调用都会报错，如果不希望报错\n我们需要：\n```javascript\nfunction processUnknow(value: unknow) {\n  if (typeof value === \"string\"){\n     console.log(value.toUpperCase()); // 假设 value 是一个字符串\n  }\n  if (typeof value === \"number\"){\n     return value * 10; // 这里 TypeScript 不会报错，即使 value 不是数字\n  }\n  return \"1\"\n}\n```\n在调用之前进行类型断言\n\n# typescript 是怎么进行类型检查的，在哪个阶段发挥作用\n\nTypeScript 代码首先通过 TypeScript 编译器（tsc）进行编译。编译过程主要包括以下几个阶段：\n\n1. 解析：将 TypeScript 代码解析成抽象语法树（AST）。 \n2. 类型检查：在 AST 上进行类型检查，确保代码符合类型系统的要求。\n3. 转换：将 TypeScript 代码转换成等价的 JavaScript 代码。包括: 处理 TypeScript 特有的语法，如类型注解、接口、类等，并将其转换为 JavaScript 语法。\n4. 输出：生成编译后的 JavaScript 代码，通常是一个或多个 .js 文件。\n\n\n","slug":"13-3TypeScript","published":1,"_id":"clzoy7gdw000czw6k86gibidf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"☆☆接口和类型别名☆☆\"><a href=\"#☆☆接口和类型别名☆☆\" class=\"headerlink\" title=\"☆☆接口和类型别名☆☆\"></a>☆☆接口和类型别名☆☆</h1><p>interface和type</p>\n<ol>\n<li><p>接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用</p>\n</li>\n<li><p>类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的</p>\n</li>\n<li><p>多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错</p>\n</li>\n<li><p>type可以表示联合类型和交叉类型，interface则会报错</p>\n</li>\n<li><p>使用tsc编译之后,type不会存在，因为他只是“引用”,interface也不会存在，因为他只是“规范”</p>\n</li>\n<li><p>如果使用type something &#x3D; string，type依旧不会存在</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span></span><br><span class=\"line\">interface <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span> <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"★★反向映射★★\"><a href=\"#★★反向映射★★\" class=\"headerlink\" title=\"★★反向映射★★\"></a>★★反向映射★★</h1><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Enum</span> &#123;</span><br><span class=\"line\">    A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em><strong>★★可能会将编译为★★</strong></em></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Enum</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"★★高级技巧★★\"><a href=\"#★★高级技巧★★\" class=\"headerlink\" title=\"★★高级技巧★★\"></a>★★高级技巧★★</h1><p>声明类时</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">greeting</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">message: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">greeter</span>: <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个构造函数，会在new创建实例的时候调用。</p>\n<p>上面的代码被编译之后：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Greeter</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Greeter</span>(<span class=\"params\">message</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Greeter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">greet</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>回顾：<strong>使用new函数会发生什么？</strong></p>\n<ol>\n<li>创建一个空对象，成为newInstance（新的实例）</li>\n<li>如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype</li>\n<li>使用给定参数执行构造函数，并把newInstance绑定为this上下文</li>\n<li>如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance</li>\n</ol>\n<h1 id=\"any-和-unknow的区别\"><a href=\"#any-和-unknow的区别\" class=\"headerlink\" title=\"any 和 unknow的区别\"></a>any 和 unknow的区别</h1><ol>\n<li>unknow是类型安全的any，unknow类型的值只能赋值给unknow和any类型的变量</li>\n<li>any类型的值可以赋值给任何类型的变量</li>\n<li>any 类型是TypeScript中最不安全的类型，它允许赋值给任何类型，也可以从任何类型赋值过来。这意味着使用 any 类型时，TypeScript不会进行任何类型检查，这基本上和使用JavaScript的动态类型特性一样。 </li>\n<li>unknown 类型是TypeScript中安全类型的一种，它是 any 类型的类型安全版本。使用 unknown 类型时，你必须先对变量进行检查或类型守卫，才能访问其属性或调用其方法。</li>\n</ol>\n<p>举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processAny</span>(<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// 假设 value 是一个字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">10</span>; <span class=\"comment\">// 这里 TypeScript 不会报错，即使 value 不是数字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processUnknow</span>(<span class=\"params\">value: unknow</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// 假设 value 是一个字符串</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> value * <span class=\"number\">10</span>; <span class=\"comment\">// 这里 TypeScript 不会报错，即使 value 不是数字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">processAny</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"title function_\">processAny</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"title function_\">processUnknow</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"title function_\">processUnknow</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子里，processAny的两个都不会报错<br>processUnknown的两个调用都会报错，如果不希望报错<br>我们需要：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processUnknow</span>(<span class=\"params\">value: unknow</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&quot;string&quot;</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// 假设 value 是一个字符串</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&quot;number&quot;</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> value * <span class=\"number\">10</span>; <span class=\"comment\">// 这里 TypeScript 不会报错，即使 value 不是数字</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用之前进行类型断言</p>\n<h1 id=\"typescript-是怎么进行类型检查的，在哪个阶段发挥作用\"><a href=\"#typescript-是怎么进行类型检查的，在哪个阶段发挥作用\" class=\"headerlink\" title=\"typescript 是怎么进行类型检查的，在哪个阶段发挥作用\"></a>typescript 是怎么进行类型检查的，在哪个阶段发挥作用</h1><p>TypeScript 代码首先通过 TypeScript 编译器（tsc）进行编译。编译过程主要包括以下几个阶段：</p>\n<ol>\n<li>解析：将 TypeScript 代码解析成抽象语法树（AST）。 </li>\n<li>类型检查：在 AST 上进行类型检查，确保代码符合类型系统的要求。</li>\n<li>转换：将 TypeScript 代码转换成等价的 JavaScript 代码。包括: 处理 TypeScript 特有的语法，如类型注解、接口、类等，并将其转换为 JavaScript 语法。</li>\n<li>输出：生成编译后的 JavaScript 代码，通常是一个或多个 .js 文件。</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"☆☆接口和类型别名☆☆\"><a href=\"#☆☆接口和类型别名☆☆\" class=\"headerlink\" title=\"☆☆接口和类型别名☆☆\"></a>☆☆接口和类型别名☆☆</h1><p>interface和type</p>\n<ol>\n<li><p>接口创建了一个新的名字，可以在其他地方使用，类型别名不创建新的名字，而是类型的引用</p>\n</li>\n<li><p>类型别名不能被或者extends、implements其他类型，interface对于拓展是开放的</p>\n</li>\n<li><p>多个同名的interface会合并（相同属性声明为不同类型时候会报错），type则会报错</p>\n</li>\n<li><p>type可以表示联合类型和交叉类型，interface则会报错</p>\n</li>\n<li><p>使用tsc编译之后,type不会存在，因为他只是“引用”,interface也不会存在，因为他只是“规范”</p>\n</li>\n<li><p>如果使用type something &#x3D; string，type依旧不会存在</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span></span><br><span class=\"line\">interface <span class=\"title class_\">Animal</span> = <span class=\"string\">&quot;fish&quot;</span> | <span class=\"string\">&quot;cow&quot;</span> <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"★★反向映射★★\"><a href=\"#★★反向映射★★\" class=\"headerlink\" title=\"★★反向映射★★\"></a>★★反向映射★★</h1><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">Enum</span> &#123;</span><br><span class=\"line\">    A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em><strong>★★可能会将编译为★★</strong></em></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Enum</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Enum</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Enum</span>[<span class=\"title class_\">Enum</span>[<span class=\"string\">&quot;A&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;A&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Enum</span> || (<span class=\"title class_\">Enum</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Enum</span>.<span class=\"property\">A</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameOfA = <span class=\"title class_\">Enum</span>[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"★★高级技巧★★\"><a href=\"#★★高级技巧★★\" class=\"headerlink\" title=\"★★高级技巧★★\"></a>★★高级技巧★★</h1><p>声明类时</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">greeting</span>: string;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">message: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">greeter</span>: <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个构造函数，会在new创建实例的时候调用。</p>\n<p>上面的代码被编译之后：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Greeter</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Greeter</span>(<span class=\"params\">message</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span> = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Greeter</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">greet</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">greeting</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Greeter</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> <span class=\"title class_\">Greeter</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(greeter.<span class=\"title function_\">greet</span>());</span><br></pre></td></tr></table></figure>\n\n<p>回顾：<strong>使用new函数会发生什么？</strong></p>\n<ol>\n<li>创建一个空对象，成为newInstance（新的实例）</li>\n<li>如果构造函数的prototype是一个对象，那么把newInstance的原型指向prototype，否则newInstance为一个普通对象，原型为Object.prototype</li>\n<li>使用给定参数执行构造函数，并把newInstance绑定为this上下文</li>\n<li>如果构造函数返回非原始值，则返回值为new的结果，否则返回newInstance</li>\n</ol>\n<h1 id=\"any-和-unknow的区别\"><a href=\"#any-和-unknow的区别\" class=\"headerlink\" title=\"any 和 unknow的区别\"></a>any 和 unknow的区别</h1><ol>\n<li>unknow是类型安全的any，unknow类型的值只能赋值给unknow和any类型的变量</li>\n<li>any类型的值可以赋值给任何类型的变量</li>\n<li>any 类型是TypeScript中最不安全的类型，它允许赋值给任何类型，也可以从任何类型赋值过来。这意味着使用 any 类型时，TypeScript不会进行任何类型检查，这基本上和使用JavaScript的动态类型特性一样。 </li>\n<li>unknown 类型是TypeScript中安全类型的一种，它是 any 类型的类型安全版本。使用 unknown 类型时，你必须先对变量进行检查或类型守卫，才能访问其属性或调用其方法。</li>\n</ol>\n<p>举个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processAny</span>(<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// 假设 value 是一个字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * <span class=\"number\">10</span>; <span class=\"comment\">// 这里 TypeScript 不会报错，即使 value 不是数字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processUnknow</span>(<span class=\"params\">value: unknow</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// 假设 value 是一个字符串</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> value * <span class=\"number\">10</span>; <span class=\"comment\">// 这里 TypeScript 不会报错，即使 value 不是数字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">processAny</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"title function_\">processAny</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"title function_\">processUnknow</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\"><span class=\"title function_\">processUnknow</span>(<span class=\"string\">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子里，processAny的两个都不会报错<br>processUnknown的两个调用都会报错，如果不希望报错<br>我们需要：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processUnknow</span>(<span class=\"params\">value: unknow</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&quot;string&quot;</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// 假设 value 是一个字符串</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&quot;number&quot;</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> value * <span class=\"number\">10</span>; <span class=\"comment\">// 这里 TypeScript 不会报错，即使 value 不是数字</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用之前进行类型断言</p>\n<h1 id=\"typescript-是怎么进行类型检查的，在哪个阶段发挥作用\"><a href=\"#typescript-是怎么进行类型检查的，在哪个阶段发挥作用\" class=\"headerlink\" title=\"typescript 是怎么进行类型检查的，在哪个阶段发挥作用\"></a>typescript 是怎么进行类型检查的，在哪个阶段发挥作用</h1><p>TypeScript 代码首先通过 TypeScript 编译器（tsc）进行编译。编译过程主要包括以下几个阶段：</p>\n<ol>\n<li>解析：将 TypeScript 代码解析成抽象语法树（AST）。 </li>\n<li>类型检查：在 AST 上进行类型检查，确保代码符合类型系统的要求。</li>\n<li>转换：将 TypeScript 代码转换成等价的 JavaScript 代码。包括: 处理 TypeScript 特有的语法，如类型注解、接口、类等，并将其转换为 JavaScript 语法。</li>\n<li>输出：生成编译后的 JavaScript 代码，通常是一个或多个 .js 文件。</li>\n</ol>\n"},{"title":"TypeScript Part2","date":"2024-08-04T08:17:59.578Z","updated":"2024-08-04T08:28:58.454Z","description":"总结了TypeScript的模块、装饰器、声明、三斜线指令等内容, 对上一篇博客进行了补充","top_img":null,"_content":"\n# TypeScript2\n\n# 模块\n\n1. m模块在自身作用域执行，不是全局作用域\n2. 除非使用export导出，否则定义在内部的变量都是不可见的\n3. 模块使用***模块加载器***导入其他模块，\n    1. 模块加载器用于在执行此模块代码之前去查找并执行这个模块所有的依赖\n    2. JavaScript模块加载器是服务于Node.js的[CommonJS](https://en.wikipedia.org/wiki/CommonJS)和服务于Web应用的[Require.js](http://requirejs.org/)。\n4. 任何包含顶级import或者export的文件都为一个模块，如果都不带，那么内容为全局可见的\n\n## 导出\n\n### 导出语句\n\n```jsx\nexport { ZipCodeValidator };\nexport { ZipCodeValidator as mainValidator };\n```\n\n使用as可以重命名\n\n### 重新导出\n\n```jsx\nexport class ParseIntBasedZipCodeValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && parseInt(s).toString() === s;\n    }\n}\n\n// 导出原先的验证器但做了重命名\nexport {ZipCodeValidator as RegExpBasedZipCodeValidator} from \"./ZipCodeValidator\";\n```\n\n1. 不会在当前模块导入或者定义一个新的局部变量\n\n## 导入\n\n```jsx\nimport { ZipCodeValidator } from \"./ZipCodeValidator\"; //普通导入\nimport { ZipCodeValidator as ZCV } from \"./ZipCodeValidator\"; //重命名\n\nimport * as validator from \"./ZipCodeValidator\"; //导入全部，用validator代表这个模块\nlet myValidator = new validator.ZipCodeValidator();\n```\n\n## 默认导出\n\n1. 类和函数声明可以直接被标记为默认导出。 标记为默认导出的类和函数的名字是可以省略的。\n    \n    ```jsx\n    const numberRegexp = /^[0-9]+$/;\n    \n    export default function (s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n    ```\n    \n2. default的导出可以是一个值\n\n## **`export =` 和 `import = require()`**\n\n1. 在CommonJS和AMD的环境里有一个exports变量，包含着一个模块的所有导出内容\n2. exports可以被赋值为一个对象，类似于es6的默认导出\n3. 为了兼容CommonJS和AMD提供了export = 语法\n4. 若使用`export =`导出一个模块，则必须使用TypeScript的特定语法`import module = require(\"module\")`来导入此模块。\n\n```jsx\n//test.ts\nexport = {\n    hello: 'world'\n}\n\n///导入\nimport zip = require(\"./test.ts\");\n```\n\n# 命名空间 nameSpace\n\n“内部模块”\n\n1. 提取逻辑，记录的同时不担心与其他对象产生命名冲突\n2. 相同namespace即使在不同文件也是同一个明明空间，与接口的**合并**同工\n3. 简化命名空间操作: **import q = x.y.z** （用q代表x.y.z，起个名字）\n\n# 模块和命名空间的区别\n\n1. 模块有自己的作用域，只有被导出才能被其他文件引用。namespace可以在全局引用，即使不导出\n    \n    ```jsx\n    // global.ts\n    namespace MyNamespace {\n        export class MyClass {\n            constructor(public name: string) {}\n        }\n    }\n    \n    // main.ts\n    let instance = new MyNamespace.MyClass('example');\n    ```\n    \n2. 模块是文件级别的，用import和export进行管理，namespace在全局通过代码自行组织\n3. 使用场景：模块是 TypeScript 和 ES6 中推荐的组织代码的方式，适用于大型项目。而命名空间主要用于组织全局变量，适用于较小的项目或者为了向后兼容\n\n*~~ps:可以把模块比作每个城池，命名空间比作教会~~*\n\n# 模块解析\n\n### 相对导入\n\n1. 以 /   ./   ../ 开头的\n2. 相对于导入他的文件\n\n### 非相对\n\n1. 所有其它形式的导入\n2. 相对于baseUrl或者**路径映射**\n\n## 模块解析策略\n\n### Classic\n\n1. 之前的默认解析策略，为了向后兼容而保留\n2. 相对导入模块相对于导入他的文件解析\n    \n    ```jsx\n    /root/src/folder/A.ts\n    \n    /root/src/folder/moduleB.ts\n    /root/src/folder/moduleB.d.ts\n    ```\n    \n3. 非相对模块的导入，编译器会从包含文件的目录依次向上级目录遍历\n    \n    ```jsx\n    //有一个对moduleB的非相对导入\n    import { b } from \"moduleB\"\n    //它是在/root/src/folder/A.ts文件里，会以如下的方式来定位\"moduleB\"：\n    \n    /root/src/folder/moduleB.ts\n    /root/src/folder/moduleB.d.ts\n    /root/src/moduleB.ts\n    /root/src/moduleB.d.ts\n    /root/moduleB.ts\n    /root/moduleB.d.ts\n    /moduleB.ts\n    /moduleB.d.ts\n    ```\n    \n\n### Node\n\n相对路径：\n\n1. 相对路径文件是否存在\n2. 如果不存在文件，检查是否有目录，如果有目录，检查是否【有package.json文件并且这个文件制定了一个main路径】，如果发现了package.json中有main路径，则会引用 检查目录的路径拼接main路径\n    \n    ```jsx\n    /root/src/moduleB/package.json\n    包含了{ \"main\": \"lib/mainModule.js\" }，\n    那么Node.js会引用/root/src/moduleB/lib/mainModule.js。\n    ```\n    \n3. 检查`/root/src/moduleB`目录是否包含一个`index.js`文件。 这个文件会被隐式地当作那个文件夹下的\"main\"模块。\n\n非相对路径:\n\n1. 会在node_modules里面查找\n2. 假设require(”moduleB”)\n3. 首先会查找 /node_modules/moduleB.js\n4. /node_modules/moduleB/package.json(如果指定了main属性)\n5. /node_module/moduleB/index.js\n6. 之后向上跳目录\n\n![Untitled](Untitled.png)\n\n## 附加的模块解析标记\n\n由于工程源码和输出结构不同，需要经过转换。\n\n包括把ts编译为js，将不同位置的依赖拷贝至一个输出位置。\n\n 最终结果就是：\n\n运行时的模块名与包含它们声明的源文件里的模块名不同。 或者最终输出文件里的模块路径与编译时的源文件路径不同了。\n\n### Base URL\n\n设置`baseUrl`来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于`baseUrl`。\n\n*baseUrl*的值由以下两者之一决定：\n\n- 命令行中*baseUrl*的值（如果给定的路径是相对的，那么将相对于当前路径进行计算）\n- ‘tsconfig.json’里的*baseUrl*属性（如果给定的路径是相对的，那么将相对于‘tsconfig.json’路径进行计算）\n\n注意相对模块的导入不会被设置的`baseUrl`所影响，因为它们总是相对于导入它们的文件\n\n### 路径映射\n\nTypeScript编译器通过使用`tsconfig.json`文件里的`\"paths\"`来支持的声明映射。 下面是一个如何指定`jquery`的`\"paths\"`的例子。\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // This must be specified if \"paths\" is.\n    \"paths\": {\n      \"jquery\": [\"node_modules/jquery/dist/jquery\"] // 此处映射是相对于\"baseUrl\"\n    }\n  }\n}\n```\n\npath是相对于baseUrl的\n\n(如果是非相对名，则直接拼接，如果是相对名，则进行对应的改变)\n\n# 装饰器\n\n装饰器是实验特性\n\n启用:\n\n```jsx\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"experimentalDecorators\": true\n    }\n}\n```\n\n定义：它能够被附加到[类声明](https://www.tslang.cn/docs/handbook/decorators.html#class-decorators)，[方法](https://www.tslang.cn/docs/handbook/decorators.html#method-decorators)，[访问符](https://www.tslang.cn/docs/handbook/decorators.html#accessor-decorators)，[属性](https://www.tslang.cn/docs/handbook/decorators.html#property-decorators)或[参数](https://www.tslang.cn/docs/handbook/decorators.html#parameter-decorators)上。 装饰器使用 `@expression`这种形式，`expression`求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。\n\n### 装饰器工厂\n\n![Untitled](Untitled1.png)\n\n### 类装饰器\n\n![Untitled](Untitled2.png)\n\n1. target此处指Person\n\n### 属性装饰器\n\n![Untitled](Untitled3.png)\n\n1. target为Person类\n2. attr 为 ”name“\n\n### 方法装饰器\n\n![Untitled](Untitled4.png)\n\n1. target为Person类\n2. propertyKey为方法的属性键值\n3. descriptor为属性描述\n\n![Untitled](Untitled5.png)\n\n### 装饰器组合\n\n多个装饰器应用在一个生命上时\n\n1. 由上到下对装饰器表达式求知（即获取返回的函数部分）\n2. 由下到上把函数结果进行调用\n\n```tsx\nfunction f() {\n    console.log(\"f(): evaluated\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"f(): called\");\n    }\n}\n\nfunction g() {\n    console.log(\"g(): evaluated\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"g(): called\");\n    }\n}\n\nclass C {\n    @f()\n    @g()\n    method() {}\n}\n\n```\n\n在控制台里会打印出如下结果：\n\n```\nf(): evaluated\ng(): evaluated\ng(): called\nf(): called\n```\n\n### 装饰器求值\n\n原则：由内到外，由小到大\n\n类中不同声明上的装饰器将按以下规定的顺序应用：\n\n1. *参数装饰器*，然后依次是*方法装饰器*，*访问符装饰器*，或*属性装饰器*应用到每个实例成员。\n2. *参数装饰器*，然后依次是*方法装饰器*，*访问符装饰器*，或*属性装饰器*应用到每个静态成员。\n3. *参数装饰器*应用到构造函数。\n4. *类装饰器*应用到类。\n\n# Declare\n\n告诉编译器这个变量是存在的\n\n应用于一些不使用ts的库，但是需要引用到ts里面，需要有一个类型，就可以用declare来声明一下\n\n```jsx\n//index.js\nfunction showMessage(message){\n\tconsole.log(message)\n}\n\n//test.ts\nshowMessage(\"name\")\n\n//common.d.ts\n//如果删去则报错\ndeclare showMessage(message:string):void\n```\n\n引入类型描述的时候会自动引入对应的js的文件\n\n### 同名引入\n\n- 对于自己写的模块，会默认引用与该文件同名的类型声明文件。比如有一个foo.js和foo.d.ts，如果使用import会自动由foo.d.ts提供\n\n### 自动引用\n\n- 第三方库都有@types/xxx ，declare文件\n    \n    ![Untitled](Untitled6.png)\n    \n    配置这个，type在的目录\n    \n\n## declare module、namespace\n\n```jsx\ndeclare module \"jquery\" {\n\texport let fn:string\n}\n\njquery.fn\n```\n\n## 为外部属性新增\n\n```jsx\n//index.ts\nexport interface A {\n\tvalue1:string\n}\n\n//test.ts\nimport {A} from \"index.ts\"\ndeclare module \"index.ts\" {\n\tinterface A {\n\t\tvalue2:string\n\t}\n}\n\n//接口合并\n```\n\n# 三斜线指令\n\n包含单个XML标签的单行注释，注释的内容会作为编译器指令使用\n\n只能仿造包含他的***文件的最顶端***\n\n其前面只能出现单行或者多行注释\n\n如果前面有语句或声明，那么会被当做普通的单行注释\n\n```jsx\n/// <reference path=\"...\" />\n```\n\n专门用来引用.d.ts文件\n\n```jsx\n/// <reference types=\"...\" />\n```\n\n### 预处理\n\n解析所有三斜线引用的指令，把对应的文件添加到编译的过程中\n\n路径是相对于包含他的文件的\n\n### 如果引用的的文件不存在会报错\n\n### —noResolve\n\n如果使用了**noResolve**，三斜线会被忽略\n\n```jsx\n/// <reference path=\"...\" /> 声明对文件的依赖\n\n/// <reference types=\"node\" /> 声明对包的依赖\n//表明使用了@types/node/index.d.ts里面生命的名字\n\n```\n\n在编译阶段生成的声明文件，编译器会自动添加  **/// <reference types=\"node\" />**\n\n![Untitled](Untitled6.png)\n\n配置这个，type在的目录\n","source":"_posts/13.2TypeScript.md","raw":"---\ntitle: TypeScript Part2\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription: 总结了TypeScript的模块、装饰器、声明、三斜线指令等内容, 对上一篇博客进行了补充\ntop_img:\ntags:\n- 本手\n---\n\n# TypeScript2\n\n# 模块\n\n1. m模块在自身作用域执行，不是全局作用域\n2. 除非使用export导出，否则定义在内部的变量都是不可见的\n3. 模块使用***模块加载器***导入其他模块，\n    1. 模块加载器用于在执行此模块代码之前去查找并执行这个模块所有的依赖\n    2. JavaScript模块加载器是服务于Node.js的[CommonJS](https://en.wikipedia.org/wiki/CommonJS)和服务于Web应用的[Require.js](http://requirejs.org/)。\n4. 任何包含顶级import或者export的文件都为一个模块，如果都不带，那么内容为全局可见的\n\n## 导出\n\n### 导出语句\n\n```jsx\nexport { ZipCodeValidator };\nexport { ZipCodeValidator as mainValidator };\n```\n\n使用as可以重命名\n\n### 重新导出\n\n```jsx\nexport class ParseIntBasedZipCodeValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && parseInt(s).toString() === s;\n    }\n}\n\n// 导出原先的验证器但做了重命名\nexport {ZipCodeValidator as RegExpBasedZipCodeValidator} from \"./ZipCodeValidator\";\n```\n\n1. 不会在当前模块导入或者定义一个新的局部变量\n\n## 导入\n\n```jsx\nimport { ZipCodeValidator } from \"./ZipCodeValidator\"; //普通导入\nimport { ZipCodeValidator as ZCV } from \"./ZipCodeValidator\"; //重命名\n\nimport * as validator from \"./ZipCodeValidator\"; //导入全部，用validator代表这个模块\nlet myValidator = new validator.ZipCodeValidator();\n```\n\n## 默认导出\n\n1. 类和函数声明可以直接被标记为默认导出。 标记为默认导出的类和函数的名字是可以省略的。\n    \n    ```jsx\n    const numberRegexp = /^[0-9]+$/;\n    \n    export default function (s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n    ```\n    \n2. default的导出可以是一个值\n\n## **`export =` 和 `import = require()`**\n\n1. 在CommonJS和AMD的环境里有一个exports变量，包含着一个模块的所有导出内容\n2. exports可以被赋值为一个对象，类似于es6的默认导出\n3. 为了兼容CommonJS和AMD提供了export = 语法\n4. 若使用`export =`导出一个模块，则必须使用TypeScript的特定语法`import module = require(\"module\")`来导入此模块。\n\n```jsx\n//test.ts\nexport = {\n    hello: 'world'\n}\n\n///导入\nimport zip = require(\"./test.ts\");\n```\n\n# 命名空间 nameSpace\n\n“内部模块”\n\n1. 提取逻辑，记录的同时不担心与其他对象产生命名冲突\n2. 相同namespace即使在不同文件也是同一个明明空间，与接口的**合并**同工\n3. 简化命名空间操作: **import q = x.y.z** （用q代表x.y.z，起个名字）\n\n# 模块和命名空间的区别\n\n1. 模块有自己的作用域，只有被导出才能被其他文件引用。namespace可以在全局引用，即使不导出\n    \n    ```jsx\n    // global.ts\n    namespace MyNamespace {\n        export class MyClass {\n            constructor(public name: string) {}\n        }\n    }\n    \n    // main.ts\n    let instance = new MyNamespace.MyClass('example');\n    ```\n    \n2. 模块是文件级别的，用import和export进行管理，namespace在全局通过代码自行组织\n3. 使用场景：模块是 TypeScript 和 ES6 中推荐的组织代码的方式，适用于大型项目。而命名空间主要用于组织全局变量，适用于较小的项目或者为了向后兼容\n\n*~~ps:可以把模块比作每个城池，命名空间比作教会~~*\n\n# 模块解析\n\n### 相对导入\n\n1. 以 /   ./   ../ 开头的\n2. 相对于导入他的文件\n\n### 非相对\n\n1. 所有其它形式的导入\n2. 相对于baseUrl或者**路径映射**\n\n## 模块解析策略\n\n### Classic\n\n1. 之前的默认解析策略，为了向后兼容而保留\n2. 相对导入模块相对于导入他的文件解析\n    \n    ```jsx\n    /root/src/folder/A.ts\n    \n    /root/src/folder/moduleB.ts\n    /root/src/folder/moduleB.d.ts\n    ```\n    \n3. 非相对模块的导入，编译器会从包含文件的目录依次向上级目录遍历\n    \n    ```jsx\n    //有一个对moduleB的非相对导入\n    import { b } from \"moduleB\"\n    //它是在/root/src/folder/A.ts文件里，会以如下的方式来定位\"moduleB\"：\n    \n    /root/src/folder/moduleB.ts\n    /root/src/folder/moduleB.d.ts\n    /root/src/moduleB.ts\n    /root/src/moduleB.d.ts\n    /root/moduleB.ts\n    /root/moduleB.d.ts\n    /moduleB.ts\n    /moduleB.d.ts\n    ```\n    \n\n### Node\n\n相对路径：\n\n1. 相对路径文件是否存在\n2. 如果不存在文件，检查是否有目录，如果有目录，检查是否【有package.json文件并且这个文件制定了一个main路径】，如果发现了package.json中有main路径，则会引用 检查目录的路径拼接main路径\n    \n    ```jsx\n    /root/src/moduleB/package.json\n    包含了{ \"main\": \"lib/mainModule.js\" }，\n    那么Node.js会引用/root/src/moduleB/lib/mainModule.js。\n    ```\n    \n3. 检查`/root/src/moduleB`目录是否包含一个`index.js`文件。 这个文件会被隐式地当作那个文件夹下的\"main\"模块。\n\n非相对路径:\n\n1. 会在node_modules里面查找\n2. 假设require(”moduleB”)\n3. 首先会查找 /node_modules/moduleB.js\n4. /node_modules/moduleB/package.json(如果指定了main属性)\n5. /node_module/moduleB/index.js\n6. 之后向上跳目录\n\n![Untitled](Untitled.png)\n\n## 附加的模块解析标记\n\n由于工程源码和输出结构不同，需要经过转换。\n\n包括把ts编译为js，将不同位置的依赖拷贝至一个输出位置。\n\n 最终结果就是：\n\n运行时的模块名与包含它们声明的源文件里的模块名不同。 或者最终输出文件里的模块路径与编译时的源文件路径不同了。\n\n### Base URL\n\n设置`baseUrl`来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于`baseUrl`。\n\n*baseUrl*的值由以下两者之一决定：\n\n- 命令行中*baseUrl*的值（如果给定的路径是相对的，那么将相对于当前路径进行计算）\n- ‘tsconfig.json’里的*baseUrl*属性（如果给定的路径是相对的，那么将相对于‘tsconfig.json’路径进行计算）\n\n注意相对模块的导入不会被设置的`baseUrl`所影响，因为它们总是相对于导入它们的文件\n\n### 路径映射\n\nTypeScript编译器通过使用`tsconfig.json`文件里的`\"paths\"`来支持的声明映射。 下面是一个如何指定`jquery`的`\"paths\"`的例子。\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\", // This must be specified if \"paths\" is.\n    \"paths\": {\n      \"jquery\": [\"node_modules/jquery/dist/jquery\"] // 此处映射是相对于\"baseUrl\"\n    }\n  }\n}\n```\n\npath是相对于baseUrl的\n\n(如果是非相对名，则直接拼接，如果是相对名，则进行对应的改变)\n\n# 装饰器\n\n装饰器是实验特性\n\n启用:\n\n```jsx\n{\n    \"compilerOptions\": {\n        \"target\": \"ES5\",\n        \"experimentalDecorators\": true\n    }\n}\n```\n\n定义：它能够被附加到[类声明](https://www.tslang.cn/docs/handbook/decorators.html#class-decorators)，[方法](https://www.tslang.cn/docs/handbook/decorators.html#method-decorators)，[访问符](https://www.tslang.cn/docs/handbook/decorators.html#accessor-decorators)，[属性](https://www.tslang.cn/docs/handbook/decorators.html#property-decorators)或[参数](https://www.tslang.cn/docs/handbook/decorators.html#parameter-decorators)上。 装饰器使用 `@expression`这种形式，`expression`求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。\n\n### 装饰器工厂\n\n![Untitled](Untitled1.png)\n\n### 类装饰器\n\n![Untitled](Untitled2.png)\n\n1. target此处指Person\n\n### 属性装饰器\n\n![Untitled](Untitled3.png)\n\n1. target为Person类\n2. attr 为 ”name“\n\n### 方法装饰器\n\n![Untitled](Untitled4.png)\n\n1. target为Person类\n2. propertyKey为方法的属性键值\n3. descriptor为属性描述\n\n![Untitled](Untitled5.png)\n\n### 装饰器组合\n\n多个装饰器应用在一个生命上时\n\n1. 由上到下对装饰器表达式求知（即获取返回的函数部分）\n2. 由下到上把函数结果进行调用\n\n```tsx\nfunction f() {\n    console.log(\"f(): evaluated\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"f(): called\");\n    }\n}\n\nfunction g() {\n    console.log(\"g(): evaluated\");\n    return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n        console.log(\"g(): called\");\n    }\n}\n\nclass C {\n    @f()\n    @g()\n    method() {}\n}\n\n```\n\n在控制台里会打印出如下结果：\n\n```\nf(): evaluated\ng(): evaluated\ng(): called\nf(): called\n```\n\n### 装饰器求值\n\n原则：由内到外，由小到大\n\n类中不同声明上的装饰器将按以下规定的顺序应用：\n\n1. *参数装饰器*，然后依次是*方法装饰器*，*访问符装饰器*，或*属性装饰器*应用到每个实例成员。\n2. *参数装饰器*，然后依次是*方法装饰器*，*访问符装饰器*，或*属性装饰器*应用到每个静态成员。\n3. *参数装饰器*应用到构造函数。\n4. *类装饰器*应用到类。\n\n# Declare\n\n告诉编译器这个变量是存在的\n\n应用于一些不使用ts的库，但是需要引用到ts里面，需要有一个类型，就可以用declare来声明一下\n\n```jsx\n//index.js\nfunction showMessage(message){\n\tconsole.log(message)\n}\n\n//test.ts\nshowMessage(\"name\")\n\n//common.d.ts\n//如果删去则报错\ndeclare showMessage(message:string):void\n```\n\n引入类型描述的时候会自动引入对应的js的文件\n\n### 同名引入\n\n- 对于自己写的模块，会默认引用与该文件同名的类型声明文件。比如有一个foo.js和foo.d.ts，如果使用import会自动由foo.d.ts提供\n\n### 自动引用\n\n- 第三方库都有@types/xxx ，declare文件\n    \n    ![Untitled](Untitled6.png)\n    \n    配置这个，type在的目录\n    \n\n## declare module、namespace\n\n```jsx\ndeclare module \"jquery\" {\n\texport let fn:string\n}\n\njquery.fn\n```\n\n## 为外部属性新增\n\n```jsx\n//index.ts\nexport interface A {\n\tvalue1:string\n}\n\n//test.ts\nimport {A} from \"index.ts\"\ndeclare module \"index.ts\" {\n\tinterface A {\n\t\tvalue2:string\n\t}\n}\n\n//接口合并\n```\n\n# 三斜线指令\n\n包含单个XML标签的单行注释，注释的内容会作为编译器指令使用\n\n只能仿造包含他的***文件的最顶端***\n\n其前面只能出现单行或者多行注释\n\n如果前面有语句或声明，那么会被当做普通的单行注释\n\n```jsx\n/// <reference path=\"...\" />\n```\n\n专门用来引用.d.ts文件\n\n```jsx\n/// <reference types=\"...\" />\n```\n\n### 预处理\n\n解析所有三斜线引用的指令，把对应的文件添加到编译的过程中\n\n路径是相对于包含他的文件的\n\n### 如果引用的的文件不存在会报错\n\n### —noResolve\n\n如果使用了**noResolve**，三斜线会被忽略\n\n```jsx\n/// <reference path=\"...\" /> 声明对文件的依赖\n\n/// <reference types=\"node\" /> 声明对包的依赖\n//表明使用了@types/node/index.d.ts里面生命的名字\n\n```\n\n在编译阶段生成的声明文件，编译器会自动添加  **/// <reference types=\"node\" />**\n\n![Untitled](Untitled6.png)\n\n配置这个，type在的目录\n","slug":"13.2TypeScript","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gdx000dzw6kbpdiaoym","content":"<h1 id=\"TypeScript2\"><a href=\"#TypeScript2\" class=\"headerlink\" title=\"TypeScript2\"></a>TypeScript2</h1><h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><ol>\n<li>m模块在自身作用域执行，不是全局作用域</li>\n<li>除非使用export导出，否则定义在内部的变量都是不可见的</li>\n<li>模块使用<em><strong>模块加载器</strong></em>导入其他模块，<ol>\n<li>模块加载器用于在执行此模块代码之前去查找并执行这个模块所有的依赖</li>\n<li>JavaScript模块加载器是服务于Node.js的<a href=\"https://en.wikipedia.org/wiki/CommonJS\">CommonJS</a>和服务于Web应用的<a href=\"http://requirejs.org/\">Require.js</a>。</li>\n</ol>\n</li>\n<li>任何包含顶级import或者export的文件都为一个模块，如果都不带，那么内容为全局可见的</li>\n</ol>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><h3 id=\"导出语句\"><a href=\"#导出语句\" class=\"headerlink\" title=\"导出语句\"></a>导出语句</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> <span class=\"keyword\">as</span> mainValidator &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用as可以重命名</p>\n<h3 id=\"重新导出\"><a href=\"#重新导出\" class=\"headerlink\" title=\"重新导出\"></a>重新导出</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParseIntBasedZipCodeValidator</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">isAcceptable</span>(<span class=\"params\">s: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.<span class=\"property\">length</span> === <span class=\"number\">5</span> &amp;&amp; <span class=\"built_in\">parseInt</span>(s).<span class=\"title function_\">toString</span>() === s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出原先的验证器但做了重命名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"title class_\">ZipCodeValidator</span> <span class=\"keyword\">as</span> <span class=\"title class_\">RegExpBasedZipCodeValidator</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不会在当前模块导入或者定义一个新的局部变量</li>\n</ol>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>; <span class=\"comment\">//普通导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> <span class=\"keyword\">as</span> <span class=\"variable constant_\">ZCV</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>; <span class=\"comment\">//重命名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> validator <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>; <span class=\"comment\">//导入全部，用validator代表这个模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myValidator = <span class=\"keyword\">new</span> validator.<span class=\"title class_\">ZipCodeValidator</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h2><ol>\n<li><p>类和函数声明可以直接被标记为默认导出。 标记为默认导出的类和函数的名字是可以省略的。</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">s: string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"property\">length</span> === <span class=\"number\">5</span> &amp;&amp; numberRegexp.<span class=\"title function_\">test</span>(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>default的导出可以是一个值</p>\n</li>\n</ol>\n<h2 id=\"export-和-import-require\"><a href=\"#export-和-import-require\" class=\"headerlink\" title=\"export = 和 import = require()\"></a><strong><code>export =</code> 和 <code>import = require()</code></strong></h2><ol>\n<li>在CommonJS和AMD的环境里有一个exports变量，包含着一个模块的所有导出内容</li>\n<li>exports可以被赋值为一个对象，类似于es6的默认导出</li>\n<li>为了兼容CommonJS和AMD提供了export &#x3D; 语法</li>\n<li>若使用<code>export =</code>导出一个模块，则必须使用TypeScript的特定语法<code>import module = require(&quot;module&quot;)</code>来导入此模块。</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">hello</span>: <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zip = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./test.ts&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"命名空间-nameSpace\"><a href=\"#命名空间-nameSpace\" class=\"headerlink\" title=\"命名空间 nameSpace\"></a>命名空间 nameSpace</h1><p>“内部模块”</p>\n<ol>\n<li>提取逻辑，记录的同时不担心与其他对象产生命名冲突</li>\n<li>相同namespace即使在不同文件也是同一个明明空间，与接口的<strong>合并</strong>同工</li>\n<li>简化命名空间操作: <strong>import q &#x3D; x.y.z</strong> （用q代表x.y.z，起个名字）</li>\n</ol>\n<h1 id=\"模块和命名空间的区别\"><a href=\"#模块和命名空间的区别\" class=\"headerlink\" title=\"模块和命名空间的区别\"></a>模块和命名空间的区别</h1><ol>\n<li><p>模块有自己的作用域，只有被导出才能被其他文件引用。namespace可以在全局引用，即使不导出</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global.ts</span></span><br><span class=\"line\">namespace <span class=\"title class_\">MyNamespace</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">public name: string</span>) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">MyNamespace</span>.<span class=\"title class_\">MyClass</span>(<span class=\"string\">&#x27;example&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模块是文件级别的，用import和export进行管理，namespace在全局通过代码自行组织</p>\n</li>\n<li><p>使用场景：模块是 TypeScript 和 ES6 中推荐的组织代码的方式，适用于大型项目。而命名空间主要用于组织全局变量，适用于较小的项目或者为了向后兼容</p>\n</li>\n</ol>\n<p><em><del>ps:可以把模块比作每个城池，命名空间比作教会</del></em></p>\n<h1 id=\"模块解析\"><a href=\"#模块解析\" class=\"headerlink\" title=\"模块解析\"></a>模块解析</h1><h3 id=\"相对导入\"><a href=\"#相对导入\" class=\"headerlink\" title=\"相对导入\"></a>相对导入</h3><ol>\n<li>以 &#x2F;   .&#x2F;   ..&#x2F; 开头的</li>\n<li>相对于导入他的文件</li>\n</ol>\n<h3 id=\"非相对\"><a href=\"#非相对\" class=\"headerlink\" title=\"非相对\"></a>非相对</h3><ol>\n<li>所有其它形式的导入</li>\n<li>相对于baseUrl或者<strong>路径映射</strong></li>\n</ol>\n<h2 id=\"模块解析策略\"><a href=\"#模块解析策略\" class=\"headerlink\" title=\"模块解析策略\"></a>模块解析策略</h2><h3 id=\"Classic\"><a href=\"#Classic\" class=\"headerlink\" title=\"Classic\"></a>Classic</h3><ol>\n<li><p>之前的默认解析策略，为了向后兼容而保留</p>\n</li>\n<li><p>相对导入模块相对于导入他的文件解析</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/src/folder/A.<span class=\"property\">ts</span></span><br><span class=\"line\"></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非相对模块的导入，编译器会从包含文件的目录依次向上级目录遍历</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有一个对moduleB的非相对导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;moduleB&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//它是在/root/src/folder/A.ts文件里，会以如下的方式来定位&quot;moduleB&quot;：</span></span><br><span class=\"line\"></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><p>相对路径：</p>\n<ol>\n<li><p>相对路径文件是否存在</p>\n</li>\n<li><p>如果不存在文件，检查是否有目录，如果有目录，检查是否【有package.json文件并且这个文件制定了一个main路径】，如果发现了package.json中有main路径，则会引用 检查目录的路径拼接main路径</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/src/moduleB/package.<span class=\"property\">json</span></span><br><span class=\"line\">包含了&#123; <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;lib/mainModule.js&quot;</span> &#125;，</span><br><span class=\"line\">那么<span class=\"title class_\">Node</span>.<span class=\"property\">js</span>会引用/root/src/moduleB/lib/mainModule.<span class=\"property\">js</span>。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查<code>/root/src/moduleB</code>目录是否包含一个<code>index.js</code>文件。 这个文件会被隐式地当作那个文件夹下的”main”模块。</p>\n</li>\n</ol>\n<p>非相对路径:</p>\n<ol>\n<li>会在node_modules里面查找</li>\n<li>假设require(”moduleB”)</li>\n<li>首先会查找 &#x2F;node_modules&#x2F;moduleB.js</li>\n<li>&#x2F;node_modules&#x2F;moduleB&#x2F;package.json(如果指定了main属性)</li>\n<li>&#x2F;node_module&#x2F;moduleB&#x2F;index.js</li>\n<li>之后向上跳目录</li>\n</ol>\n<p><img src=\"/2024/08/04/13.2TypeScript/Untitled.png\" alt=\"Untitled\"></p>\n<h2 id=\"附加的模块解析标记\"><a href=\"#附加的模块解析标记\" class=\"headerlink\" title=\"附加的模块解析标记\"></a>附加的模块解析标记</h2><p>由于工程源码和输出结构不同，需要经过转换。</p>\n<p>包括把ts编译为js，将不同位置的依赖拷贝至一个输出位置。</p>\n<p> 最终结果就是：</p>\n<p>运行时的模块名与包含它们声明的源文件里的模块名不同。 或者最终输出文件里的模块路径与编译时的源文件路径不同了。</p>\n<h3 id=\"Base-URL\"><a href=\"#Base-URL\" class=\"headerlink\" title=\"Base URL\"></a>Base URL</h3><p>设置<code>baseUrl</code>来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于<code>baseUrl</code>。</p>\n<p><em>baseUrl</em>的值由以下两者之一决定：</p>\n<ul>\n<li>命令行中<em>baseUrl</em>的值（如果给定的路径是相对的，那么将相对于当前路径进行计算）</li>\n<li>‘tsconfig.json’里的<em>baseUrl</em>属性（如果给定的路径是相对的，那么将相对于‘tsconfig.json’路径进行计算）</li>\n</ul>\n<p>注意相对模块的导入不会被设置的<code>baseUrl</code>所影响，因为它们总是相对于导入它们的文件</p>\n<h3 id=\"路径映射\"><a href=\"#路径映射\" class=\"headerlink\" title=\"路径映射\"></a>路径映射</h3><p>TypeScript编译器通过使用<code>tsconfig.json</code>文件里的<code>&quot;paths&quot;</code>来支持的声明映射。 下面是一个如何指定<code>jquery</code>的<code>&quot;paths&quot;</code>的例子。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// This must be specified if &quot;paths&quot; is.</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;jquery&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;node_modules/jquery/dist/jquery&quot;</span><span class=\"punctuation\">]</span> <span class=\"comment\">// 此处映射是相对于&quot;baseUrl&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>path是相对于baseUrl的</p>\n<p>(如果是非相对名，则直接拼接，如果是相对名，则进行对应的改变)</p>\n<h1 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h1><p>装饰器是实验特性</p>\n<p>启用:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;ES5&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;experimentalDecorators&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义：它能够被附加到<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#class-decorators\">类声明</a>，<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#method-decorators\">方法</a>，<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#accessor-decorators\">访问符</a>，<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#property-decorators\">属性</a>或<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#parameter-decorators\">参数</a>上。 装饰器使用 <code>@expression</code>这种形式，<code>expression</code>求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p>\n<h3 id=\"装饰器工厂\"><a href=\"#装饰器工厂\" class=\"headerlink\" title=\"装饰器工厂\"></a>装饰器工厂</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled1.png\" alt=\"Untitled\"></p>\n<h3 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled2.png\" alt=\"Untitled\"></p>\n<ol>\n<li>target此处指Person</li>\n</ol>\n<h3 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled3.png\" alt=\"Untitled\"></p>\n<ol>\n<li>target为Person类</li>\n<li>attr 为 ”name“</li>\n</ol>\n<h3 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled4.png\" alt=\"Untitled\"></p>\n<ol>\n<li>target为Person类</li>\n<li>propertyKey为方法的属性键值</li>\n<li>descriptor为属性描述</li>\n</ol>\n<p><img src=\"/2024/08/04/13.2TypeScript/Untitled5.png\" alt=\"Untitled\"></p>\n<h3 id=\"装饰器组合\"><a href=\"#装饰器组合\" class=\"headerlink\" title=\"装饰器组合\"></a>装饰器组合</h3><p>多个装饰器应用在一个生命上时</p>\n<ol>\n<li>由上到下对装饰器表达式求知（即获取返回的函数部分）</li>\n<li>由下到上把函数结果进行调用</li>\n</ol>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;f(): evaluated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;f(): called&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">g</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;g(): evaluated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;g(): called&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@f</span>()</span><br><span class=\"line\">    <span class=\"meta\">@g</span>()</span><br><span class=\"line\">    <span class=\"title function_\">method</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在控制台里会打印出如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(): evaluated</span><br><span class=\"line\">g(): evaluated</span><br><span class=\"line\">g(): called</span><br><span class=\"line\">f(): called</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"装饰器求值\"><a href=\"#装饰器求值\" class=\"headerlink\" title=\"装饰器求值\"></a>装饰器求值</h3><p>原则：由内到外，由小到大</p>\n<p>类中不同声明上的装饰器将按以下规定的顺序应用：</p>\n<ol>\n<li><em>参数装饰器</em>，然后依次是<em>方法装饰器</em>，<em>访问符装饰器</em>，或<em>属性装饰器</em>应用到每个实例成员。</li>\n<li><em>参数装饰器</em>，然后依次是<em>方法装饰器</em>，<em>访问符装饰器</em>，或<em>属性装饰器</em>应用到每个静态成员。</li>\n<li><em>参数装饰器</em>应用到构造函数。</li>\n<li><em>类装饰器</em>应用到类。</li>\n</ol>\n<h1 id=\"Declare\"><a href=\"#Declare\" class=\"headerlink\" title=\"Declare\"></a>Declare</h1><p>告诉编译器这个变量是存在的</p>\n<p>应用于一些不使用ts的库，但是需要引用到ts里面，需要有一个类型，就可以用declare来声明一下</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showMessage</span>(<span class=\"params\">message</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test.ts</span></span><br><span class=\"line\"><span class=\"title function_\">showMessage</span>(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//common.d.ts</span></span><br><span class=\"line\"><span class=\"comment\">//如果删去则报错</span></span><br><span class=\"line\">declare <span class=\"title function_\">showMessage</span>(<span class=\"attr\">message</span>:string):<span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n\n<p>引入类型描述的时候会自动引入对应的js的文件</p>\n<h3 id=\"同名引入\"><a href=\"#同名引入\" class=\"headerlink\" title=\"同名引入\"></a>同名引入</h3><ul>\n<li>对于自己写的模块，会默认引用与该文件同名的类型声明文件。比如有一个foo.js和foo.d.ts，如果使用import会自动由foo.d.ts提供</li>\n</ul>\n<h3 id=\"自动引用\"><a href=\"#自动引用\" class=\"headerlink\" title=\"自动引用\"></a>自动引用</h3><ul>\n<li><p>第三方库都有@types&#x2F;xxx ，declare文件</p>\n<p>  <img src=\"/2024/08/04/13.2TypeScript/Untitled6.png\" alt=\"Untitled\"></p>\n<p>  配置这个，type在的目录</p>\n</li>\n</ul>\n<h2 id=\"declare-module、namespace\"><a href=\"#declare-module、namespace\" class=\"headerlink\" title=\"declare module、namespace\"></a>declare module、namespace</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&quot;jquery&quot;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">let</span> <span class=\"attr\">fn</span>:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jquery.<span class=\"property\">fn</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为外部属性新增\"><a href=\"#为外部属性新增\" class=\"headerlink\" title=\"为外部属性新增\"></a>为外部属性新增</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface A &#123;</span><br><span class=\"line\">\t<span class=\"attr\">value1</span>:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;index.ts&quot;</span></span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&quot;index.ts&quot;</span> &#123;</span><br><span class=\"line\">\tinterface A &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">value2</span>:string</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口合并</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三斜线指令\"><a href=\"#三斜线指令\" class=\"headerlink\" title=\"三斜线指令\"></a>三斜线指令</h1><p>包含单个XML标签的单行注释，注释的内容会作为编译器指令使用</p>\n<p>只能仿造包含他的<em><strong>文件的最顶端</strong></em></p>\n<p>其前面只能出现单行或者多行注释</p>\n<p>如果前面有语句或声明，那么会被当做普通的单行注释</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;...&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>专门用来引用.d.ts文件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;...&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h3><p>解析所有三斜线引用的指令，把对应的文件添加到编译的过程中</p>\n<p>路径是相对于包含他的文件的</p>\n<h3 id=\"如果引用的的文件不存在会报错\"><a href=\"#如果引用的的文件不存在会报错\" class=\"headerlink\" title=\"如果引用的的文件不存在会报错\"></a>如果引用的的文件不存在会报错</h3><h3 id=\"—noResolve\"><a href=\"#—noResolve\" class=\"headerlink\" title=\"—noResolve\"></a>—noResolve</h3><p>如果使用了<strong>noResolve</strong>，三斜线会被忽略</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;...&quot; /&gt; 声明对文件的依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;node&quot; /&gt; 声明对包的依赖</span></span><br><span class=\"line\"><span class=\"comment\">//表明使用了@types/node/index.d.ts里面生命的名字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在编译阶段生成的声明文件，编译器会自动添加  <strong>&#x2F;&#x2F;&#x2F; <reference types=\"node\" /></strong></p>\n<p><img src=\"/2024/08/04/13.2TypeScript/Untitled6.png\" alt=\"Untitled\"></p>\n<p>配置这个，type在的目录</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"TypeScript2\"><a href=\"#TypeScript2\" class=\"headerlink\" title=\"TypeScript2\"></a>TypeScript2</h1><h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><ol>\n<li>m模块在自身作用域执行，不是全局作用域</li>\n<li>除非使用export导出，否则定义在内部的变量都是不可见的</li>\n<li>模块使用<em><strong>模块加载器</strong></em>导入其他模块，<ol>\n<li>模块加载器用于在执行此模块代码之前去查找并执行这个模块所有的依赖</li>\n<li>JavaScript模块加载器是服务于Node.js的<a href=\"https://en.wikipedia.org/wiki/CommonJS\">CommonJS</a>和服务于Web应用的<a href=\"http://requirejs.org/\">Require.js</a>。</li>\n</ol>\n</li>\n<li>任何包含顶级import或者export的文件都为一个模块，如果都不带，那么内容为全局可见的</li>\n</ol>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><h3 id=\"导出语句\"><a href=\"#导出语句\" class=\"headerlink\" title=\"导出语句\"></a>导出语句</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> <span class=\"keyword\">as</span> mainValidator &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用as可以重命名</p>\n<h3 id=\"重新导出\"><a href=\"#重新导出\" class=\"headerlink\" title=\"重新导出\"></a>重新导出</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParseIntBasedZipCodeValidator</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">isAcceptable</span>(<span class=\"params\">s: string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.<span class=\"property\">length</span> === <span class=\"number\">5</span> &amp;&amp; <span class=\"built_in\">parseInt</span>(s).<span class=\"title function_\">toString</span>() === s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出原先的验证器但做了重命名</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;<span class=\"title class_\">ZipCodeValidator</span> <span class=\"keyword\">as</span> <span class=\"title class_\">RegExpBasedZipCodeValidator</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>不会在当前模块导入或者定义一个新的局部变量</li>\n</ol>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>; <span class=\"comment\">//普通导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ZipCodeValidator</span> <span class=\"keyword\">as</span> <span class=\"variable constant_\">ZCV</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>; <span class=\"comment\">//重命名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> validator <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ZipCodeValidator&quot;</span>; <span class=\"comment\">//导入全部，用validator代表这个模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myValidator = <span class=\"keyword\">new</span> validator.<span class=\"title class_\">ZipCodeValidator</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h2><ol>\n<li><p>类和函数声明可以直接被标记为默认导出。 标记为默认导出的类和函数的名字是可以省略的。</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">s: string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"property\">length</span> === <span class=\"number\">5</span> &amp;&amp; numberRegexp.<span class=\"title function_\">test</span>(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>default的导出可以是一个值</p>\n</li>\n</ol>\n<h2 id=\"export-和-import-require\"><a href=\"#export-和-import-require\" class=\"headerlink\" title=\"export = 和 import = require()\"></a><strong><code>export =</code> 和 <code>import = require()</code></strong></h2><ol>\n<li>在CommonJS和AMD的环境里有一个exports变量，包含着一个模块的所有导出内容</li>\n<li>exports可以被赋值为一个对象，类似于es6的默认导出</li>\n<li>为了兼容CommonJS和AMD提供了export &#x3D; 语法</li>\n<li>若使用<code>export =</code>导出一个模块，则必须使用TypeScript的特定语法<code>import module = require(&quot;module&quot;)</code>来导入此模块。</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">hello</span>: <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zip = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./test.ts&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"命名空间-nameSpace\"><a href=\"#命名空间-nameSpace\" class=\"headerlink\" title=\"命名空间 nameSpace\"></a>命名空间 nameSpace</h1><p>“内部模块”</p>\n<ol>\n<li>提取逻辑，记录的同时不担心与其他对象产生命名冲突</li>\n<li>相同namespace即使在不同文件也是同一个明明空间，与接口的<strong>合并</strong>同工</li>\n<li>简化命名空间操作: <strong>import q &#x3D; x.y.z</strong> （用q代表x.y.z，起个名字）</li>\n</ol>\n<h1 id=\"模块和命名空间的区别\"><a href=\"#模块和命名空间的区别\" class=\"headerlink\" title=\"模块和命名空间的区别\"></a>模块和命名空间的区别</h1><ol>\n<li><p>模块有自己的作用域，只有被导出才能被其他文件引用。namespace可以在全局引用，即使不导出</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global.ts</span></span><br><span class=\"line\">namespace <span class=\"title class_\">MyNamespace</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">public name: string</span>) &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">MyNamespace</span>.<span class=\"title class_\">MyClass</span>(<span class=\"string\">&#x27;example&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模块是文件级别的，用import和export进行管理，namespace在全局通过代码自行组织</p>\n</li>\n<li><p>使用场景：模块是 TypeScript 和 ES6 中推荐的组织代码的方式，适用于大型项目。而命名空间主要用于组织全局变量，适用于较小的项目或者为了向后兼容</p>\n</li>\n</ol>\n<p><em><del>ps:可以把模块比作每个城池，命名空间比作教会</del></em></p>\n<h1 id=\"模块解析\"><a href=\"#模块解析\" class=\"headerlink\" title=\"模块解析\"></a>模块解析</h1><h3 id=\"相对导入\"><a href=\"#相对导入\" class=\"headerlink\" title=\"相对导入\"></a>相对导入</h3><ol>\n<li>以 &#x2F;   .&#x2F;   ..&#x2F; 开头的</li>\n<li>相对于导入他的文件</li>\n</ol>\n<h3 id=\"非相对\"><a href=\"#非相对\" class=\"headerlink\" title=\"非相对\"></a>非相对</h3><ol>\n<li>所有其它形式的导入</li>\n<li>相对于baseUrl或者<strong>路径映射</strong></li>\n</ol>\n<h2 id=\"模块解析策略\"><a href=\"#模块解析策略\" class=\"headerlink\" title=\"模块解析策略\"></a>模块解析策略</h2><h3 id=\"Classic\"><a href=\"#Classic\" class=\"headerlink\" title=\"Classic\"></a>Classic</h3><ol>\n<li><p>之前的默认解析策略，为了向后兼容而保留</p>\n</li>\n<li><p>相对导入模块相对于导入他的文件解析</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/src/folder/A.<span class=\"property\">ts</span></span><br><span class=\"line\"></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非相对模块的导入，编译器会从包含文件的目录依次向上级目录遍历</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有一个对moduleB的非相对导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; b &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;moduleB&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//它是在/root/src/folder/A.ts文件里，会以如下的方式来定位&quot;moduleB&quot;：</span></span><br><span class=\"line\"></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/folder/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/src/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/root/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br><span class=\"line\">/moduleB.<span class=\"property\">ts</span></span><br><span class=\"line\">/moduleB.<span class=\"property\">d</span>.<span class=\"property\">ts</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><p>相对路径：</p>\n<ol>\n<li><p>相对路径文件是否存在</p>\n</li>\n<li><p>如果不存在文件，检查是否有目录，如果有目录，检查是否【有package.json文件并且这个文件制定了一个main路径】，如果发现了package.json中有main路径，则会引用 检查目录的路径拼接main路径</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/src/moduleB/package.<span class=\"property\">json</span></span><br><span class=\"line\">包含了&#123; <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;lib/mainModule.js&quot;</span> &#125;，</span><br><span class=\"line\">那么<span class=\"title class_\">Node</span>.<span class=\"property\">js</span>会引用/root/src/moduleB/lib/mainModule.<span class=\"property\">js</span>。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查<code>/root/src/moduleB</code>目录是否包含一个<code>index.js</code>文件。 这个文件会被隐式地当作那个文件夹下的”main”模块。</p>\n</li>\n</ol>\n<p>非相对路径:</p>\n<ol>\n<li>会在node_modules里面查找</li>\n<li>假设require(”moduleB”)</li>\n<li>首先会查找 &#x2F;node_modules&#x2F;moduleB.js</li>\n<li>&#x2F;node_modules&#x2F;moduleB&#x2F;package.json(如果指定了main属性)</li>\n<li>&#x2F;node_module&#x2F;moduleB&#x2F;index.js</li>\n<li>之后向上跳目录</li>\n</ol>\n<p><img src=\"/2024/08/04/13.2TypeScript/Untitled.png\" alt=\"Untitled\"></p>\n<h2 id=\"附加的模块解析标记\"><a href=\"#附加的模块解析标记\" class=\"headerlink\" title=\"附加的模块解析标记\"></a>附加的模块解析标记</h2><p>由于工程源码和输出结构不同，需要经过转换。</p>\n<p>包括把ts编译为js，将不同位置的依赖拷贝至一个输出位置。</p>\n<p> 最终结果就是：</p>\n<p>运行时的模块名与包含它们声明的源文件里的模块名不同。 或者最终输出文件里的模块路径与编译时的源文件路径不同了。</p>\n<h3 id=\"Base-URL\"><a href=\"#Base-URL\" class=\"headerlink\" title=\"Base URL\"></a>Base URL</h3><p>设置<code>baseUrl</code>来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于<code>baseUrl</code>。</p>\n<p><em>baseUrl</em>的值由以下两者之一决定：</p>\n<ul>\n<li>命令行中<em>baseUrl</em>的值（如果给定的路径是相对的，那么将相对于当前路径进行计算）</li>\n<li>‘tsconfig.json’里的<em>baseUrl</em>属性（如果给定的路径是相对的，那么将相对于‘tsconfig.json’路径进行计算）</li>\n</ul>\n<p>注意相对模块的导入不会被设置的<code>baseUrl</code>所影响，因为它们总是相对于导入它们的文件</p>\n<h3 id=\"路径映射\"><a href=\"#路径映射\" class=\"headerlink\" title=\"路径映射\"></a>路径映射</h3><p>TypeScript编译器通过使用<code>tsconfig.json</code>文件里的<code>&quot;paths&quot;</code>来支持的声明映射。 下面是一个如何指定<code>jquery</code>的<code>&quot;paths&quot;</code>的例子。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// This must be specified if &quot;paths&quot; is.</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;jquery&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;node_modules/jquery/dist/jquery&quot;</span><span class=\"punctuation\">]</span> <span class=\"comment\">// 此处映射是相对于&quot;baseUrl&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>path是相对于baseUrl的</p>\n<p>(如果是非相对名，则直接拼接，如果是相对名，则进行对应的改变)</p>\n<h1 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h1><p>装饰器是实验特性</p>\n<p>启用:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;ES5&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;experimentalDecorators&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义：它能够被附加到<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#class-decorators\">类声明</a>，<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#method-decorators\">方法</a>，<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#accessor-decorators\">访问符</a>，<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#property-decorators\">属性</a>或<a href=\"https://www.tslang.cn/docs/handbook/decorators.html#parameter-decorators\">参数</a>上。 装饰器使用 <code>@expression</code>这种形式，<code>expression</code>求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p>\n<h3 id=\"装饰器工厂\"><a href=\"#装饰器工厂\" class=\"headerlink\" title=\"装饰器工厂\"></a>装饰器工厂</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled1.png\" alt=\"Untitled\"></p>\n<h3 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled2.png\" alt=\"Untitled\"></p>\n<ol>\n<li>target此处指Person</li>\n</ol>\n<h3 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled3.png\" alt=\"Untitled\"></p>\n<ol>\n<li>target为Person类</li>\n<li>attr 为 ”name“</li>\n</ol>\n<h3 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h3><p><img src=\"/2024/08/04/13.2TypeScript/Untitled4.png\" alt=\"Untitled\"></p>\n<ol>\n<li>target为Person类</li>\n<li>propertyKey为方法的属性键值</li>\n<li>descriptor为属性描述</li>\n</ol>\n<p><img src=\"/2024/08/04/13.2TypeScript/Untitled5.png\" alt=\"Untitled\"></p>\n<h3 id=\"装饰器组合\"><a href=\"#装饰器组合\" class=\"headerlink\" title=\"装饰器组合\"></a>装饰器组合</h3><p>多个装饰器应用在一个生命上时</p>\n<ol>\n<li>由上到下对装饰器表达式求知（即获取返回的函数部分）</li>\n<li>由下到上把函数结果进行调用</li>\n</ol>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;f(): evaluated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;f(): called&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">g</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;g(): evaluated&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">target, propertyKey: <span class=\"built_in\">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;g(): called&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@f</span>()</span><br><span class=\"line\">    <span class=\"meta\">@g</span>()</span><br><span class=\"line\">    <span class=\"title function_\">method</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在控制台里会打印出如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(): evaluated</span><br><span class=\"line\">g(): evaluated</span><br><span class=\"line\">g(): called</span><br><span class=\"line\">f(): called</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"装饰器求值\"><a href=\"#装饰器求值\" class=\"headerlink\" title=\"装饰器求值\"></a>装饰器求值</h3><p>原则：由内到外，由小到大</p>\n<p>类中不同声明上的装饰器将按以下规定的顺序应用：</p>\n<ol>\n<li><em>参数装饰器</em>，然后依次是<em>方法装饰器</em>，<em>访问符装饰器</em>，或<em>属性装饰器</em>应用到每个实例成员。</li>\n<li><em>参数装饰器</em>，然后依次是<em>方法装饰器</em>，<em>访问符装饰器</em>，或<em>属性装饰器</em>应用到每个静态成员。</li>\n<li><em>参数装饰器</em>应用到构造函数。</li>\n<li><em>类装饰器</em>应用到类。</li>\n</ol>\n<h1 id=\"Declare\"><a href=\"#Declare\" class=\"headerlink\" title=\"Declare\"></a>Declare</h1><p>告诉编译器这个变量是存在的</p>\n<p>应用于一些不使用ts的库，但是需要引用到ts里面，需要有一个类型，就可以用declare来声明一下</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showMessage</span>(<span class=\"params\">message</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test.ts</span></span><br><span class=\"line\"><span class=\"title function_\">showMessage</span>(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//common.d.ts</span></span><br><span class=\"line\"><span class=\"comment\">//如果删去则报错</span></span><br><span class=\"line\">declare <span class=\"title function_\">showMessage</span>(<span class=\"attr\">message</span>:string):<span class=\"keyword\">void</span></span><br></pre></td></tr></table></figure>\n\n<p>引入类型描述的时候会自动引入对应的js的文件</p>\n<h3 id=\"同名引入\"><a href=\"#同名引入\" class=\"headerlink\" title=\"同名引入\"></a>同名引入</h3><ul>\n<li>对于自己写的模块，会默认引用与该文件同名的类型声明文件。比如有一个foo.js和foo.d.ts，如果使用import会自动由foo.d.ts提供</li>\n</ul>\n<h3 id=\"自动引用\"><a href=\"#自动引用\" class=\"headerlink\" title=\"自动引用\"></a>自动引用</h3><ul>\n<li><p>第三方库都有@types&#x2F;xxx ，declare文件</p>\n<p>  <img src=\"/2024/08/04/13.2TypeScript/Untitled6.png\" alt=\"Untitled\"></p>\n<p>  配置这个，type在的目录</p>\n</li>\n</ul>\n<h2 id=\"declare-module、namespace\"><a href=\"#declare-module、namespace\" class=\"headerlink\" title=\"declare module、namespace\"></a>declare module、namespace</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&quot;jquery&quot;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">let</span> <span class=\"attr\">fn</span>:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jquery.<span class=\"property\">fn</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为外部属性新增\"><a href=\"#为外部属性新增\" class=\"headerlink\" title=\"为外部属性新增\"></a>为外部属性新增</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface A &#123;</span><br><span class=\"line\">\t<span class=\"attr\">value1</span>:string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;index.ts&quot;</span></span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&quot;index.ts&quot;</span> &#123;</span><br><span class=\"line\">\tinterface A &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">value2</span>:string</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口合并</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三斜线指令\"><a href=\"#三斜线指令\" class=\"headerlink\" title=\"三斜线指令\"></a>三斜线指令</h1><p>包含单个XML标签的单行注释，注释的内容会作为编译器指令使用</p>\n<p>只能仿造包含他的<em><strong>文件的最顶端</strong></em></p>\n<p>其前面只能出现单行或者多行注释</p>\n<p>如果前面有语句或声明，那么会被当做普通的单行注释</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;...&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>专门用来引用.d.ts文件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;...&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h3><p>解析所有三斜线引用的指令，把对应的文件添加到编译的过程中</p>\n<p>路径是相对于包含他的文件的</p>\n<h3 id=\"如果引用的的文件不存在会报错\"><a href=\"#如果引用的的文件不存在会报错\" class=\"headerlink\" title=\"如果引用的的文件不存在会报错\"></a>如果引用的的文件不存在会报错</h3><h3 id=\"—noResolve\"><a href=\"#—noResolve\" class=\"headerlink\" title=\"—noResolve\"></a>—noResolve</h3><p>如果使用了<strong>noResolve</strong>，三斜线会被忽略</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;...&quot; /&gt; 声明对文件的依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference types=&quot;node&quot; /&gt; 声明对包的依赖</span></span><br><span class=\"line\"><span class=\"comment\">//表明使用了@types/node/index.d.ts里面生命的名字</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在编译阶段生成的声明文件，编译器会自动添加  <strong>&#x2F;&#x2F;&#x2F; <reference types=\"node\" /></strong></p>\n<p><img src=\"/2024/08/04/13.2TypeScript/Untitled6.png\" alt=\"Untitled\"></p>\n<p>配置这个，type在的目录</p>\n"},{"layout":"posts","title":"鸟宿池边树","description":"一些关于flutter以及android的问题","date":"2024-01-13T02:47:29.000Z","_content":"总的来说，我不是一个爱写文章的人。记起来从写人生第一篇作文开始，我的写作之路就没有遇到过坦途。曾经试着反思原因，大抵是因为一些完美主义倾向。譬如写了上一句，要对下一句的方向内容乃至把字句被字句都要犹豫很久。不过这也是可贵的，古代诗人曾经有过诗句。鸟宿池边树，僧敲月下门。为人性僻耽佳句，语不惊人死不休。想来那些欧阳修、柳宗元之类的大家都曾如此。\n\n就譬如写上一段以及这一段，大抵改了二十次有余。\n\n\n\n最近还是在做我名为 ”电梯维保“ 的项目，不过近几日工作少了些枯燥。添加了些百度api定位之类的，由此引出来了种种。\n\n以下是这几日我遇到的一些问题，权当是总结，也是为了以后找起来方便。\n\n##  1. sourcetree 配置 github  SSH\n\n原因：在像往常一样用ssh拉取git仓库的时候报了 port：22   timeout错误，故此总结了两篇比较简洁的技术博客\n\n\n\n配置ssh ：https://juejin.cn/post/7224017330724175927\n\n修改config（如果没有config则新建）：https://blog.csdn.net/the__future/article/details/130038818\n\n\n\n## 2.百度api\n\n### \t1.百度api  location定位功能   封装代码\n\n以下是代码：\n\n```dart\nclass GetLocation {\n  static int count = 0;\n  static bool starLocate = false;\n  static double latitude = 0;\n  static double longitude = 0;\n\n  GetLocation();\n\n  static LocationFlutterPlugin myLocPlugin = LocationFlutterPlugin();\n  static BaiduLocation baiduLocation = BaiduLocation();\n\n  static Future<bool> locationInit() async {\n    log(\"定位初始化\");\n\n    /// 动态申请定位权限\n    if (await requestPermission()) {\n      myLocPlugin.setAgreePrivacy(true);\n      myLocPlugin.getApiKeyCallback(callback: (String result) {\n        String str = result;\n        log('鉴权结果：' + str);\n      });\n\n      myLocPlugin.seriesLocationCallback(\n          callback: (BaiduLocation result) async {\n        if (count >= 10) {\n          await myLocPlugin.stopLocation();\n        } else {\n          if (result.latitude != null && result.longitude != null) {\n            await myLocPlugin.stopLocation();\n            longitude = result.longitude!;\n            latitude = result.latitude!;\n          }else{\n            log(\"错误码:${result.errorCode}  ${result.errorInfo} ${result.getMap().toString()}\");\n          }\n        }\n      });\n      Map androidMap = initAndroidOptions().getMap();\n      Map iosMap = initIOSOptions().getMap();\n      var _suc = await myLocPlugin.prepareLoc(androidMap, iosMap);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static BaiduLocationAndroidOption initAndroidOptions() {\n    BaiduLocationAndroidOption options = BaiduLocationAndroidOption(\n        locationMode: BMFLocationMode.hightAccuracy,\n        isNeedAddress: false,\n        isNeedAltitude: false,\n        isNeedLocationPoiList: false,\n        isNeedNewVersionRgc: true,\n        isNeedLocationDescribe: true,\n        openGps: true,\n        locationPurpose: BMFLocationPurpose.sport,\n        coordType: BMFLocationCoordType.bd09ll,\n        scanspan: 0);\n    return options;\n  }\n\n  static BaiduLocationIOSOption initIOSOptions() {\n    BaiduLocationIOSOption options = BaiduLocationIOSOption(\n      coordType: BMFLocationCoordType.bd09ll,\n      locationTimeout: 10,\n      reGeocodeTimeout: 10,\n      activityType: BMFActivityType.automotiveNavigation,\n      desiredAccuracy: BMFDesiredAccuracy.best,\n      isNeedNewVersionRgc: true,\n      pausesLocationUpdatesAutomatically: false,\n      allowsBackgroundLocationUpdates: true,\n      distanceFilter: 10,\n    );\n    return options;\n  }\n\n  static Future<Map> getLocationSingle() async {\n    await myLocPlugin.stopLocation();\n    longitude = 0;\n    latitude = 0;\n    starLocate = false;\n    count = 0;\n    Map result = {\"success\": false};\n    log(\"进入\");\n    while (count < 10) {\n      if (!starLocate) {\n        starLocate = true;\n        bool test=await myLocPlugin.startLocation();\n      }\n      await Future.delayed(const Duration(seconds: 1))\n          .then((_) {\n        count++;\n        if (longitude != 0 || latitude != 0) {\n          double tlong = longitude;\n          double tl = latitude;\n          result = {\"success\": true, \"longitude\": tlong, \"latitude\": tl};\n          starLocate=false;\n        }\n      });\n      if (!starLocate) {\n        break;\n      }\n    }\n    longitude = 0;\n    latitude = 0;\n    starLocate = false;\n    count = 0;\n    starLocate = false;\n    myLocPlugin.stopLocation();\n    return result;\n  }\n\n  static Future<bool> requestPermission() async {\n    if (!(await Permission.location.isLimited ||\n        await Permission.location.isRestricted ||\n        await Permission.location.isGranted)) {\n      await Permission.location.request();\n    }\n    if ((await Permission.location.isLimited ||\n        await Permission.location.isRestricted ||\n        await Permission.location.isGranted)) {\n      return true;\n    } else {\n      Get.defaultDialog(title: \"错误\",content: const Text(\"无法获取位置信息，请手动设置权限后重启app\"));\n      return false;\n    }\n  }\n}\n```\n\n这段直接引用了另外一个同学的代码，我自己用 get 插件的GetxController 成功封装过一次，不过现在想想封装逻辑较之不是很清晰。\n\n\n\n### 2.由此引申的so文件\n\n在实现了上述的location的封装以及应用之后，想要自己做一个类似于百度地图app，故而尝试调用了百度地图api。\n\n```\nBMFMapOptions mapOptions = BMFMapOptions(\n        center: BMFCoordinate(39.917215, 116.380341),\n        zoomLevel: 12,\n        mapPadding: BMFEdgeInsets(left: 30, top: 0, right: 30, bottom: 0));\nContainer(\n      height: screenSize.height,\n      width: screenSize.width,\n      child: BMFMapWidget(\n        onBMFMapCreated: (controller) {\n          onBMFMapCreated(controller);\n        },\n        mapOptions: mapOptions,\n      ),\n    );\n```\n\n成功按照文档配置好环境以后，出现了地图黑屏的问题（此时并没有退出）。然而在网上一些社区csdn 掘金 stackoverflow，并没有找到解决方案。观察控制台的报错，发现是 缺少了 libgnustl_shared.zip文件。 找了好久找到了下载地址：https://ava3.androidfilehost.com/dl/JjPZ-RTGo8BAooDv19LIJQ/1705286685/24588232905720518/libgnustl_shared.zip?  然而按照网络上的方法配置到项目里后，没有用，故放弃。\n\n以下是so文件的简述以及作用：\n\n```\n\".so\" 文件是一种共享库（Shared Object Library）文件的后缀名。这种文件格式通常在类Unix操作系统（如Linux）中使用。共享库包含一组预编译的可执行代码和数据，可以被多个程序共享，以提供共享的功能和资源。\n\n这些文件通常包含编译后的二进制代码，可以被动态链接到程序中，而不是静态地嵌入在每个程序中。这样做有助于减小程序文件的大小，同时允许多个程序共享相同的代码库，提高系统的效率。\n\n在Linux系统中，共享库文件通常存储在 \"/lib\" 或 \"/usr/lib\" 目录下，而应用程序通过动态链接器在运行时加载这些库。这种动态链接的方式有助于减少内存占用，同时简化程序的维护和更新。\n```\n\n\n## 3.网易云api\n\n对接百度api失败之后有点烦，于是...\n\n涉及到的知识点：docker  、serveless 、nodejs跨域\n\n感谢开源项目：\n\n​\t\t1.github地址：git@github.com:Binaryify/NeteaseCloudMusicApi.git\n\n​\t\t2.官方网站 :https://docs.neteasecloudmusicapi.binaryify.com/\n\n算是一个总结，也算是一个分享：\n\n```\n 1.克隆仓库并运行项目\n git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git\n cd NeteaseCloudMusicApi\n npm install\n \n node app.js\n //之后可以在默认3000端口访问到\n\n set PORT=4000 && node app.js\n```\n\n\n\n### 1.docker 部署\n\ndocker 是在我大一下学期接触到的，当时一并学了vim，堪称利器。然而docker对当时的我相当于降维打击，很多概念都无法理解。现在则一学就会，验证了认识的螺旋上升性。\n\n```\n$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi && cd NeteaseCloudMusicApi\n\n$ sudo docker build . -t netease-music-api\n\n$ sudo docker run -d -p 3000:3000 netease-music-api\n```\n\n可视化版本的，在docker应用里的”dev enviroments“里添加任务夹即可\n\n不过部署之后在客户端请求会遇到跨域问题，这点我们之后再说\n\n### 2. 跨域问题\n\n因为本人是打算做一个flutter的android项目的，所以会遇到跨域问题\n\n以下是我在掘金上搜索到的node js解决代码， 不过我在本地运行之后并没有解决跨域，权且当一个记录，量变引起质变，或许早晚会用到\n\n```\nconst http = require('http');\n\n// 第一步：接受客户端请求\nconst server = http.createServer((request, response) => {\n\t\n    // 代理服务器，直接和浏览器直接交互，也需要设置：CORS 的首部字段\n    response.writeHead(200, {\n        'Access-Control-Allow-Origin': '*',  // 设置 optins 方法允许所有服务器访问 \n        'Access-Control-Allow-Methods': '*',\n        'Access-Control-Allow-Headers': 'Content-Type',\n    });\n\t\n    // 第二步：将请求转发给服务器\n    const proxyRequest = http.request({\n        host: '127.0.0.1',\n        port: 4000,\n        url: '/',\n        method: request.method,\n        headers: request.headers\n    }, (serverResponse) => {\n        \n        // 第三步：收到服务器的响应\n        var body = '';\n\n        serverResponse.on('data', (chunk) => {\n            body += chunk;\n        });\n\n        serverResponse.on('end', () => {\n            console.log('The data is ' + body );\n            \n            // 第四步：将响应结果转发给浏览器\n            response.end(body);\n        })\n\n    }).end();\n\n});\n\nserver.listen(3000, () => {\n    console.log('The proxyServer is running at http://localhost:3000');\n});\n```\n\n\n### 3.serveless部署\n\n网址： https://console.cloud.tencent.com/sls\n\n以下是步骤：\n\n1. fork 此项目\n\n2. 在腾讯云serverless应用管理页面( https://console.cloud.tencent.com/sls ),点击`新建应用`\n\n3. 顶部`创建方式`选择 `Web 应用`\n\n4. 选择 `Express框架`,点击底部`下一步按钮`\n\n5. 输入`应用名`,上传方式选择`代码仓库`,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目\n\n6. 启动文件填入:\n\n   ```\n   #!/bin/bash\n   export PORT=9000\n   /var/lang/node16/bin/node app.js\n   ```\n\n7. 点击`完成`,等待部署完成,点击`资源列表`的 `API网关` 里的 `URL`,正常情况会打开文档地址,点击文档`例子`可查看接口调用效果\n\n在serveless部署之后，跨域问题解决了。\n\n\n\n","source":"_posts/2some.md","raw":"---\nlayout: posts\ntitle: 鸟宿池边树\ndescription: 一些关于flutter以及android的问题\ndate: 2024-1-13 10:47:29\ntags:\n   - android\n   - flutter\n   - 俗手\n---\n总的来说，我不是一个爱写文章的人。记起来从写人生第一篇作文开始，我的写作之路就没有遇到过坦途。曾经试着反思原因，大抵是因为一些完美主义倾向。譬如写了上一句，要对下一句的方向内容乃至把字句被字句都要犹豫很久。不过这也是可贵的，古代诗人曾经有过诗句。鸟宿池边树，僧敲月下门。为人性僻耽佳句，语不惊人死不休。想来那些欧阳修、柳宗元之类的大家都曾如此。\n\n就譬如写上一段以及这一段，大抵改了二十次有余。\n\n\n\n最近还是在做我名为 ”电梯维保“ 的项目，不过近几日工作少了些枯燥。添加了些百度api定位之类的，由此引出来了种种。\n\n以下是这几日我遇到的一些问题，权当是总结，也是为了以后找起来方便。\n\n##  1. sourcetree 配置 github  SSH\n\n原因：在像往常一样用ssh拉取git仓库的时候报了 port：22   timeout错误，故此总结了两篇比较简洁的技术博客\n\n\n\n配置ssh ：https://juejin.cn/post/7224017330724175927\n\n修改config（如果没有config则新建）：https://blog.csdn.net/the__future/article/details/130038818\n\n\n\n## 2.百度api\n\n### \t1.百度api  location定位功能   封装代码\n\n以下是代码：\n\n```dart\nclass GetLocation {\n  static int count = 0;\n  static bool starLocate = false;\n  static double latitude = 0;\n  static double longitude = 0;\n\n  GetLocation();\n\n  static LocationFlutterPlugin myLocPlugin = LocationFlutterPlugin();\n  static BaiduLocation baiduLocation = BaiduLocation();\n\n  static Future<bool> locationInit() async {\n    log(\"定位初始化\");\n\n    /// 动态申请定位权限\n    if (await requestPermission()) {\n      myLocPlugin.setAgreePrivacy(true);\n      myLocPlugin.getApiKeyCallback(callback: (String result) {\n        String str = result;\n        log('鉴权结果：' + str);\n      });\n\n      myLocPlugin.seriesLocationCallback(\n          callback: (BaiduLocation result) async {\n        if (count >= 10) {\n          await myLocPlugin.stopLocation();\n        } else {\n          if (result.latitude != null && result.longitude != null) {\n            await myLocPlugin.stopLocation();\n            longitude = result.longitude!;\n            latitude = result.latitude!;\n          }else{\n            log(\"错误码:${result.errorCode}  ${result.errorInfo} ${result.getMap().toString()}\");\n          }\n        }\n      });\n      Map androidMap = initAndroidOptions().getMap();\n      Map iosMap = initIOSOptions().getMap();\n      var _suc = await myLocPlugin.prepareLoc(androidMap, iosMap);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static BaiduLocationAndroidOption initAndroidOptions() {\n    BaiduLocationAndroidOption options = BaiduLocationAndroidOption(\n        locationMode: BMFLocationMode.hightAccuracy,\n        isNeedAddress: false,\n        isNeedAltitude: false,\n        isNeedLocationPoiList: false,\n        isNeedNewVersionRgc: true,\n        isNeedLocationDescribe: true,\n        openGps: true,\n        locationPurpose: BMFLocationPurpose.sport,\n        coordType: BMFLocationCoordType.bd09ll,\n        scanspan: 0);\n    return options;\n  }\n\n  static BaiduLocationIOSOption initIOSOptions() {\n    BaiduLocationIOSOption options = BaiduLocationIOSOption(\n      coordType: BMFLocationCoordType.bd09ll,\n      locationTimeout: 10,\n      reGeocodeTimeout: 10,\n      activityType: BMFActivityType.automotiveNavigation,\n      desiredAccuracy: BMFDesiredAccuracy.best,\n      isNeedNewVersionRgc: true,\n      pausesLocationUpdatesAutomatically: false,\n      allowsBackgroundLocationUpdates: true,\n      distanceFilter: 10,\n    );\n    return options;\n  }\n\n  static Future<Map> getLocationSingle() async {\n    await myLocPlugin.stopLocation();\n    longitude = 0;\n    latitude = 0;\n    starLocate = false;\n    count = 0;\n    Map result = {\"success\": false};\n    log(\"进入\");\n    while (count < 10) {\n      if (!starLocate) {\n        starLocate = true;\n        bool test=await myLocPlugin.startLocation();\n      }\n      await Future.delayed(const Duration(seconds: 1))\n          .then((_) {\n        count++;\n        if (longitude != 0 || latitude != 0) {\n          double tlong = longitude;\n          double tl = latitude;\n          result = {\"success\": true, \"longitude\": tlong, \"latitude\": tl};\n          starLocate=false;\n        }\n      });\n      if (!starLocate) {\n        break;\n      }\n    }\n    longitude = 0;\n    latitude = 0;\n    starLocate = false;\n    count = 0;\n    starLocate = false;\n    myLocPlugin.stopLocation();\n    return result;\n  }\n\n  static Future<bool> requestPermission() async {\n    if (!(await Permission.location.isLimited ||\n        await Permission.location.isRestricted ||\n        await Permission.location.isGranted)) {\n      await Permission.location.request();\n    }\n    if ((await Permission.location.isLimited ||\n        await Permission.location.isRestricted ||\n        await Permission.location.isGranted)) {\n      return true;\n    } else {\n      Get.defaultDialog(title: \"错误\",content: const Text(\"无法获取位置信息，请手动设置权限后重启app\"));\n      return false;\n    }\n  }\n}\n```\n\n这段直接引用了另外一个同学的代码，我自己用 get 插件的GetxController 成功封装过一次，不过现在想想封装逻辑较之不是很清晰。\n\n\n\n### 2.由此引申的so文件\n\n在实现了上述的location的封装以及应用之后，想要自己做一个类似于百度地图app，故而尝试调用了百度地图api。\n\n```\nBMFMapOptions mapOptions = BMFMapOptions(\n        center: BMFCoordinate(39.917215, 116.380341),\n        zoomLevel: 12,\n        mapPadding: BMFEdgeInsets(left: 30, top: 0, right: 30, bottom: 0));\nContainer(\n      height: screenSize.height,\n      width: screenSize.width,\n      child: BMFMapWidget(\n        onBMFMapCreated: (controller) {\n          onBMFMapCreated(controller);\n        },\n        mapOptions: mapOptions,\n      ),\n    );\n```\n\n成功按照文档配置好环境以后，出现了地图黑屏的问题（此时并没有退出）。然而在网上一些社区csdn 掘金 stackoverflow，并没有找到解决方案。观察控制台的报错，发现是 缺少了 libgnustl_shared.zip文件。 找了好久找到了下载地址：https://ava3.androidfilehost.com/dl/JjPZ-RTGo8BAooDv19LIJQ/1705286685/24588232905720518/libgnustl_shared.zip?  然而按照网络上的方法配置到项目里后，没有用，故放弃。\n\n以下是so文件的简述以及作用：\n\n```\n\".so\" 文件是一种共享库（Shared Object Library）文件的后缀名。这种文件格式通常在类Unix操作系统（如Linux）中使用。共享库包含一组预编译的可执行代码和数据，可以被多个程序共享，以提供共享的功能和资源。\n\n这些文件通常包含编译后的二进制代码，可以被动态链接到程序中，而不是静态地嵌入在每个程序中。这样做有助于减小程序文件的大小，同时允许多个程序共享相同的代码库，提高系统的效率。\n\n在Linux系统中，共享库文件通常存储在 \"/lib\" 或 \"/usr/lib\" 目录下，而应用程序通过动态链接器在运行时加载这些库。这种动态链接的方式有助于减少内存占用，同时简化程序的维护和更新。\n```\n\n\n## 3.网易云api\n\n对接百度api失败之后有点烦，于是...\n\n涉及到的知识点：docker  、serveless 、nodejs跨域\n\n感谢开源项目：\n\n​\t\t1.github地址：git@github.com:Binaryify/NeteaseCloudMusicApi.git\n\n​\t\t2.官方网站 :https://docs.neteasecloudmusicapi.binaryify.com/\n\n算是一个总结，也算是一个分享：\n\n```\n 1.克隆仓库并运行项目\n git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git\n cd NeteaseCloudMusicApi\n npm install\n \n node app.js\n //之后可以在默认3000端口访问到\n\n set PORT=4000 && node app.js\n```\n\n\n\n### 1.docker 部署\n\ndocker 是在我大一下学期接触到的，当时一并学了vim，堪称利器。然而docker对当时的我相当于降维打击，很多概念都无法理解。现在则一学就会，验证了认识的螺旋上升性。\n\n```\n$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi && cd NeteaseCloudMusicApi\n\n$ sudo docker build . -t netease-music-api\n\n$ sudo docker run -d -p 3000:3000 netease-music-api\n```\n\n可视化版本的，在docker应用里的”dev enviroments“里添加任务夹即可\n\n不过部署之后在客户端请求会遇到跨域问题，这点我们之后再说\n\n### 2. 跨域问题\n\n因为本人是打算做一个flutter的android项目的，所以会遇到跨域问题\n\n以下是我在掘金上搜索到的node js解决代码， 不过我在本地运行之后并没有解决跨域，权且当一个记录，量变引起质变，或许早晚会用到\n\n```\nconst http = require('http');\n\n// 第一步：接受客户端请求\nconst server = http.createServer((request, response) => {\n\t\n    // 代理服务器，直接和浏览器直接交互，也需要设置：CORS 的首部字段\n    response.writeHead(200, {\n        'Access-Control-Allow-Origin': '*',  // 设置 optins 方法允许所有服务器访问 \n        'Access-Control-Allow-Methods': '*',\n        'Access-Control-Allow-Headers': 'Content-Type',\n    });\n\t\n    // 第二步：将请求转发给服务器\n    const proxyRequest = http.request({\n        host: '127.0.0.1',\n        port: 4000,\n        url: '/',\n        method: request.method,\n        headers: request.headers\n    }, (serverResponse) => {\n        \n        // 第三步：收到服务器的响应\n        var body = '';\n\n        serverResponse.on('data', (chunk) => {\n            body += chunk;\n        });\n\n        serverResponse.on('end', () => {\n            console.log('The data is ' + body );\n            \n            // 第四步：将响应结果转发给浏览器\n            response.end(body);\n        })\n\n    }).end();\n\n});\n\nserver.listen(3000, () => {\n    console.log('The proxyServer is running at http://localhost:3000');\n});\n```\n\n\n### 3.serveless部署\n\n网址： https://console.cloud.tencent.com/sls\n\n以下是步骤：\n\n1. fork 此项目\n\n2. 在腾讯云serverless应用管理页面( https://console.cloud.tencent.com/sls ),点击`新建应用`\n\n3. 顶部`创建方式`选择 `Web 应用`\n\n4. 选择 `Express框架`,点击底部`下一步按钮`\n\n5. 输入`应用名`,上传方式选择`代码仓库`,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目\n\n6. 启动文件填入:\n\n   ```\n   #!/bin/bash\n   export PORT=9000\n   /var/lang/node16/bin/node app.js\n   ```\n\n7. 点击`完成`,等待部署完成,点击`资源列表`的 `API网关` 里的 `URL`,正常情况会打开文档地址,点击文档`例子`可查看接口调用效果\n\n在serveless部署之后，跨域问题解决了。\n\n\n\n","slug":"2some","published":1,"updated":"2024-07-05T03:40:01.001Z","comments":1,"photos":[],"link":"","_id":"clzoy7ge1000gzw6k6ntl7t6q","content":"<p>总的来说，我不是一个爱写文章的人。记起来从写人生第一篇作文开始，我的写作之路就没有遇到过坦途。曾经试着反思原因，大抵是因为一些完美主义倾向。譬如写了上一句，要对下一句的方向内容乃至把字句被字句都要犹豫很久。不过这也是可贵的，古代诗人曾经有过诗句。鸟宿池边树，僧敲月下门。为人性僻耽佳句，语不惊人死不休。想来那些欧阳修、柳宗元之类的大家都曾如此。</p>\n<p>就譬如写上一段以及这一段，大抵改了二十次有余。</p>\n<p>最近还是在做我名为 ”电梯维保“ 的项目，不过近几日工作少了些枯燥。添加了些百度api定位之类的，由此引出来了种种。</p>\n<p>以下是这几日我遇到的一些问题，权当是总结，也是为了以后找起来方便。</p>\n<h2 id=\"1-sourcetree-配置-github-SSH\"><a href=\"#1-sourcetree-配置-github-SSH\" class=\"headerlink\" title=\"1. sourcetree 配置 github  SSH\"></a>1. sourcetree 配置 github  SSH</h2><p>原因：在像往常一样用ssh拉取git仓库的时候报了 port：22   timeout错误，故此总结了两篇比较简洁的技术博客</p>\n<p>配置ssh ：<a href=\"https://juejin.cn/post/7224017330724175927\">https://juejin.cn/post/7224017330724175927</a></p>\n<p>修改config（如果没有config则新建）：<a href=\"https://blog.csdn.net/the__future/article/details/130038818\">https://blog.csdn.net/the__future/article/details/130038818</a></p>\n<h2 id=\"2-百度api\"><a href=\"#2-百度api\" class=\"headerlink\" title=\"2.百度api\"></a>2.百度api</h2><h3 id=\"1-百度api-location定位功能-封装代码\"><a href=\"#1-百度api-location定位功能-封装代码\" class=\"headerlink\" title=\"1.百度api  location定位功能   封装代码\"></a>1.百度api  location定位功能   封装代码</h3><p>以下是代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetLocation</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">double</span> latitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">double</span> longitude = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  GetLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> LocationFlutterPlugin myLocPlugin = LocationFlutterPlugin();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> BaiduLocation baiduLocation = BaiduLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future&lt;<span class=\"built_in\">bool</span>&gt; locationInit() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;定位初始化&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// <span class=\"language-markdown\">动态申请定位权限</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">await</span> requestPermission()) &#123;</span><br><span class=\"line\">      myLocPlugin.setAgreePrivacy(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      myLocPlugin.getApiKeyCallback(callback: (<span class=\"built_in\">String</span> result) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> str = result;</span><br><span class=\"line\">        log(<span class=\"string\">&#x27;鉴权结果：&#x27;</span> + str);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      myLocPlugin.seriesLocationCallback(</span><br><span class=\"line\">          callback: (BaiduLocation result) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">await</span> myLocPlugin.stopLocation();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (result.latitude != <span class=\"keyword\">null</span> &amp;&amp; result.longitude != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> myLocPlugin.stopLocation();</span><br><span class=\"line\">            longitude = result.longitude!;</span><br><span class=\"line\">            latitude = result.latitude!;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            log(<span class=\"string\">&quot;错误码:<span class=\"subst\">$&#123;result.errorCode&#125;</span>  <span class=\"subst\">$&#123;result.errorInfo&#125;</span> <span class=\"subst\">$&#123;result.getMap().toString()&#125;</span>&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">Map</span> androidMap = initAndroidOptions().getMap();</span><br><span class=\"line\">      <span class=\"built_in\">Map</span> iosMap = initIOSOptions().getMap();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> _suc = <span class=\"keyword\">await</span> myLocPlugin.prepareLoc(androidMap, iosMap);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> BaiduLocationAndroidOption initAndroidOptions() &#123;</span><br><span class=\"line\">    BaiduLocationAndroidOption options = BaiduLocationAndroidOption(</span><br><span class=\"line\">        locationMode: BMFLocationMode.hightAccuracy,</span><br><span class=\"line\">        isNeedAddress: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        isNeedAltitude: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        isNeedLocationPoiList: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        isNeedNewVersionRgc: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        isNeedLocationDescribe: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        openGps: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        locationPurpose: BMFLocationPurpose.sport,</span><br><span class=\"line\">        coordType: BMFLocationCoordType.bd09ll,</span><br><span class=\"line\">        scanspan: <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> BaiduLocationIOSOption initIOSOptions() &#123;</span><br><span class=\"line\">    BaiduLocationIOSOption options = BaiduLocationIOSOption(</span><br><span class=\"line\">      coordType: BMFLocationCoordType.bd09ll,</span><br><span class=\"line\">      locationTimeout: <span class=\"number\">10</span>,</span><br><span class=\"line\">      reGeocodeTimeout: <span class=\"number\">10</span>,</span><br><span class=\"line\">      activityType: BMFActivityType.automotiveNavigation,</span><br><span class=\"line\">      desiredAccuracy: BMFDesiredAccuracy.best,</span><br><span class=\"line\">      isNeedNewVersionRgc: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">      pausesLocationUpdatesAutomatically: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      allowsBackgroundLocationUpdates: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">      distanceFilter: <span class=\"number\">10</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future&lt;<span class=\"built_in\">Map</span>&gt; getLocationSingle() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myLocPlugin.stopLocation();</span><br><span class=\"line\">    longitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    latitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> result = &#123;<span class=\"string\">&quot;success&quot;</span>: <span class=\"keyword\">false</span>&#125;;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;进入&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!starLocate) &#123;</span><br><span class=\"line\">        starLocate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"built_in\">bool</span> test=<span class=\"keyword\">await</span> myLocPlugin.startLocation();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> Future.delayed(<span class=\"keyword\">const</span> <span class=\"built_in\">Duration</span>(seconds: <span class=\"number\">1</span>))</span><br><span class=\"line\">          .then((_) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (longitude != <span class=\"number\">0</span> || latitude != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">double</span> tlong = longitude;</span><br><span class=\"line\">          <span class=\"built_in\">double</span> tl = latitude;</span><br><span class=\"line\">          result = &#123;<span class=\"string\">&quot;success&quot;</span>: <span class=\"keyword\">true</span>, <span class=\"string\">&quot;longitude&quot;</span>: tlong, <span class=\"string\">&quot;latitude&quot;</span>: tl&#125;;</span><br><span class=\"line\">          starLocate=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!starLocate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    longitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    latitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    myLocPlugin.stopLocation();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future&lt;<span class=\"built_in\">bool</span>&gt; requestPermission() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">await</span> Permission.location.isLimited ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isRestricted ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isGranted)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> Permission.location.request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">await</span> Permission.location.isLimited ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isRestricted ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isGranted)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      Get.defaultDialog(title: <span class=\"string\">&quot;错误&quot;</span>,content: <span class=\"keyword\">const</span> Text(<span class=\"string\">&quot;无法获取位置信息，请手动设置权限后重启app&quot;</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段直接引用了另外一个同学的代码，我自己用 get 插件的GetxController 成功封装过一次，不过现在想想封装逻辑较之不是很清晰。</p>\n<h3 id=\"2-由此引申的so文件\"><a href=\"#2-由此引申的so文件\" class=\"headerlink\" title=\"2.由此引申的so文件\"></a>2.由此引申的so文件</h3><p>在实现了上述的location的封装以及应用之后，想要自己做一个类似于百度地图app，故而尝试调用了百度地图api。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BMFMapOptions mapOptions = BMFMapOptions(</span><br><span class=\"line\">        center: BMFCoordinate(39.917215, 116.380341),</span><br><span class=\"line\">        zoomLevel: 12,</span><br><span class=\"line\">        mapPadding: BMFEdgeInsets(left: 30, top: 0, right: 30, bottom: 0));</span><br><span class=\"line\">Container(</span><br><span class=\"line\">      height: screenSize.height,</span><br><span class=\"line\">      width: screenSize.width,</span><br><span class=\"line\">      child: BMFMapWidget(</span><br><span class=\"line\">        onBMFMapCreated: (controller) &#123;</span><br><span class=\"line\">          onBMFMapCreated(controller);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mapOptions: mapOptions,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n<p>成功按照文档配置好环境以后，出现了地图黑屏的问题（此时并没有退出）。然而在网上一些社区csdn 掘金 stackoverflow，并没有找到解决方案。观察控制台的报错，发现是 缺少了 libgnustl_shared.zip文件。 找了好久找到了下载地址：<a href=\"https://ava3.androidfilehost.com/dl/JjPZ-RTGo8BAooDv19LIJQ/1705286685/24588232905720518/libgnustl_shared.zip\">https://ava3.androidfilehost.com/dl/JjPZ-RTGo8BAooDv19LIJQ/1705286685/24588232905720518/libgnustl_shared.zip</a>?  然而按照网络上的方法配置到项目里后，没有用，故放弃。</p>\n<p>以下是so文件的简述以及作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;.so&quot; 文件是一种共享库（Shared Object Library）文件的后缀名。这种文件格式通常在类Unix操作系统（如Linux）中使用。共享库包含一组预编译的可执行代码和数据，可以被多个程序共享，以提供共享的功能和资源。</span><br><span class=\"line\"></span><br><span class=\"line\">这些文件通常包含编译后的二进制代码，可以被动态链接到程序中，而不是静态地嵌入在每个程序中。这样做有助于减小程序文件的大小，同时允许多个程序共享相同的代码库，提高系统的效率。</span><br><span class=\"line\"></span><br><span class=\"line\">在Linux系统中，共享库文件通常存储在 &quot;/lib&quot; 或 &quot;/usr/lib&quot; 目录下，而应用程序通过动态链接器在运行时加载这些库。这种动态链接的方式有助于减少内存占用，同时简化程序的维护和更新。</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-网易云api\"><a href=\"#3-网易云api\" class=\"headerlink\" title=\"3.网易云api\"></a>3.网易云api</h2><p>对接百度api失败之后有点烦，于是…</p>\n<p>涉及到的知识点：docker  、serveless 、nodejs跨域</p>\n<p>感谢开源项目：</p>\n<p>​\t\t1.github地址：<a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;\">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;</a>:Binaryify&#x2F;NeteaseCloudMusicApi.git</p>\n<p>​\t\t2.官方网站 :<a href=\"https://docs.neteasecloudmusicapi.binaryify.com/\">https://docs.neteasecloudmusicapi.binaryify.com/</a></p>\n<p>算是一个总结，也算是一个分享：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.克隆仓库并运行项目</span><br><span class=\"line\">git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git</span><br><span class=\"line\">cd NeteaseCloudMusicApi</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">node app.js</span><br><span class=\"line\">//之后可以在默认3000端口访问到</span><br><span class=\"line\"></span><br><span class=\"line\">set PORT=4000 &amp;&amp; node app.js</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-docker-部署\"><a href=\"#1-docker-部署\" class=\"headerlink\" title=\"1.docker 部署\"></a>1.docker 部署</h3><p>docker 是在我大一下学期接触到的，当时一并学了vim，堪称利器。然而docker对当时的我相当于降维打击，很多概念都无法理解。现在则一学就会，验证了认识的螺旋上升性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi &amp;&amp; cd NeteaseCloudMusicApi</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo docker build . -t netease-music-api</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo docker run -d -p 3000:3000 netease-music-api</span><br></pre></td></tr></table></figure>\n\n<p>可视化版本的，在docker应用里的”dev enviroments“里添加任务夹即可</p>\n<p>不过部署之后在客户端请求会遇到跨域问题，这点我们之后再说</p>\n<h3 id=\"2-跨域问题\"><a href=\"#2-跨域问题\" class=\"headerlink\" title=\"2. 跨域问题\"></a>2. 跨域问题</h3><p>因为本人是打算做一个flutter的android项目的，所以会遇到跨域问题</p>\n<p>以下是我在掘金上搜索到的node js解决代码， 不过我在本地运行之后并没有解决跨域，权且当一个记录，量变引起质变，或许早晚会用到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&#x27;http&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一步：接受客户端请求</span><br><span class=\"line\">const server = http.createServer((request, response) =&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 代理服务器，直接和浏览器直接交互，也需要设置：CORS 的首部字段</span><br><span class=\"line\">    response.writeHead(200, &#123;</span><br><span class=\"line\">        &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;,  // 设置 optins 方法允许所有服务器访问 </span><br><span class=\"line\">        &#x27;Access-Control-Allow-Methods&#x27;: &#x27;*&#x27;,</span><br><span class=\"line\">        &#x27;Access-Control-Allow-Headers&#x27;: &#x27;Content-Type&#x27;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 第二步：将请求转发给服务器</span><br><span class=\"line\">    const proxyRequest = http.request(&#123;</span><br><span class=\"line\">        host: &#x27;127.0.0.1&#x27;,</span><br><span class=\"line\">        port: 4000,</span><br><span class=\"line\">        url: &#x27;/&#x27;,</span><br><span class=\"line\">        method: request.method,</span><br><span class=\"line\">        headers: request.headers</span><br><span class=\"line\">    &#125;, (serverResponse) =&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 第三步：收到服务器的响应</span><br><span class=\"line\">        var body = &#x27;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        serverResponse.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br><span class=\"line\">            body += chunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        serverResponse.on(&#x27;end&#x27;, () =&gt; &#123;</span><br><span class=\"line\">            console.log(&#x27;The data is &#x27; + body );</span><br><span class=\"line\">            </span><br><span class=\"line\">            // 第四步：将响应结果转发给浏览器</span><br><span class=\"line\">            response.end(body);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;).end();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(3000, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;The proxyServer is running at http://localhost:3000&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-serveless部署\"><a href=\"#3-serveless部署\" class=\"headerlink\" title=\"3.serveless部署\"></a>3.serveless部署</h3><p>网址： <a href=\"https://console.cloud.tencent.com/sls\">https://console.cloud.tencent.com/sls</a></p>\n<p>以下是步骤：</p>\n<ol>\n<li><p>fork 此项目</p>\n</li>\n<li><p>在腾讯云serverless应用管理页面( <a href=\"https://console.cloud.tencent.com/sls\">https://console.cloud.tencent.com/sls</a> ),点击<code>新建应用</code></p>\n</li>\n<li><p>顶部<code>创建方式</code>选择 <code>Web 应用</code></p>\n</li>\n<li><p>选择 <code>Express框架</code>,点击底部<code>下一步按钮</code></p>\n</li>\n<li><p>输入<code>应用名</code>,上传方式选择<code>代码仓库</code>,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目</p>\n</li>\n<li><p>启动文件填入:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">export PORT=9000</span><br><span class=\"line\">/var/lang/node16/bin/node app.js</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>点击<code>完成</code>,等待部署完成,点击<code>资源列表</code>的 <code>API网关</code> 里的 <code>URL</code>,正常情况会打开文档地址,点击文档<code>例子</code>可查看接口调用效果</p>\n</li>\n</ol>\n<p>在serveless部署之后，跨域问题解决了。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>总的来说，我不是一个爱写文章的人。记起来从写人生第一篇作文开始，我的写作之路就没有遇到过坦途。曾经试着反思原因，大抵是因为一些完美主义倾向。譬如写了上一句，要对下一句的方向内容乃至把字句被字句都要犹豫很久。不过这也是可贵的，古代诗人曾经有过诗句。鸟宿池边树，僧敲月下门。为人性僻耽佳句，语不惊人死不休。想来那些欧阳修、柳宗元之类的大家都曾如此。</p>\n<p>就譬如写上一段以及这一段，大抵改了二十次有余。</p>\n<p>最近还是在做我名为 ”电梯维保“ 的项目，不过近几日工作少了些枯燥。添加了些百度api定位之类的，由此引出来了种种。</p>\n<p>以下是这几日我遇到的一些问题，权当是总结，也是为了以后找起来方便。</p>\n<h2 id=\"1-sourcetree-配置-github-SSH\"><a href=\"#1-sourcetree-配置-github-SSH\" class=\"headerlink\" title=\"1. sourcetree 配置 github  SSH\"></a>1. sourcetree 配置 github  SSH</h2><p>原因：在像往常一样用ssh拉取git仓库的时候报了 port：22   timeout错误，故此总结了两篇比较简洁的技术博客</p>\n<p>配置ssh ：<a href=\"https://juejin.cn/post/7224017330724175927\">https://juejin.cn/post/7224017330724175927</a></p>\n<p>修改config（如果没有config则新建）：<a href=\"https://blog.csdn.net/the__future/article/details/130038818\">https://blog.csdn.net/the__future/article/details/130038818</a></p>\n<h2 id=\"2-百度api\"><a href=\"#2-百度api\" class=\"headerlink\" title=\"2.百度api\"></a>2.百度api</h2><h3 id=\"1-百度api-location定位功能-封装代码\"><a href=\"#1-百度api-location定位功能-封装代码\" class=\"headerlink\" title=\"1.百度api  location定位功能   封装代码\"></a>1.百度api  location定位功能   封装代码</h3><p>以下是代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetLocation</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">double</span> latitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">double</span> longitude = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  GetLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> LocationFlutterPlugin myLocPlugin = LocationFlutterPlugin();</span><br><span class=\"line\">  <span class=\"keyword\">static</span> BaiduLocation baiduLocation = BaiduLocation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future&lt;<span class=\"built_in\">bool</span>&gt; locationInit() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;定位初始化&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// <span class=\"language-markdown\">动态申请定位权限</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">await</span> requestPermission()) &#123;</span><br><span class=\"line\">      myLocPlugin.setAgreePrivacy(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      myLocPlugin.getApiKeyCallback(callback: (<span class=\"built_in\">String</span> result) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> str = result;</span><br><span class=\"line\">        log(<span class=\"string\">&#x27;鉴权结果：&#x27;</span> + str);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      myLocPlugin.seriesLocationCallback(</span><br><span class=\"line\">          callback: (BaiduLocation result) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">await</span> myLocPlugin.stopLocation();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (result.latitude != <span class=\"keyword\">null</span> &amp;&amp; result.longitude != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> myLocPlugin.stopLocation();</span><br><span class=\"line\">            longitude = result.longitude!;</span><br><span class=\"line\">            latitude = result.latitude!;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            log(<span class=\"string\">&quot;错误码:<span class=\"subst\">$&#123;result.errorCode&#125;</span>  <span class=\"subst\">$&#123;result.errorInfo&#125;</span> <span class=\"subst\">$&#123;result.getMap().toString()&#125;</span>&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">Map</span> androidMap = initAndroidOptions().getMap();</span><br><span class=\"line\">      <span class=\"built_in\">Map</span> iosMap = initIOSOptions().getMap();</span><br><span class=\"line\">      <span class=\"keyword\">var</span> _suc = <span class=\"keyword\">await</span> myLocPlugin.prepareLoc(androidMap, iosMap);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> BaiduLocationAndroidOption initAndroidOptions() &#123;</span><br><span class=\"line\">    BaiduLocationAndroidOption options = BaiduLocationAndroidOption(</span><br><span class=\"line\">        locationMode: BMFLocationMode.hightAccuracy,</span><br><span class=\"line\">        isNeedAddress: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        isNeedAltitude: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        isNeedLocationPoiList: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        isNeedNewVersionRgc: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        isNeedLocationDescribe: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        openGps: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        locationPurpose: BMFLocationPurpose.sport,</span><br><span class=\"line\">        coordType: BMFLocationCoordType.bd09ll,</span><br><span class=\"line\">        scanspan: <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> BaiduLocationIOSOption initIOSOptions() &#123;</span><br><span class=\"line\">    BaiduLocationIOSOption options = BaiduLocationIOSOption(</span><br><span class=\"line\">      coordType: BMFLocationCoordType.bd09ll,</span><br><span class=\"line\">      locationTimeout: <span class=\"number\">10</span>,</span><br><span class=\"line\">      reGeocodeTimeout: <span class=\"number\">10</span>,</span><br><span class=\"line\">      activityType: BMFActivityType.automotiveNavigation,</span><br><span class=\"line\">      desiredAccuracy: BMFDesiredAccuracy.best,</span><br><span class=\"line\">      isNeedNewVersionRgc: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">      pausesLocationUpdatesAutomatically: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      allowsBackgroundLocationUpdates: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">      distanceFilter: <span class=\"number\">10</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future&lt;<span class=\"built_in\">Map</span>&gt; getLocationSingle() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myLocPlugin.stopLocation();</span><br><span class=\"line\">    longitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    latitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span> result = &#123;<span class=\"string\">&quot;success&quot;</span>: <span class=\"keyword\">false</span>&#125;;</span><br><span class=\"line\">    log(<span class=\"string\">&quot;进入&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!starLocate) &#123;</span><br><span class=\"line\">        starLocate = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"built_in\">bool</span> test=<span class=\"keyword\">await</span> myLocPlugin.startLocation();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> Future.delayed(<span class=\"keyword\">const</span> <span class=\"built_in\">Duration</span>(seconds: <span class=\"number\">1</span>))</span><br><span class=\"line\">          .then((_) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (longitude != <span class=\"number\">0</span> || latitude != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">double</span> tlong = longitude;</span><br><span class=\"line\">          <span class=\"built_in\">double</span> tl = latitude;</span><br><span class=\"line\">          result = &#123;<span class=\"string\">&quot;success&quot;</span>: <span class=\"keyword\">true</span>, <span class=\"string\">&quot;longitude&quot;</span>: tlong, <span class=\"string\">&quot;latitude&quot;</span>: tl&#125;;</span><br><span class=\"line\">          starLocate=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!starLocate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    longitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    latitude = <span class=\"number\">0</span>;</span><br><span class=\"line\">    starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    starLocate = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    myLocPlugin.stopLocation();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future&lt;<span class=\"built_in\">bool</span>&gt; requestPermission() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">await</span> Permission.location.isLimited ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isRestricted ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isGranted)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> Permission.location.request();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">await</span> Permission.location.isLimited ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isRestricted ||</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Permission.location.isGranted)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      Get.defaultDialog(title: <span class=\"string\">&quot;错误&quot;</span>,content: <span class=\"keyword\">const</span> Text(<span class=\"string\">&quot;无法获取位置信息，请手动设置权限后重启app&quot;</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段直接引用了另外一个同学的代码，我自己用 get 插件的GetxController 成功封装过一次，不过现在想想封装逻辑较之不是很清晰。</p>\n<h3 id=\"2-由此引申的so文件\"><a href=\"#2-由此引申的so文件\" class=\"headerlink\" title=\"2.由此引申的so文件\"></a>2.由此引申的so文件</h3><p>在实现了上述的location的封装以及应用之后，想要自己做一个类似于百度地图app，故而尝试调用了百度地图api。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BMFMapOptions mapOptions = BMFMapOptions(</span><br><span class=\"line\">        center: BMFCoordinate(39.917215, 116.380341),</span><br><span class=\"line\">        zoomLevel: 12,</span><br><span class=\"line\">        mapPadding: BMFEdgeInsets(left: 30, top: 0, right: 30, bottom: 0));</span><br><span class=\"line\">Container(</span><br><span class=\"line\">      height: screenSize.height,</span><br><span class=\"line\">      width: screenSize.width,</span><br><span class=\"line\">      child: BMFMapWidget(</span><br><span class=\"line\">        onBMFMapCreated: (controller) &#123;</span><br><span class=\"line\">          onBMFMapCreated(controller);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mapOptions: mapOptions,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n<p>成功按照文档配置好环境以后，出现了地图黑屏的问题（此时并没有退出）。然而在网上一些社区csdn 掘金 stackoverflow，并没有找到解决方案。观察控制台的报错，发现是 缺少了 libgnustl_shared.zip文件。 找了好久找到了下载地址：<a href=\"https://ava3.androidfilehost.com/dl/JjPZ-RTGo8BAooDv19LIJQ/1705286685/24588232905720518/libgnustl_shared.zip\">https://ava3.androidfilehost.com/dl/JjPZ-RTGo8BAooDv19LIJQ/1705286685/24588232905720518/libgnustl_shared.zip</a>?  然而按照网络上的方法配置到项目里后，没有用，故放弃。</p>\n<p>以下是so文件的简述以及作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;.so&quot; 文件是一种共享库（Shared Object Library）文件的后缀名。这种文件格式通常在类Unix操作系统（如Linux）中使用。共享库包含一组预编译的可执行代码和数据，可以被多个程序共享，以提供共享的功能和资源。</span><br><span class=\"line\"></span><br><span class=\"line\">这些文件通常包含编译后的二进制代码，可以被动态链接到程序中，而不是静态地嵌入在每个程序中。这样做有助于减小程序文件的大小，同时允许多个程序共享相同的代码库，提高系统的效率。</span><br><span class=\"line\"></span><br><span class=\"line\">在Linux系统中，共享库文件通常存储在 &quot;/lib&quot; 或 &quot;/usr/lib&quot; 目录下，而应用程序通过动态链接器在运行时加载这些库。这种动态链接的方式有助于减少内存占用，同时简化程序的维护和更新。</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-网易云api\"><a href=\"#3-网易云api\" class=\"headerlink\" title=\"3.网易云api\"></a>3.网易云api</h2><p>对接百度api失败之后有点烦，于是…</p>\n<p>涉及到的知识点：docker  、serveless 、nodejs跨域</p>\n<p>感谢开源项目：</p>\n<p>​\t\t1.github地址：<a href=\"mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;\">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;</a>:Binaryify&#x2F;NeteaseCloudMusicApi.git</p>\n<p>​\t\t2.官方网站 :<a href=\"https://docs.neteasecloudmusicapi.binaryify.com/\">https://docs.neteasecloudmusicapi.binaryify.com/</a></p>\n<p>算是一个总结，也算是一个分享：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.克隆仓库并运行项目</span><br><span class=\"line\">git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git</span><br><span class=\"line\">cd NeteaseCloudMusicApi</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">node app.js</span><br><span class=\"line\">//之后可以在默认3000端口访问到</span><br><span class=\"line\"></span><br><span class=\"line\">set PORT=4000 &amp;&amp; node app.js</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-docker-部署\"><a href=\"#1-docker-部署\" class=\"headerlink\" title=\"1.docker 部署\"></a>1.docker 部署</h3><p>docker 是在我大一下学期接触到的，当时一并学了vim，堪称利器。然而docker对当时的我相当于降维打击，很多概念都无法理解。现在则一学就会，验证了认识的螺旋上升性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi &amp;&amp; cd NeteaseCloudMusicApi</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo docker build . -t netease-music-api</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo docker run -d -p 3000:3000 netease-music-api</span><br></pre></td></tr></table></figure>\n\n<p>可视化版本的，在docker应用里的”dev enviroments“里添加任务夹即可</p>\n<p>不过部署之后在客户端请求会遇到跨域问题，这点我们之后再说</p>\n<h3 id=\"2-跨域问题\"><a href=\"#2-跨域问题\" class=\"headerlink\" title=\"2. 跨域问题\"></a>2. 跨域问题</h3><p>因为本人是打算做一个flutter的android项目的，所以会遇到跨域问题</p>\n<p>以下是我在掘金上搜索到的node js解决代码， 不过我在本地运行之后并没有解决跨域，权且当一个记录，量变引起质变，或许早晚会用到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&#x27;http&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一步：接受客户端请求</span><br><span class=\"line\">const server = http.createServer((request, response) =&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 代理服务器，直接和浏览器直接交互，也需要设置：CORS 的首部字段</span><br><span class=\"line\">    response.writeHead(200, &#123;</span><br><span class=\"line\">        &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;,  // 设置 optins 方法允许所有服务器访问 </span><br><span class=\"line\">        &#x27;Access-Control-Allow-Methods&#x27;: &#x27;*&#x27;,</span><br><span class=\"line\">        &#x27;Access-Control-Allow-Headers&#x27;: &#x27;Content-Type&#x27;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 第二步：将请求转发给服务器</span><br><span class=\"line\">    const proxyRequest = http.request(&#123;</span><br><span class=\"line\">        host: &#x27;127.0.0.1&#x27;,</span><br><span class=\"line\">        port: 4000,</span><br><span class=\"line\">        url: &#x27;/&#x27;,</span><br><span class=\"line\">        method: request.method,</span><br><span class=\"line\">        headers: request.headers</span><br><span class=\"line\">    &#125;, (serverResponse) =&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 第三步：收到服务器的响应</span><br><span class=\"line\">        var body = &#x27;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        serverResponse.on(&#x27;data&#x27;, (chunk) =&gt; &#123;</span><br><span class=\"line\">            body += chunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        serverResponse.on(&#x27;end&#x27;, () =&gt; &#123;</span><br><span class=\"line\">            console.log(&#x27;The data is &#x27; + body );</span><br><span class=\"line\">            </span><br><span class=\"line\">            // 第四步：将响应结果转发给浏览器</span><br><span class=\"line\">            response.end(body);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;).end();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(3000, () =&gt; &#123;</span><br><span class=\"line\">    console.log(&#x27;The proxyServer is running at http://localhost:3000&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-serveless部署\"><a href=\"#3-serveless部署\" class=\"headerlink\" title=\"3.serveless部署\"></a>3.serveless部署</h3><p>网址： <a href=\"https://console.cloud.tencent.com/sls\">https://console.cloud.tencent.com/sls</a></p>\n<p>以下是步骤：</p>\n<ol>\n<li><p>fork 此项目</p>\n</li>\n<li><p>在腾讯云serverless应用管理页面( <a href=\"https://console.cloud.tencent.com/sls\">https://console.cloud.tencent.com/sls</a> ),点击<code>新建应用</code></p>\n</li>\n<li><p>顶部<code>创建方式</code>选择 <code>Web 应用</code></p>\n</li>\n<li><p>选择 <code>Express框架</code>,点击底部<code>下一步按钮</code></p>\n</li>\n<li><p>输入<code>应用名</code>,上传方式选择<code>代码仓库</code>,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目</p>\n</li>\n<li><p>启动文件填入:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">export PORT=9000</span><br><span class=\"line\">/var/lang/node16/bin/node app.js</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>点击<code>完成</code>,等待部署完成,点击<code>资源列表</code>的 <code>API网关</code> 里的 <code>URL</code>,正常情况会打开文档地址,点击文档<code>例子</code>可查看接口调用效果</p>\n</li>\n</ol>\n<p>在serveless部署之后，跨域问题解决了。</p>\n"},{"layout":"posts","title":"低配版仿网易云app","description":"作者使用flutter在假期开发了一款简易的网易云app，实现了核心功能，包括歌曲的下载、播放、搜索、歌单广场等,并对网易云音乐接口进行了分析","date":"2024-02-01T14:47:29.000Z","_content":"\n# wyyapp\n\nA new Flutter project.\n\n## Getting Started\n\n一个简陋版的仿网易云音乐app，供学习使用\n开发实践\n1.17-2.1 一共十五天，中间休息了三天\n经历了大大小小四五次重构，原本的代码写的太烂了\n\n出于 要拓展自己技术栈的目的，这个app先告一段落\n之后需要学一些go后端以及鸿蒙生态,flutter 还是不值得all in\n不如说，由于本人的性格，我不会all in任何一门技术\n\n网易云接口是适配pc端的，对于android端的适配不是很好，所以有些功能实现起来非常复杂\n不过的确有app端的首页接口，但是其内部结构过于复杂,尝试分析，明白了大部分接口的含义\n然而，嵌套起来实在太过复杂,具体请看最后的分析\n\n所以只做了核心功能\n歌曲类的封装，包括下载、下一首、重新播放等功能\n下载类的封装、通知类的封装\n\n可以说,封装、整理、以及称得上是舒爽的代码结构是我在这个项目中学到的最有价值的东西\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fanalyze.png\" width=\"400px\"/>\n\n## 项目截图\n\n<img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fin.jpg\"/>\n\n下载功能\n<img alt=\"img_2.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_2.png\"/>\n\n通过android 的notification实现下载进度的展示 以及播放的控制\n<img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fnotifi.jpg\"/>\n<video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2FnotificationAmusiclist.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video>\n\n搜索\n<img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fsearch.png\"/>\n\n深色模式\n<img alt=\"dark mode\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fdark.jpg\"/>\n\n歌单广场\n<img alt=\"img_1.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_1.png\"/>\n<img alt=\"img_3.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_3.png\"/>\n\n批量管理\n<img alt=\"playlist\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Faddtoplaylist.mp4\"/>\n\n## “分析”\n\n以下是对于网易云音乐接口的分析的一角，总的来说\n对我启发的最重要的点是\n他们通过后端来控制前端代码的展示结构，这样的代码我第一次见到\n\n初见时候，不禁又对前端的作用心生鄙夷\n后面尝试复现前端的实现类的时候\n才发现，这样的组织结构，对于前端来说,是非常不友好的\n至少对一个未从头参与开发的初级学习者来说是这样的\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg.png\" width=\"400px\"/>\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg23.png\" width=\"400px\"/>\n","source":"_posts/3wyyapp.md","raw":"---\nlayout: posts\ntitle: 低配版仿网易云app\ndescription: 作者使用flutter在假期开发了一款简易的网易云app，实现了核心功能，包括歌曲的下载、播放、搜索、歌单广场等,并对网易云音乐接口进行了分析\ndate: 2024-2-1 22:47:29\ntags:\n  - android\n  - flutter\n  - 本手\n---\n\n# wyyapp\n\nA new Flutter project.\n\n## Getting Started\n\n一个简陋版的仿网易云音乐app，供学习使用\n开发实践\n1.17-2.1 一共十五天，中间休息了三天\n经历了大大小小四五次重构，原本的代码写的太烂了\n\n出于 要拓展自己技术栈的目的，这个app先告一段落\n之后需要学一些go后端以及鸿蒙生态,flutter 还是不值得all in\n不如说，由于本人的性格，我不会all in任何一门技术\n\n网易云接口是适配pc端的，对于android端的适配不是很好，所以有些功能实现起来非常复杂\n不过的确有app端的首页接口，但是其内部结构过于复杂,尝试分析，明白了大部分接口的含义\n然而，嵌套起来实在太过复杂,具体请看最后的分析\n\n所以只做了核心功能\n歌曲类的封装，包括下载、下一首、重新播放等功能\n下载类的封装、通知类的封装\n\n可以说,封装、整理、以及称得上是舒爽的代码结构是我在这个项目中学到的最有价值的东西\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fanalyze.png\" width=\"400px\"/>\n\n## 项目截图\n\n<img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fin.jpg\"/>\n\n下载功能\n<img alt=\"img_2.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_2.png\"/>\n\n通过android 的notification实现下载进度的展示 以及播放的控制\n<img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fnotifi.jpg\"/>\n<video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2FnotificationAmusiclist.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video>\n\n搜索\n<img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fsearch.png\"/>\n\n深色模式\n<img alt=\"dark mode\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fdark.jpg\"/>\n\n歌单广场\n<img alt=\"img_1.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_1.png\"/>\n<img alt=\"img_3.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_3.png\"/>\n\n批量管理\n<img alt=\"playlist\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Faddtoplaylist.mp4\"/>\n\n## “分析”\n\n以下是对于网易云音乐接口的分析的一角，总的来说\n对我启发的最重要的点是\n他们通过后端来控制前端代码的展示结构，这样的代码我第一次见到\n\n初见时候，不禁又对前端的作用心生鄙夷\n后面尝试复现前端的实现类的时候\n才发现，这样的组织结构，对于前端来说,是非常不友好的\n至少对一个未从头参与开发的初级学习者来说是这样的\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg.png\" width=\"400px\"/>\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg23.png\" width=\"400px\"/>\n","slug":"3wyyapp","published":1,"updated":"2024-07-05T03:40:01.018Z","comments":1,"photos":[],"link":"","_id":"clzoy7ge3000izw6k22wtd3ju","content":"<h1 id=\"wyyapp\"><a href=\"#wyyapp\" class=\"headerlink\" title=\"wyyapp\"></a>wyyapp</h1><p>A new Flutter project.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>一个简陋版的仿网易云音乐app，供学习使用<br>开发实践<br>1.17-2.1 一共十五天，中间休息了三天<br>经历了大大小小四五次重构，原本的代码写的太烂了</p>\n<p>出于 要拓展自己技术栈的目的，这个app先告一段落<br>之后需要学一些go后端以及鸿蒙生态,flutter 还是不值得all in<br>不如说，由于本人的性格，我不会all in任何一门技术</p>\n<p>网易云接口是适配pc端的，对于android端的适配不是很好，所以有些功能实现起来非常复杂<br>不过的确有app端的首页接口，但是其内部结构过于复杂,尝试分析，明白了大部分接口的含义<br>然而，嵌套起来实在太过复杂,具体请看最后的分析</p>\n<p>所以只做了核心功能<br>歌曲类的封装，包括下载、下一首、重新播放等功能<br>下载类的封装、通知类的封装</p>\n<p>可以说,封装、整理、以及称得上是舒爽的代码结构是我在这个项目中学到的最有价值的东西</p>\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fanalyze.png\" width=\"400px\"/>\n\n<h2 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h2><img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fin.jpg\"/>\n\n<p>下载功能<br><img alt=\"img_2.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_2.png\"/></p>\n<p>通过android 的notification实现下载进度的展示 以及播放的控制<br><img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fnotifi.jpg\"/><br><video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2FnotificationAmusiclist.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video></p>\n<p>搜索<br><img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fsearch.png\"/></p>\n<p>深色模式<br><img alt=\"dark mode\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fdark.jpg\"/></p>\n<p>歌单广场<br><img alt=\"img_1.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_1.png\"/><br><img alt=\"img_3.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_3.png\"/></p>\n<p>批量管理<br><img alt=\"playlist\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Faddtoplaylist.mp4\"/></p>\n<h2 id=\"“分析”\"><a href=\"#“分析”\" class=\"headerlink\" title=\"“分析”\"></a>“分析”</h2><p>以下是对于网易云音乐接口的分析的一角，总的来说<br>对我启发的最重要的点是<br>他们通过后端来控制前端代码的展示结构，这样的代码我第一次见到</p>\n<p>初见时候，不禁又对前端的作用心生鄙夷<br>后面尝试复现前端的实现类的时候<br>才发现，这样的组织结构，对于前端来说,是非常不友好的<br>至少对一个未从头参与开发的初级学习者来说是这样的</p>\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg.png\" width=\"400px\"/>\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg23.png\" width=\"400px\"/>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"wyyapp\"><a href=\"#wyyapp\" class=\"headerlink\" title=\"wyyapp\"></a>wyyapp</h1><p>A new Flutter project.</p>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p>一个简陋版的仿网易云音乐app，供学习使用<br>开发实践<br>1.17-2.1 一共十五天，中间休息了三天<br>经历了大大小小四五次重构，原本的代码写的太烂了</p>\n<p>出于 要拓展自己技术栈的目的，这个app先告一段落<br>之后需要学一些go后端以及鸿蒙生态,flutter 还是不值得all in<br>不如说，由于本人的性格，我不会all in任何一门技术</p>\n<p>网易云接口是适配pc端的，对于android端的适配不是很好，所以有些功能实现起来非常复杂<br>不过的确有app端的首页接口，但是其内部结构过于复杂,尝试分析，明白了大部分接口的含义<br>然而，嵌套起来实在太过复杂,具体请看最后的分析</p>\n<p>所以只做了核心功能<br>歌曲类的封装，包括下载、下一首、重新播放等功能<br>下载类的封装、通知类的封装</p>\n<p>可以说,封装、整理、以及称得上是舒爽的代码结构是我在这个项目中学到的最有价值的东西</p>\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fanalyze.png\" width=\"400px\"/>\n\n<h2 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h2><img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fin.jpg\"/>\n\n<p>下载功能<br><img alt=\"img_2.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_2.png\"/></p>\n<p>通过android 的notification实现下载进度的展示 以及播放的控制<br><img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fnotifi.jpg\"/><br><video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2FnotificationAmusiclist.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video></p>\n<p>搜索<br><img alt=\"img.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fsearch.png\"/></p>\n<p>深色模式<br><img alt=\"dark mode\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fdark.jpg\"/></p>\n<p>歌单广场<br><img alt=\"img_1.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_1.png\"/><br><img alt=\"img_3.png\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg_3.png\"/></p>\n<p>批量管理<br><img alt=\"playlist\" height=\"400px\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Faddtoplaylist.mp4\"/></p>\n<h2 id=\"“分析”\"><a href=\"#“分析”\" class=\"headerlink\" title=\"“分析”\"></a>“分析”</h2><p>以下是对于网易云音乐接口的分析的一角，总的来说<br>对我启发的最重要的点是<br>他们通过后端来控制前端代码的展示结构，这样的代码我第一次见到</p>\n<p>初见时候，不禁又对前端的作用心生鄙夷<br>后面尝试复现前端的实现类的时候<br>才发现，这样的组织结构，对于前端来说,是非常不友好的<br>至少对一个未从头参与开发的初级学习者来说是这样的</p>\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg.png\" width=\"400px\"/>\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/3source%2Fimg23.png\" width=\"400px\"/>\n"},{"layout":"posts","title":"Zing 一款前后端独立gpt软件","description":"本文介绍作者作为独立开发者，完成的一款前后端独立开发的gpt软件，包括了一些技术细节以及界面展示。总体实现了流式输出、文字回答、图片回答等核心功能","date":"2024-03-23T13:23:29.000Z","updated":"2024-07-05T03:40:01.033Z","_content":"\n事实上，我并不是一个很聪明的人。\n\n就如同我第二篇文章写的，每写一个字，我都要思量好久。我不知那时那刻落笔的时候是处于一种什么养的自大的心理，\n我把它归咎于完美主义，而此时此刻看来这种自我归因又略显简陋了。\n我常常会想，会不会有一种完美的笔法，能够穷尽此时此刻我所有的想法于一张纸上。于是我便踌躇住，想要捕捉住它。\n然后，我就会在这种踌躇中，一次次的推迟，直到最后，我发现我已经不再是那个想要写下一篇文章的人了。\n\n**Zing** 一个GPT软件\n\n## 概述\n\n大致使用的东西：\n\n后端使用的是go语言，前端使用的是flutter。\nRedis用于邮箱验证码\ndocker用于本地开发验证\nLinux一些命令\n\n文本聊天使用的模型是GPT-3.5，图片聊天使用的是Stable-diffusion-xl模型\n\n## 界面功能展示 项目截图\n\nlogo设计 与 彩色logo\n其中，黑白logo用于纯文字聊天，彩色logo用于图片\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo.png\" width=\"200px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo1.png\" width=\"200px\" style=\"display:inline;\"/>\n\n### 注册登录界面 login and register\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogin.jpg\" width=\"250px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fregister.jpg\" width=\"250px\" style=\"display:inline;\"/>\n\n### 主界面 main\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fmain.jpg\" width=\"250px\"/>\n\n### 聊天界面 chat\n\n1.文字聊天演示 text chat\n<video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Ftext_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video>\n2.图片聊天演示 image chat\n<video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fimg_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video>\n\n### 一些附加\n\n1.提供prompts\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fprovide_prompts.jpg\" width=\"250px\"/>\n\n2.使用prompts\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fchat_prompts.jpg\" width=\"250px\"/>\n\n3.版本检查\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fversion_update.jpg\" width=\"250px\"/>\n\n## 一些总结\n\n总体开发大致持续了十五天左右，从开始学习go到目前以上展示的进度\n可以称得上是收获颇丰\n\n- 技术上来讲,这是第一次真正实操了docker、redis、linux、swagger以及一些问题\n- 比之前的纸上谈兵不同 ，实践之后才发现，原来对于我来讲像是一道道关隘的技术概念，真正实操起来也不过尔尔\n- 产品上来讲，这次我是真正体会到了文档的重要性，有组织的开发流程以及预先规定好的字段和接口规范、功能规范，对于开发是真的大有益处\n  心态上来讲，”先完成再优化“，我在开发过程中，一直在想着如何优化，导致进度缓慢\n\n之后会专门写一篇文章来总结一下这次开发的一些经验和教训\n不过，从我对写作的热情来看，这篇文章可能会拖很久，我还是在这里提一嘴吧\n也不算太鸽\n\n比如，在用移动端连接pc端的后端的时候，即使使用了跨域，也会无法访问到\n即使在同一个wifi下，也会有这个问题，因为即使是同一个网络，也可能会分不同网段\n这涉及内网穿透\n\n```\n","source":"_posts/4Zing.md","raw":"---\nlayout: posts\ntitle: Zing 一款前后端独立gpt软件\ndescription: 本文介绍作者作为独立开发者，完成的一款前后端独立开发的gpt软件，包括了一些技术细节以及界面展示。总体实现了流式输出、文字回答、图片回答等核心功能\ndate: 2024-3-23 21:23:29\nupdated:\ntags:\n  - flutter\n  - ai\n  - develop\n  - 妙手\n---\n\n事实上，我并不是一个很聪明的人。\n\n就如同我第二篇文章写的，每写一个字，我都要思量好久。我不知那时那刻落笔的时候是处于一种什么养的自大的心理，\n我把它归咎于完美主义，而此时此刻看来这种自我归因又略显简陋了。\n我常常会想，会不会有一种完美的笔法，能够穷尽此时此刻我所有的想法于一张纸上。于是我便踌躇住，想要捕捉住它。\n然后，我就会在这种踌躇中，一次次的推迟，直到最后，我发现我已经不再是那个想要写下一篇文章的人了。\n\n**Zing** 一个GPT软件\n\n## 概述\n\n大致使用的东西：\n\n后端使用的是go语言，前端使用的是flutter。\nRedis用于邮箱验证码\ndocker用于本地开发验证\nLinux一些命令\n\n文本聊天使用的模型是GPT-3.5，图片聊天使用的是Stable-diffusion-xl模型\n\n## 界面功能展示 项目截图\n\nlogo设计 与 彩色logo\n其中，黑白logo用于纯文字聊天，彩色logo用于图片\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo.png\" width=\"200px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo1.png\" width=\"200px\" style=\"display:inline;\"/>\n\n### 注册登录界面 login and register\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogin.jpg\" width=\"250px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fregister.jpg\" width=\"250px\" style=\"display:inline;\"/>\n\n### 主界面 main\n\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fmain.jpg\" width=\"250px\"/>\n\n### 聊天界面 chat\n\n1.文字聊天演示 text chat\n<video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Ftext_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video>\n2.图片聊天演示 image chat\n<video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fimg_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video>\n\n### 一些附加\n\n1.提供prompts\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fprovide_prompts.jpg\" width=\"250px\"/>\n\n2.使用prompts\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fchat_prompts.jpg\" width=\"250px\"/>\n\n3.版本检查\n<img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fversion_update.jpg\" width=\"250px\"/>\n\n## 一些总结\n\n总体开发大致持续了十五天左右，从开始学习go到目前以上展示的进度\n可以称得上是收获颇丰\n\n- 技术上来讲,这是第一次真正实操了docker、redis、linux、swagger以及一些问题\n- 比之前的纸上谈兵不同 ，实践之后才发现，原来对于我来讲像是一道道关隘的技术概念，真正实操起来也不过尔尔\n- 产品上来讲，这次我是真正体会到了文档的重要性，有组织的开发流程以及预先规定好的字段和接口规范、功能规范，对于开发是真的大有益处\n  心态上来讲，”先完成再优化“，我在开发过程中，一直在想着如何优化，导致进度缓慢\n\n之后会专门写一篇文章来总结一下这次开发的一些经验和教训\n不过，从我对写作的热情来看，这篇文章可能会拖很久，我还是在这里提一嘴吧\n也不算太鸽\n\n比如，在用移动端连接pc端的后端的时候，即使使用了跨域，也会无法访问到\n即使在同一个wifi下，也会有这个问题，因为即使是同一个网络，也可能会分不同网段\n这涉及内网穿透\n\n```\n","slug":"4Zing","published":1,"comments":1,"photos":[],"link":"","_id":"clzoy7ge6000lzw6kcjfp62ej","content":"<p>事实上，我并不是一个很聪明的人。</p>\n<p>就如同我第二篇文章写的，每写一个字，我都要思量好久。我不知那时那刻落笔的时候是处于一种什么养的自大的心理，<br>我把它归咎于完美主义，而此时此刻看来这种自我归因又略显简陋了。<br>我常常会想，会不会有一种完美的笔法，能够穷尽此时此刻我所有的想法于一张纸上。于是我便踌躇住，想要捕捉住它。<br>然后，我就会在这种踌躇中，一次次的推迟，直到最后，我发现我已经不再是那个想要写下一篇文章的人了。</p>\n<p><strong>Zing</strong> 一个GPT软件</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>大致使用的东西：</p>\n<p>后端使用的是go语言，前端使用的是flutter。<br>Redis用于邮箱验证码<br>docker用于本地开发验证<br>Linux一些命令</p>\n<p>文本聊天使用的模型是GPT-3.5，图片聊天使用的是Stable-diffusion-xl模型</p>\n<h2 id=\"界面功能展示-项目截图\"><a href=\"#界面功能展示-项目截图\" class=\"headerlink\" title=\"界面功能展示 项目截图\"></a>界面功能展示 项目截图</h2><p>logo设计 与 彩色logo<br>其中，黑白logo用于纯文字聊天，彩色logo用于图片<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo.png\" width=\"200px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo1.png\" width=\"200px\" style=\"display:inline;\"/></p>\n<h3 id=\"注册登录界面-login-and-register\"><a href=\"#注册登录界面-login-and-register\" class=\"headerlink\" title=\"注册登录界面 login and register\"></a>注册登录界面 login and register</h3><p><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogin.jpg\" width=\"250px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fregister.jpg\" width=\"250px\" style=\"display:inline;\"/></p>\n<h3 id=\"主界面-main\"><a href=\"#主界面-main\" class=\"headerlink\" title=\"主界面 main\"></a>主界面 main</h3><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fmain.jpg\" width=\"250px\"/>\n\n<h3 id=\"聊天界面-chat\"><a href=\"#聊天界面-chat\" class=\"headerlink\" title=\"聊天界面 chat\"></a>聊天界面 chat</h3><p>1.文字聊天演示 text chat<br><video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Ftext_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video><br>2.图片聊天演示 image chat<br><video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fimg_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video></p>\n<h3 id=\"一些附加\"><a href=\"#一些附加\" class=\"headerlink\" title=\"一些附加\"></a>一些附加</h3><p>1.提供prompts<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fprovide_prompts.jpg\" width=\"250px\"/></p>\n<p>2.使用prompts<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fchat_prompts.jpg\" width=\"250px\"/></p>\n<p>3.版本检查<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fversion_update.jpg\" width=\"250px\"/></p>\n<h2 id=\"一些总结\"><a href=\"#一些总结\" class=\"headerlink\" title=\"一些总结\"></a>一些总结</h2><p>总体开发大致持续了十五天左右，从开始学习go到目前以上展示的进度<br>可以称得上是收获颇丰</p>\n<ul>\n<li>技术上来讲,这是第一次真正实操了docker、redis、linux、swagger以及一些问题</li>\n<li>比之前的纸上谈兵不同 ，实践之后才发现，原来对于我来讲像是一道道关隘的技术概念，真正实操起来也不过尔尔</li>\n<li>产品上来讲，这次我是真正体会到了文档的重要性，有组织的开发流程以及预先规定好的字段和接口规范、功能规范，对于开发是真的大有益处<br>心态上来讲，”先完成再优化“，我在开发过程中，一直在想着如何优化，导致进度缓慢</li>\n</ul>\n<p>之后会专门写一篇文章来总结一下这次开发的一些经验和教训<br>不过，从我对写作的热情来看，这篇文章可能会拖很久，我还是在这里提一嘴吧<br>也不算太鸽</p>\n<p>比如，在用移动端连接pc端的后端的时候，即使使用了跨域，也会无法访问到<br>即使在同一个wifi下，也会有这个问题，因为即使是同一个网络，也可能会分不同网段<br>这涉及内网穿透</p>\n<pre><code>\n</code></pre>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>事实上，我并不是一个很聪明的人。</p>\n<p>就如同我第二篇文章写的，每写一个字，我都要思量好久。我不知那时那刻落笔的时候是处于一种什么养的自大的心理，<br>我把它归咎于完美主义，而此时此刻看来这种自我归因又略显简陋了。<br>我常常会想，会不会有一种完美的笔法，能够穷尽此时此刻我所有的想法于一张纸上。于是我便踌躇住，想要捕捉住它。<br>然后，我就会在这种踌躇中，一次次的推迟，直到最后，我发现我已经不再是那个想要写下一篇文章的人了。</p>\n<p><strong>Zing</strong> 一个GPT软件</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>大致使用的东西：</p>\n<p>后端使用的是go语言，前端使用的是flutter。<br>Redis用于邮箱验证码<br>docker用于本地开发验证<br>Linux一些命令</p>\n<p>文本聊天使用的模型是GPT-3.5，图片聊天使用的是Stable-diffusion-xl模型</p>\n<h2 id=\"界面功能展示-项目截图\"><a href=\"#界面功能展示-项目截图\" class=\"headerlink\" title=\"界面功能展示 项目截图\"></a>界面功能展示 项目截图</h2><p>logo设计 与 彩色logo<br>其中，黑白logo用于纯文字聊天，彩色logo用于图片<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo.png\" width=\"200px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogo1.png\" width=\"200px\" style=\"display:inline;\"/></p>\n<h3 id=\"注册登录界面-login-and-register\"><a href=\"#注册登录界面-login-and-register\" class=\"headerlink\" title=\"注册登录界面 login and register\"></a>注册登录界面 login and register</h3><p><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Flogin.jpg\" width=\"250px\" style=\"display:inline;\"/>  <img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fregister.jpg\" width=\"250px\" style=\"display:inline;\"/></p>\n<h3 id=\"主界面-main\"><a href=\"#主界面-main\" class=\"headerlink\" title=\"主界面 main\"></a>主界面 main</h3><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fmain.jpg\" width=\"250px\"/>\n\n<h3 id=\"聊天界面-chat\"><a href=\"#聊天界面-chat\" class=\"headerlink\" title=\"聊天界面 chat\"></a>聊天界面 chat</h3><p>1.文字聊天演示 text chat<br><video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Ftext_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video><br>2.图片聊天演示 image chat<br><video src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fimg_chat.mp4\" controls=\"controls\" width=\"400px\" height=\"300px\"></video></p>\n<h3 id=\"一些附加\"><a href=\"#一些附加\" class=\"headerlink\" title=\"一些附加\"></a>一些附加</h3><p>1.提供prompts<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fprovide_prompts.jpg\" width=\"250px\"/></p>\n<p>2.使用prompts<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fchat_prompts.jpg\" width=\"250px\"/></p>\n<p>3.版本检查<br><img alt=\"img.png\" src=\"https://sherlock-1314462060.cos.ap-nanjing.myqcloud.com/self-page/4source%2Fversion_update.jpg\" width=\"250px\"/></p>\n<h2 id=\"一些总结\"><a href=\"#一些总结\" class=\"headerlink\" title=\"一些总结\"></a>一些总结</h2><p>总体开发大致持续了十五天左右，从开始学习go到目前以上展示的进度<br>可以称得上是收获颇丰</p>\n<ul>\n<li>技术上来讲,这是第一次真正实操了docker、redis、linux、swagger以及一些问题</li>\n<li>比之前的纸上谈兵不同 ，实践之后才发现，原来对于我来讲像是一道道关隘的技术概念，真正实操起来也不过尔尔</li>\n<li>产品上来讲，这次我是真正体会到了文档的重要性，有组织的开发流程以及预先规定好的字段和接口规范、功能规范，对于开发是真的大有益处<br>心态上来讲，”先完成再优化“，我在开发过程中，一直在想着如何优化，导致进度缓慢</li>\n</ul>\n<p>之后会专门写一篇文章来总结一下这次开发的一些经验和教训<br>不过，从我对写作的热情来看，这篇文章可能会拖很久，我还是在这里提一嘴吧<br>也不算太鸽</p>\n<p>比如，在用移动端连接pc端的后端的时候，即使使用了跨域，也会无法访问到<br>即使在同一个wifi下，也会有这个问题，因为即使是同一个网络，也可能会分不同网段<br>这涉及内网穿透</p>\n<pre><code>\n</code></pre>\n"},{"layout":"posts","title":"简单的防抖及其迭代","description":"本文主要讲述了防抖的基本原理，以及在实际开发中的应用，以及一些迭代","date":"2024-04-20T08:32:52.283Z","updated":"2024-07-03T02:03:46.907Z","_content":"\n![(可以写关于图片的描述)](/source/_img/bg1.png)\n\n以下情景纯属虚构，如有雷同纯属巧合\n\n## 初相见\n\n这两天小刘被安排到一个项目（被老板pua中），遇到了这样一个问题：在用户登录的时候手抖点了两次，请求了两侧资源设置了两次token，但是真正完成的有效功能只有一次。\n\n```javascript\nlet login = () => {\n    console.log(\"login\")\n}\n```\n\n### 第一次\n\n本着大国工匠的精神，老板亲自催促小刘优化这个问题\n\n于是小刘把它做成了下面这样\n\n```javascript\n    let delay = 500\nlet timeOut\n\nlet login = () => {\n    if (timeOut) {\n        clearTimeOut(timeOut);\n    }\n    timeOut = setTimeout(() => {\n        console.log(\"login\")\n    }, delay)\n}\n```\n\n不错，很棒，每次点击如果和上一次相差不到0.5秒，那么取消上一次的登录请求，并做一些提示。\n\n但是，过了两天，小刘又遇到了同样的问题，用户的登出方法以及其他的每个按钮好像都需要类似的功能\n\n要知道，小刘是个连骑电车都嫌拿着钥匙麻烦的人\n\n他可不愿意每次都定义好几个delay\n\n```javascript\n    let delay = 500\nlet delay2 = 1000\nlet delay3 = 1500\n\nlet timeOut\nlet timeOut2\nlet timeOut3\n\nlet login = () => {\n    if (timeOut) {\n        //做一些提示\n        clearTimeout(timeOut);\n    }\n    timeOut = setTimeout(() => {\n        console.log(\"login\")\n    }, delay);\n}\n```\n\n## 闭包\n\n突然，小刘灵光一闪，既然每份延迟都使用独立的delay和timeout，那我是不是可以用闭包记住上下文的特性，把这种类似的方法单独抽象出来？\n\n```javascript\nexport function debounce(func, delay) {\n    let timeout;\n\n    return function (...args) {\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            console.log(\"debounce\")\n            func(args);\n        }, delay);\n    }\n}\n```\n\n现在，小刘的代码成了这样子\n\n```javascript\n  let login = () => {\n    console.log(\"login\")\n}\n\nlet logout = () => {\n    console.log(\"logout\")\n}\n\nlogin = debounce(login, 500)\nlogout = debounce(logout, 500)\n\nreturn (\n    <>\n        <button onClick={\n            () => {\n                login()\n            }\n        }>Click me\n        </button>\n        <button onClick={\n            () => {\n                logout()\n            }\n        }>\n        </button>\n\n    </>\n);\n```\n\n这样，就不会有那么多delay1.delay2.delay3.delay4......delayn了\n\n小刘兴冲冲把他的代码提交了上去\n\n## 再修改 —— 原型\n\n另一位同事小文兴冲冲地把更新的代码拉了下来，看到了小刘的代码\n\n然后他浑身一颤，想到了项目发展到最后可能出现这样的情况\n\n```javascript\n   login = debounce(login, 500)\nlogout = debounce(logout, 500)\nfn = debounce(fn, 500)\nfn1 = debounce(fn1, 500)\nfn2 = debounce(fn2, 500)\nfn3 = debounce(fn3, 500)\n```\n\n每个方法执行防抖都要重新赋一个值，每个赋值都需要传入一个可能完全一样的delay\n\n不仅如此，fn1被debounce处理之前的函数也丢失了！\n\n这意味着我们如果想要使用未debounce的函数，就必须要重新定义一个，而且名字还不能一样。\n\n事实上，小文不仅仅是个喝水都懒得张嘴的懒货，而且也是一个无可救药的 ”起名困难户“，\n\n他绝对不能让这种事情发生\n\n所以他想到，\n\n能不能让每个方法都具有一个debounce的方法属性，调用debounce则执行\n\nof course, it can!\n\n```javascript\nexport function debounce(delay) {\n    if (!delay) delay = 500;\n    let timeout;\n    const func = this;\t//这里的this是调用debounce的对象，此处是方法对象\n\n    return function (...args) {\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            func(args);\n        }, delay);\n    }\n}\n```\n\n小文首先把debounce工具类函数改成了上面这个样子\n\n然后又添加了这样一句话\n\n```javascript\n    Function.prototype.debounce = debounce\n```\n\n于是\n\n```javascript\nFunction.prototype.debounce = debounce\n\nfunction onClick() {\n    console.log(\"clickme\")\n}\n\nreturn (\n    <>\n        <button onClick={onClick.debounce()}>Click me</button>\n    </>\n)\n```\n\n这样就可以在不影响原始方法的情况下使用它的debounce拉，而且还不需要传delay值!\n\n```javascript\n    if (!delay) delay = 500;  //如果delay不存在（null、undefined、0...） 就默认为500\n```\n\n**需要注意的是，将 `debounce` 函数添加到 `Function.prototype`\n上并不是一个好的实践，因为它会改变所有函数的行为，可能导致其他依赖于 `Function.prototype` 的代码出现问题。**\n此处仅仅是一个示范，如果没有严谨的文档和规约不建议在项目中使用\n\n## 特殊的环境\n\n不久，小文就被优化了，他的代码流到了一位更年轻，技术更好的小刀身上，\n\n小刀是一位资深的java工程师，非常喜欢用类、对象表示一切\n\n不久，他就发现了这样一个问题：\n\n```javascript\n    // eslint-disable-next-line no-extend-native\nFunction.prototype.debounce = debounce\n\nlet user = {\n    name: \"John\",\n    sayHi() {\n        console.log(\"Hi, \" + this.name);\n    },\n};\n\nreturn (\n    <>\n        <button onClick={() => {\n            user.sayHi.debounce(1000)()\n        }}>Click me\n        </button>\n    </>\n)    \n```\n\n当使用user里的sayHi调用debounce时，会报错！\n\n```\nUncaught TypeError: Cannot convert undefined or null to object\n```\n\n小文刀当即力断，立刻反应出来了问题在哪，然后他把debounce改建成了如下这样\n\n```javascript\nexport function debounce(delay) {\n    console.log(\"debounce\");\n    if (!delay) delay = 500;\n    let timeout;\n    const func = this;\n\n    return function (...args) {\n        const env = this;  //////新增 生命env为this\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            func.apply(env, args);  ////新增 绑定func函数的词法环境（上下文）为env\n        }, delay);\n    }\n}\n```\n\n不过可惜，他对javascript this机制的了解还是不是很深\n\n深谙javascript八股之道的朋友可能已经发现了，这段代码依旧会报错！\n\n以下是原因\n\n1. 在调用user.sayHi时才会计算this的值\n2. 调用过程为： (user.sayHi).debounce()()\n   ,在user.sayHi时，this的值并没有成为”user“，而且sayHi也不是一个词法环境，所以在调用debounce，形成闭包并返回函数后，给env赋值的this时undefined\n\n所以 ....\n\n当然，前面说过，小刀技术水平还不错，于是他很自然地想到了，把需要成为this的环境传进去，当然，也需要兼容不需要this的函数\n\n```javascript\nexport function debounce(delay, env) {\n   if (!delay) delay = 500;\n   let timeout;\n   const func = this;\n\n   return function (...args) {\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n         if (env) {\n            func.apply(env, args);\n         } else {\n            func(...args);\n         }\n      }, delay);\n   }\n}\n```\n\n然而，沉溺在修改代码的忙碌中，小刀并没有意识到可以这么做....\n\n```javascript\n  <button onClick={user.sayHi.bind(user).debounce(500)}>\n   Click me\n  </button>\n```\n\nbind会返回一个绑定了user的函数\n\napply则是返回绑定了user的函数执行的结构\n\n## 结尾\n\n说实话，在写这篇文章之前，我只准确地判断了了原型及之前的结果，对于user.sayHi.debouce的运行结果，我理所当然认为也是可以那么运行的。\n\n除去对this的分析之外，还有一点react的小小的收获\n\n```javascript\n let user = {\n    name: \"John\",\n    sayHi() {\n        console.log(\"Hi, \" + this.name);\n    },\n};\n\nreturn (\n    <>\n        <button onClick={user.sayHi}>Click me</button>\n    </>\n)\n```\n\n在这段代码中调用onClick，是会报错的，因为此处的user.sayHi是一个”函数名“，React会把user.sayHi赋值给onClick，然后再执行onClick()\n\n但是，仔细一想，其实这种逻辑我早就应该知道，如下\n\n```javascript\n    let user = {\n    name: \"John\",\n    sayHi() {\n        console.log(\"Hi, \" + this.name);\n    },\n};\n\nlet animal = {\n    name: \"Dog\",\n}\n\nlet sayHi = user.sayHi\n\nsayHi()  ///1. 报错，因为this丢失，为undefined\nsayHi.apply(user)  //2. Hi, John,成功，使用apply绑定this\nuser.sayHi.apply(animal)  //3. Hi, Dog,成功，使用apply绑定this\t\n```\n\nonClick的赋值正是第一种，\n\n解决方法，外部包裹一个箭头函数或者function匿名函数即可，但是要注意的是这种方法对于要调用debounce的onClick却行不通，\n\n```\n  <button onClick={()=>{\n  \tuser.sayHi.debounce()()\n  }}>Click me</button>\n```\n\n因为赋值给onClick的是箭头函数，而不是debounce，所以，每次调用onClick的时候都会重新创建一个debounce\n\n顺便说一句，本来是想用ts写这篇文章的，但是在this赋值的时候会报一堆错，于是改用js\n想起来前些日子看到了一篇文章 ”get out typescript“ 好像题目如下，抨击了ts丢失了js最显著的优点：”灵活性“\n现在看来，确实如此\n","source":"_posts/5js_debounce.md","raw":"---\nlayout: posts\ntitle: 简单的防抖及其迭代\ndescription: 本文主要讲述了防抖的基本原理，以及在实际开发中的应用，以及一些迭代\ndate: 2024-4.20 16.36\nupdated:\ntags:\n  - develop\n  - js\n---\n\n![(可以写关于图片的描述)](/source/_img/bg1.png)\n\n以下情景纯属虚构，如有雷同纯属巧合\n\n## 初相见\n\n这两天小刘被安排到一个项目（被老板pua中），遇到了这样一个问题：在用户登录的时候手抖点了两次，请求了两侧资源设置了两次token，但是真正完成的有效功能只有一次。\n\n```javascript\nlet login = () => {\n    console.log(\"login\")\n}\n```\n\n### 第一次\n\n本着大国工匠的精神，老板亲自催促小刘优化这个问题\n\n于是小刘把它做成了下面这样\n\n```javascript\n    let delay = 500\nlet timeOut\n\nlet login = () => {\n    if (timeOut) {\n        clearTimeOut(timeOut);\n    }\n    timeOut = setTimeout(() => {\n        console.log(\"login\")\n    }, delay)\n}\n```\n\n不错，很棒，每次点击如果和上一次相差不到0.5秒，那么取消上一次的登录请求，并做一些提示。\n\n但是，过了两天，小刘又遇到了同样的问题，用户的登出方法以及其他的每个按钮好像都需要类似的功能\n\n要知道，小刘是个连骑电车都嫌拿着钥匙麻烦的人\n\n他可不愿意每次都定义好几个delay\n\n```javascript\n    let delay = 500\nlet delay2 = 1000\nlet delay3 = 1500\n\nlet timeOut\nlet timeOut2\nlet timeOut3\n\nlet login = () => {\n    if (timeOut) {\n        //做一些提示\n        clearTimeout(timeOut);\n    }\n    timeOut = setTimeout(() => {\n        console.log(\"login\")\n    }, delay);\n}\n```\n\n## 闭包\n\n突然，小刘灵光一闪，既然每份延迟都使用独立的delay和timeout，那我是不是可以用闭包记住上下文的特性，把这种类似的方法单独抽象出来？\n\n```javascript\nexport function debounce(func, delay) {\n    let timeout;\n\n    return function (...args) {\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            console.log(\"debounce\")\n            func(args);\n        }, delay);\n    }\n}\n```\n\n现在，小刘的代码成了这样子\n\n```javascript\n  let login = () => {\n    console.log(\"login\")\n}\n\nlet logout = () => {\n    console.log(\"logout\")\n}\n\nlogin = debounce(login, 500)\nlogout = debounce(logout, 500)\n\nreturn (\n    <>\n        <button onClick={\n            () => {\n                login()\n            }\n        }>Click me\n        </button>\n        <button onClick={\n            () => {\n                logout()\n            }\n        }>\n        </button>\n\n    </>\n);\n```\n\n这样，就不会有那么多delay1.delay2.delay3.delay4......delayn了\n\n小刘兴冲冲把他的代码提交了上去\n\n## 再修改 —— 原型\n\n另一位同事小文兴冲冲地把更新的代码拉了下来，看到了小刘的代码\n\n然后他浑身一颤，想到了项目发展到最后可能出现这样的情况\n\n```javascript\n   login = debounce(login, 500)\nlogout = debounce(logout, 500)\nfn = debounce(fn, 500)\nfn1 = debounce(fn1, 500)\nfn2 = debounce(fn2, 500)\nfn3 = debounce(fn3, 500)\n```\n\n每个方法执行防抖都要重新赋一个值，每个赋值都需要传入一个可能完全一样的delay\n\n不仅如此，fn1被debounce处理之前的函数也丢失了！\n\n这意味着我们如果想要使用未debounce的函数，就必须要重新定义一个，而且名字还不能一样。\n\n事实上，小文不仅仅是个喝水都懒得张嘴的懒货，而且也是一个无可救药的 ”起名困难户“，\n\n他绝对不能让这种事情发生\n\n所以他想到，\n\n能不能让每个方法都具有一个debounce的方法属性，调用debounce则执行\n\nof course, it can!\n\n```javascript\nexport function debounce(delay) {\n    if (!delay) delay = 500;\n    let timeout;\n    const func = this;\t//这里的this是调用debounce的对象，此处是方法对象\n\n    return function (...args) {\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            func(args);\n        }, delay);\n    }\n}\n```\n\n小文首先把debounce工具类函数改成了上面这个样子\n\n然后又添加了这样一句话\n\n```javascript\n    Function.prototype.debounce = debounce\n```\n\n于是\n\n```javascript\nFunction.prototype.debounce = debounce\n\nfunction onClick() {\n    console.log(\"clickme\")\n}\n\nreturn (\n    <>\n        <button onClick={onClick.debounce()}>Click me</button>\n    </>\n)\n```\n\n这样就可以在不影响原始方法的情况下使用它的debounce拉，而且还不需要传delay值!\n\n```javascript\n    if (!delay) delay = 500;  //如果delay不存在（null、undefined、0...） 就默认为500\n```\n\n**需要注意的是，将 `debounce` 函数添加到 `Function.prototype`\n上并不是一个好的实践，因为它会改变所有函数的行为，可能导致其他依赖于 `Function.prototype` 的代码出现问题。**\n此处仅仅是一个示范，如果没有严谨的文档和规约不建议在项目中使用\n\n## 特殊的环境\n\n不久，小文就被优化了，他的代码流到了一位更年轻，技术更好的小刀身上，\n\n小刀是一位资深的java工程师，非常喜欢用类、对象表示一切\n\n不久，他就发现了这样一个问题：\n\n```javascript\n    // eslint-disable-next-line no-extend-native\nFunction.prototype.debounce = debounce\n\nlet user = {\n    name: \"John\",\n    sayHi() {\n        console.log(\"Hi, \" + this.name);\n    },\n};\n\nreturn (\n    <>\n        <button onClick={() => {\n            user.sayHi.debounce(1000)()\n        }}>Click me\n        </button>\n    </>\n)    \n```\n\n当使用user里的sayHi调用debounce时，会报错！\n\n```\nUncaught TypeError: Cannot convert undefined or null to object\n```\n\n小文刀当即力断，立刻反应出来了问题在哪，然后他把debounce改建成了如下这样\n\n```javascript\nexport function debounce(delay) {\n    console.log(\"debounce\");\n    if (!delay) delay = 500;\n    let timeout;\n    const func = this;\n\n    return function (...args) {\n        const env = this;  //////新增 生命env为this\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            func.apply(env, args);  ////新增 绑定func函数的词法环境（上下文）为env\n        }, delay);\n    }\n}\n```\n\n不过可惜，他对javascript this机制的了解还是不是很深\n\n深谙javascript八股之道的朋友可能已经发现了，这段代码依旧会报错！\n\n以下是原因\n\n1. 在调用user.sayHi时才会计算this的值\n2. 调用过程为： (user.sayHi).debounce()()\n   ,在user.sayHi时，this的值并没有成为”user“，而且sayHi也不是一个词法环境，所以在调用debounce，形成闭包并返回函数后，给env赋值的this时undefined\n\n所以 ....\n\n当然，前面说过，小刀技术水平还不错，于是他很自然地想到了，把需要成为this的环境传进去，当然，也需要兼容不需要this的函数\n\n```javascript\nexport function debounce(delay, env) {\n   if (!delay) delay = 500;\n   let timeout;\n   const func = this;\n\n   return function (...args) {\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n         if (env) {\n            func.apply(env, args);\n         } else {\n            func(...args);\n         }\n      }, delay);\n   }\n}\n```\n\n然而，沉溺在修改代码的忙碌中，小刀并没有意识到可以这么做....\n\n```javascript\n  <button onClick={user.sayHi.bind(user).debounce(500)}>\n   Click me\n  </button>\n```\n\nbind会返回一个绑定了user的函数\n\napply则是返回绑定了user的函数执行的结构\n\n## 结尾\n\n说实话，在写这篇文章之前，我只准确地判断了了原型及之前的结果，对于user.sayHi.debouce的运行结果，我理所当然认为也是可以那么运行的。\n\n除去对this的分析之外，还有一点react的小小的收获\n\n```javascript\n let user = {\n    name: \"John\",\n    sayHi() {\n        console.log(\"Hi, \" + this.name);\n    },\n};\n\nreturn (\n    <>\n        <button onClick={user.sayHi}>Click me</button>\n    </>\n)\n```\n\n在这段代码中调用onClick，是会报错的，因为此处的user.sayHi是一个”函数名“，React会把user.sayHi赋值给onClick，然后再执行onClick()\n\n但是，仔细一想，其实这种逻辑我早就应该知道，如下\n\n```javascript\n    let user = {\n    name: \"John\",\n    sayHi() {\n        console.log(\"Hi, \" + this.name);\n    },\n};\n\nlet animal = {\n    name: \"Dog\",\n}\n\nlet sayHi = user.sayHi\n\nsayHi()  ///1. 报错，因为this丢失，为undefined\nsayHi.apply(user)  //2. Hi, John,成功，使用apply绑定this\nuser.sayHi.apply(animal)  //3. Hi, Dog,成功，使用apply绑定this\t\n```\n\nonClick的赋值正是第一种，\n\n解决方法，外部包裹一个箭头函数或者function匿名函数即可，但是要注意的是这种方法对于要调用debounce的onClick却行不通，\n\n```\n  <button onClick={()=>{\n  \tuser.sayHi.debounce()()\n  }}>Click me</button>\n```\n\n因为赋值给onClick的是箭头函数，而不是debounce，所以，每次调用onClick的时候都会重新创建一个debounce\n\n顺便说一句，本来是想用ts写这篇文章的，但是在this赋值的时候会报一堆错，于是改用js\n想起来前些日子看到了一篇文章 ”get out typescript“ 好像题目如下，抨击了ts丢失了js最显著的优点：”灵活性“\n现在看来，确实如此\n","slug":"5js_debounce","published":1,"comments":1,"photos":[],"link":"","_id":"clzoy7ge7000nzw6kgcx0ebjq","content":"<p><img src=\"/source/_img/bg1.png\" alt=\"(可以写关于图片的描述)\"></p>\n<p>以下情景纯属虚构，如有雷同纯属巧合</p>\n<h2 id=\"初相见\"><a href=\"#初相见\" class=\"headerlink\" title=\"初相见\"></a>初相见</h2><p>这两天小刘被安排到一个项目（被老板pua中），遇到了这样一个问题：在用户登录的时候手抖点了两次，请求了两侧资源设置了两次token，但是真正完成的有效功能只有一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第一次\"><a href=\"#第一次\" class=\"headerlink\" title=\"第一次\"></a>第一次</h3><p>本着大国工匠的精神，老板亲自催促小刘优化这个问题</p>\n<p>于是小刘把它做成了下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> delay = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeOut) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">clearTimeOut</span>(timeOut);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timeOut = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不错，很棒，每次点击如果和上一次相差不到0.5秒，那么取消上一次的登录请求，并做一些提示。</p>\n<p>但是，过了两天，小刘又遇到了同样的问题，用户的登出方法以及其他的每个按钮好像都需要类似的功能</p>\n<p>要知道，小刘是个连骑电车都嫌拿着钥匙麻烦的人</p>\n<p>他可不愿意每次都定义好几个delay</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> delay = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> delay2 = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> delay3 = <span class=\"number\">1500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut</span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut2</span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeOut) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些提示</span></span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeOut);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timeOut = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>突然，小刘灵光一闪，既然每份延迟都使用独立的delay和timeout，那我是不是可以用闭包记住上下文的特性，把这种类似的方法单独抽象出来？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;debounce&quot;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">func</span>(args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，小刘的代码成了这样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">logout</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;logout&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">login = <span class=\"title function_\">debounce</span>(login, <span class=\"number\">500</span>)</span><br><span class=\"line\">logout = <span class=\"title function_\">debounce</span>(logout, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            () =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                login()</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&gt;Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            () =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                logout()</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这样，就不会有那么多delay1.delay2.delay3.delay4……delayn了</p>\n<p>小刘兴冲冲把他的代码提交了上去</p>\n<h2 id=\"再修改-——-原型\"><a href=\"#再修改-——-原型\" class=\"headerlink\" title=\"再修改 —— 原型\"></a>再修改 —— 原型</h2><p>另一位同事小文兴冲冲地把更新的代码拉了下来，看到了小刘的代码</p>\n<p>然后他浑身一颤，想到了项目发展到最后可能出现这样的情况</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   login = <span class=\"title function_\">debounce</span>(login, <span class=\"number\">500</span>)</span><br><span class=\"line\">logout = <span class=\"title function_\">debounce</span>(logout, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn = <span class=\"title function_\">debounce</span>(fn, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn1 = <span class=\"title function_\">debounce</span>(fn1, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn2 = <span class=\"title function_\">debounce</span>(fn2, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn3 = <span class=\"title function_\">debounce</span>(fn3, <span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n\n<p>每个方法执行防抖都要重新赋一个值，每个赋值都需要传入一个可能完全一样的delay</p>\n<p>不仅如此，fn1被debounce处理之前的函数也丢失了！</p>\n<p>这意味着我们如果想要使用未debounce的函数，就必须要重新定义一个，而且名字还不能一样。</p>\n<p>事实上，小文不仅仅是个喝水都懒得张嘴的懒货，而且也是一个无可救药的 ”起名困难户“，</p>\n<p>他绝对不能让这种事情发生</p>\n<p>所以他想到，</p>\n<p>能不能让每个方法都具有一个debounce的方法属性，调用debounce则执行</p>\n<p>of course, it can!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> func = <span class=\"variable language_\">this</span>;\t<span class=\"comment\">//这里的this是调用debounce的对象，此处是方法对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>(args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>小文首先把debounce工具类函数改成了上面这个样子</p>\n<p>然后又添加了这样一句话</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">debounce</span> = debounce</span><br></pre></td></tr></table></figure>\n\n<p>于是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">debounce</span> = debounce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;clickme&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick.debounce()&#125;</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在不影响原始方法的情况下使用它的debounce拉，而且还不需要传delay值!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;  <span class=\"comment\">//如果delay不存在（null、undefined、0...） 就默认为500</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的是，将 <code>debounce</code> 函数添加到 <code>Function.prototype</code><br>上并不是一个好的实践，因为它会改变所有函数的行为，可能导致其他依赖于 <code>Function.prototype</code> 的代码出现问题。</strong><br>此处仅仅是一个示范，如果没有严谨的文档和规约不建议在项目中使用</p>\n<h2 id=\"特殊的环境\"><a href=\"#特殊的环境\" class=\"headerlink\" title=\"特殊的环境\"></a>特殊的环境</h2><p>不久，小文就被优化了，他的代码流到了一位更年轻，技术更好的小刀身上，</p>\n<p>小刀是一位资深的java工程师，非常喜欢用类、对象表示一切</p>\n<p>不久，他就发现了这样一个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// eslint-disable-next-line no-extend-native</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">debounce</span> = debounce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            user.sayHi.debounce(1000)()</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;&gt;Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">)    </span><br></pre></td></tr></table></figure>\n\n<p>当使用user里的sayHi调用debounce时，会报错！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uncaught TypeError: Cannot convert undefined or null to object</span><br></pre></td></tr></table></figure>\n\n<p>小文刀当即力断，立刻反应出来了问题在哪，然后他把debounce改建成了如下这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;debounce&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> func = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> env = <span class=\"variable language_\">this</span>;  <span class=\"comment\">//////新增 生命env为this</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(env, args);  <span class=\"comment\">////新增 绑定func函数的词法环境（上下文）为env</span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过可惜，他对javascript this机制的了解还是不是很深</p>\n<p>深谙javascript八股之道的朋友可能已经发现了，这段代码依旧会报错！</p>\n<p>以下是原因</p>\n<ol>\n<li>在调用user.sayHi时才会计算this的值</li>\n<li>调用过程为： (user.sayHi).debounce()()<br>,在user.sayHi时，this的值并没有成为”user“，而且sayHi也不是一个词法环境，所以在调用debounce，形成闭包并返回函数后，给env赋值的this时undefined</li>\n</ol>\n<p>所以 ….</p>\n<p>当然，前面说过，小刀技术水平还不错，于是他很自然地想到了，把需要成为this的环境传进去，当然，也需要兼容不需要this的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">delay, env</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> func = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (env) &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(env, args);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>(...args);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而，沉溺在修改代码的忙碌中，小刀并没有意识到可以这么做….</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;user.<span class=\"property\">sayHi</span>.<span class=\"title function_\">bind</span>(user).<span class=\"title function_\">debounce</span>(<span class=\"number\">500</span>)&#125;&gt;</span><br><span class=\"line\"> <span class=\"title class_\">Click</span> me</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>bind会返回一个绑定了user的函数</p>\n<p>apply则是返回绑定了user的函数执行的结构</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>说实话，在写这篇文章之前，我只准确地判断了了原型及之前的结果，对于user.sayHi.debouce的运行结果，我理所当然认为也是可以那么运行的。</p>\n<p>除去对this的分析之外，还有一点react的小小的收获</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;user.sayHi&#125;</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中调用onClick，是会报错的，因为此处的user.sayHi是一个”函数名“，React会把user.sayHi赋值给onClick，然后再执行onClick()</p>\n<p>但是，仔细一想，其实这种逻辑我早就应该知道，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Dog&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHi = user.<span class=\"property\">sayHi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sayHi</span>()  <span class=\"comment\">///1. 报错，因为this丢失，为undefined</span></span><br><span class=\"line\">sayHi.<span class=\"title function_\">apply</span>(user)  <span class=\"comment\">//2. Hi, John,成功，使用apply绑定this</span></span><br><span class=\"line\">user.<span class=\"property\">sayHi</span>.<span class=\"title function_\">apply</span>(animal)  <span class=\"comment\">//3. Hi, Dog,成功，使用apply绑定this\t</span></span><br></pre></td></tr></table></figure>\n\n<p>onClick的赋值正是第一种，</p>\n<p>解决方法，外部包裹一个箭头函数或者function匿名函数即可，但是要注意的是这种方法对于要调用debounce的onClick却行不通，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;()=&gt;&#123;</span><br><span class=\"line\">\tuser.sayHi.debounce()()</span><br><span class=\"line\">&#125;&#125;&gt;Click me&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为赋值给onClick的是箭头函数，而不是debounce，所以，每次调用onClick的时候都会重新创建一个debounce</p>\n<p>顺便说一句，本来是想用ts写这篇文章的，但是在this赋值的时候会报一堆错，于是改用js<br>想起来前些日子看到了一篇文章 ”get out typescript“ 好像题目如下，抨击了ts丢失了js最显著的优点：”灵活性“<br>现在看来，确实如此</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p><img src=\"/source/_img/bg1.png\" alt=\"(可以写关于图片的描述)\"></p>\n<p>以下情景纯属虚构，如有雷同纯属巧合</p>\n<h2 id=\"初相见\"><a href=\"#初相见\" class=\"headerlink\" title=\"初相见\"></a>初相见</h2><p>这两天小刘被安排到一个项目（被老板pua中），遇到了这样一个问题：在用户登录的时候手抖点了两次，请求了两侧资源设置了两次token，但是真正完成的有效功能只有一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第一次\"><a href=\"#第一次\" class=\"headerlink\" title=\"第一次\"></a>第一次</h3><p>本着大国工匠的精神，老板亲自催促小刘优化这个问题</p>\n<p>于是小刘把它做成了下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> delay = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeOut) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">clearTimeOut</span>(timeOut);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timeOut = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不错，很棒，每次点击如果和上一次相差不到0.5秒，那么取消上一次的登录请求，并做一些提示。</p>\n<p>但是，过了两天，小刘又遇到了同样的问题，用户的登出方法以及其他的每个按钮好像都需要类似的功能</p>\n<p>要知道，小刘是个连骑电车都嫌拿着钥匙麻烦的人</p>\n<p>他可不愿意每次都定义好几个delay</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> delay = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> delay2 = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> delay3 = <span class=\"number\">1500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut</span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut2</span><br><span class=\"line\"><span class=\"keyword\">let</span> timeOut3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeOut) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些提示</span></span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeOut);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timeOut = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>突然，小刘灵光一闪，既然每份延迟都使用独立的delay和timeout，那我是不是可以用闭包记住上下文的特性，把这种类似的方法单独抽象出来？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;debounce&quot;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">func</span>(args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，小刘的代码成了这样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">login</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;login&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">logout</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;logout&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">login = <span class=\"title function_\">debounce</span>(login, <span class=\"number\">500</span>)</span><br><span class=\"line\">logout = <span class=\"title function_\">debounce</span>(logout, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            () =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                login()</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&gt;Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            () =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                logout()</span></span><br><span class=\"line\"><span class=\"language-xml\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这样，就不会有那么多delay1.delay2.delay3.delay4……delayn了</p>\n<p>小刘兴冲冲把他的代码提交了上去</p>\n<h2 id=\"再修改-——-原型\"><a href=\"#再修改-——-原型\" class=\"headerlink\" title=\"再修改 —— 原型\"></a>再修改 —— 原型</h2><p>另一位同事小文兴冲冲地把更新的代码拉了下来，看到了小刘的代码</p>\n<p>然后他浑身一颤，想到了项目发展到最后可能出现这样的情况</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   login = <span class=\"title function_\">debounce</span>(login, <span class=\"number\">500</span>)</span><br><span class=\"line\">logout = <span class=\"title function_\">debounce</span>(logout, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn = <span class=\"title function_\">debounce</span>(fn, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn1 = <span class=\"title function_\">debounce</span>(fn1, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn2 = <span class=\"title function_\">debounce</span>(fn2, <span class=\"number\">500</span>)</span><br><span class=\"line\">fn3 = <span class=\"title function_\">debounce</span>(fn3, <span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n\n<p>每个方法执行防抖都要重新赋一个值，每个赋值都需要传入一个可能完全一样的delay</p>\n<p>不仅如此，fn1被debounce处理之前的函数也丢失了！</p>\n<p>这意味着我们如果想要使用未debounce的函数，就必须要重新定义一个，而且名字还不能一样。</p>\n<p>事实上，小文不仅仅是个喝水都懒得张嘴的懒货，而且也是一个无可救药的 ”起名困难户“，</p>\n<p>他绝对不能让这种事情发生</p>\n<p>所以他想到，</p>\n<p>能不能让每个方法都具有一个debounce的方法属性，调用debounce则执行</p>\n<p>of course, it can!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> func = <span class=\"variable language_\">this</span>;\t<span class=\"comment\">//这里的this是调用debounce的对象，此处是方法对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>(args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>小文首先把debounce工具类函数改成了上面这个样子</p>\n<p>然后又添加了这样一句话</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">debounce</span> = debounce</span><br></pre></td></tr></table></figure>\n\n<p>于是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">debounce</span> = debounce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;clickme&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick.debounce()&#125;</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以在不影响原始方法的情况下使用它的debounce拉，而且还不需要传delay值!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;  <span class=\"comment\">//如果delay不存在（null、undefined、0...） 就默认为500</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意的是，将 <code>debounce</code> 函数添加到 <code>Function.prototype</code><br>上并不是一个好的实践，因为它会改变所有函数的行为，可能导致其他依赖于 <code>Function.prototype</code> 的代码出现问题。</strong><br>此处仅仅是一个示范，如果没有严谨的文档和规约不建议在项目中使用</p>\n<h2 id=\"特殊的环境\"><a href=\"#特殊的环境\" class=\"headerlink\" title=\"特殊的环境\"></a>特殊的环境</h2><p>不久，小文就被优化了，他的代码流到了一位更年轻，技术更好的小刀身上，</p>\n<p>小刀是一位资深的java工程师，非常喜欢用类、对象表示一切</p>\n<p>不久，他就发现了这样一个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// eslint-disable-next-line no-extend-native</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">debounce</span> = debounce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            user.sayHi.debounce(1000)()</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;&gt;Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">)    </span><br></pre></td></tr></table></figure>\n\n<p>当使用user里的sayHi调用debounce时，会报错！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uncaught TypeError: Cannot convert undefined or null to object</span><br></pre></td></tr></table></figure>\n\n<p>小文刀当即力断，立刻反应出来了问题在哪，然后他把debounce改建成了如下这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;debounce&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> func = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> env = <span class=\"variable language_\">this</span>;  <span class=\"comment\">//////新增 生命env为this</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(env, args);  <span class=\"comment\">////新增 绑定func函数的词法环境（上下文）为env</span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过可惜，他对javascript this机制的了解还是不是很深</p>\n<p>深谙javascript八股之道的朋友可能已经发现了，这段代码依旧会报错！</p>\n<p>以下是原因</p>\n<ol>\n<li>在调用user.sayHi时才会计算this的值</li>\n<li>调用过程为： (user.sayHi).debounce()()<br>,在user.sayHi时，this的值并没有成为”user“，而且sayHi也不是一个词法环境，所以在调用debounce，形成闭包并返回函数后，给env赋值的this时undefined</li>\n</ol>\n<p>所以 ….</p>\n<p>当然，前面说过，小刀技术水平还不错，于是他很自然地想到了，把需要成为this的环境传进去，当然，也需要兼容不需要this的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">delay, env</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!delay) delay = <span class=\"number\">500</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> func = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (env) &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(env, args);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>(...args);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而，沉溺在修改代码的忙碌中，小刀并没有意识到可以这么做….</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;user.<span class=\"property\">sayHi</span>.<span class=\"title function_\">bind</span>(user).<span class=\"title function_\">debounce</span>(<span class=\"number\">500</span>)&#125;&gt;</span><br><span class=\"line\"> <span class=\"title class_\">Click</span> me</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>bind会返回一个绑定了user的函数</p>\n<p>apply则是返回绑定了user的函数执行的结构</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>说实话，在写这篇文章之前，我只准确地判断了了原型及之前的结果，对于user.sayHi.debouce的运行结果，我理所当然认为也是可以那么运行的。</p>\n<p>除去对this的分析之外，还有一点react的小小的收获</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;user.sayHi&#125;</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中调用onClick，是会报错的，因为此处的user.sayHi是一个”函数名“，React会把user.sayHi赋值给onClick，然后再执行onClick()</p>\n<p>但是，仔细一想，其实这种逻辑我早就应该知道，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> user = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Dog&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHi = user.<span class=\"property\">sayHi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">sayHi</span>()  <span class=\"comment\">///1. 报错，因为this丢失，为undefined</span></span><br><span class=\"line\">sayHi.<span class=\"title function_\">apply</span>(user)  <span class=\"comment\">//2. Hi, John,成功，使用apply绑定this</span></span><br><span class=\"line\">user.<span class=\"property\">sayHi</span>.<span class=\"title function_\">apply</span>(animal)  <span class=\"comment\">//3. Hi, Dog,成功，使用apply绑定this\t</span></span><br></pre></td></tr></table></figure>\n\n<p>onClick的赋值正是第一种，</p>\n<p>解决方法，外部包裹一个箭头函数或者function匿名函数即可，但是要注意的是这种方法对于要调用debounce的onClick却行不通，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;()=&gt;&#123;</span><br><span class=\"line\">\tuser.sayHi.debounce()()</span><br><span class=\"line\">&#125;&#125;&gt;Click me&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因为赋值给onClick的是箭头函数，而不是debounce，所以，每次调用onClick的时候都会重新创建一个debounce</p>\n<p>顺便说一句，本来是想用ts写这篇文章的，但是在this赋值的时候会报一堆错，于是改用js<br>想起来前些日子看到了一篇文章 ”get out typescript“ 好像题目如下，抨击了ts丢失了js最显著的优点：”灵活性“<br>现在看来，确实如此</p>\n"},{"title":"记录一次开源经历--Ospp","description":"Ospp开源项目———— Casbin社区一个企业级Ai提供者Casibase","date":"2024-06-15T02:47:29.000Z","updated":"2024-07-05T03:34:00.905Z","top_img":null,"_content":"\n之前一直听说开源项目很加分，恰逢最近无事，遂即参与了一个Ospp开源活动的项目\n需要说明的是，中选公布日期在7月1日，这篇文章作于6.15，\n所以截至目前为止，我还没有中选，但是我觉得这次经历还是值得记录的\n\n## 项目介绍\n\n项目名叫Casibase，一个企业级Ai提供者:\n\n项目链接: [Github链接](https://github.com/casibase/casibase)\n技术栈:React + Antd 前端 Go后端\n\n## 项目经历\n\n### 初相见\n\n四月半左右我看到了OSPP这个开源活动，很感兴趣\n而且由于学校安排，小学期有一个实训，只有一个月的实习时间，必然是面试不了，所以我就报名了这个活动\n\n看了大概半个多月的项目列表、每个项目的项目介绍以及难易程度，最终选择了Casibase这个项目\n其一是因为，技术栈正好对口，React+Go后端，正好符合我的技术栈\n其二是因为，我觉得相较于单纯的javascript和go项目，这个项目的技术栈更复杂，申请的人数或许也会相对较少 ，\n阻力可能没那么大。（然而事实证明，并不如我所想\n并且热门的项目大多是java、linux、ai大模型等等\n\n所以大概在五月初我向导师发送了我的简历,然后导师联系我写了一些pr\n\n### 主要工作以及收获\n\n截至6.15也就是今天，我一共提交了7个pr,合并了6个pr\n![pr](prs.png)\n![prdetails](prdetails.png)\n\n大致工作有\n\n1. 实现了多模态，即输入消息，实现图片、文本多种回复\n2. 仿照tinyColor这个库实现了主题色的自动生成\n3. 实现了输入框复制图片\n4. 修复了一些bug\n\n虽然和这个导师的交流确实很有压迫力，不过也确实学到了很多东西\n比如github 的 ci/cd流程\n比如如何写一个好的干净的pr(这一部分被骂了好几次)\n还有一些git命令(--amend)\n\n另：\n这也是我第一次看到非函数式react组件，使用的是class\n之前一直看到生命周期componentDidMount等等，在函数式组件中完全没有，原来是在这里\n也是我第一次看见把前端项目放到后端项目下的文件夹里\n算是长知识了(\n\n### OVER\n\n总的来说，这次经历还算不错\n不过导师跟我说，还有另外一个比较看好的候选人\n再加上六月末有许多考试，这半个月没法再提交pr\n所以感觉中选的可能性不大(可恶)\n","source":"_posts/6ospp.md","raw":"---\ntitle: 记录一次开源经历--Ospp\ndescription: Ospp开源项目———— Casbin社区一个企业级Ai提供者Casibase\ndate: 2024-6-15 10:47:29\nupdated:\ntop_img:\ntags:\n  - 开源\n  - ospp\n---\n\n之前一直听说开源项目很加分，恰逢最近无事，遂即参与了一个Ospp开源活动的项目\n需要说明的是，中选公布日期在7月1日，这篇文章作于6.15，\n所以截至目前为止，我还没有中选，但是我觉得这次经历还是值得记录的\n\n## 项目介绍\n\n项目名叫Casibase，一个企业级Ai提供者:\n\n项目链接: [Github链接](https://github.com/casibase/casibase)\n技术栈:React + Antd 前端 Go后端\n\n## 项目经历\n\n### 初相见\n\n四月半左右我看到了OSPP这个开源活动，很感兴趣\n而且由于学校安排，小学期有一个实训，只有一个月的实习时间，必然是面试不了，所以我就报名了这个活动\n\n看了大概半个多月的项目列表、每个项目的项目介绍以及难易程度，最终选择了Casibase这个项目\n其一是因为，技术栈正好对口，React+Go后端，正好符合我的技术栈\n其二是因为，我觉得相较于单纯的javascript和go项目，这个项目的技术栈更复杂，申请的人数或许也会相对较少 ，\n阻力可能没那么大。（然而事实证明，并不如我所想\n并且热门的项目大多是java、linux、ai大模型等等\n\n所以大概在五月初我向导师发送了我的简历,然后导师联系我写了一些pr\n\n### 主要工作以及收获\n\n截至6.15也就是今天，我一共提交了7个pr,合并了6个pr\n![pr](prs.png)\n![prdetails](prdetails.png)\n\n大致工作有\n\n1. 实现了多模态，即输入消息，实现图片、文本多种回复\n2. 仿照tinyColor这个库实现了主题色的自动生成\n3. 实现了输入框复制图片\n4. 修复了一些bug\n\n虽然和这个导师的交流确实很有压迫力，不过也确实学到了很多东西\n比如github 的 ci/cd流程\n比如如何写一个好的干净的pr(这一部分被骂了好几次)\n还有一些git命令(--amend)\n\n另：\n这也是我第一次看到非函数式react组件，使用的是class\n之前一直看到生命周期componentDidMount等等，在函数式组件中完全没有，原来是在这里\n也是我第一次看见把前端项目放到后端项目下的文件夹里\n算是长知识了(\n\n### OVER\n\n总的来说，这次经历还算不错\n不过导师跟我说，还有另外一个比较看好的候选人\n再加上六月末有许多考试，这半个月没法再提交pr\n所以感觉中选的可能性不大(可恶)\n","slug":"6ospp","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7geg001hzw6kblkhbumg","content":"<p>之前一直听说开源项目很加分，恰逢最近无事，遂即参与了一个Ospp开源活动的项目<br>需要说明的是，中选公布日期在7月1日，这篇文章作于6.15，<br>所以截至目前为止，我还没有中选，但是我觉得这次经历还是值得记录的</p>\n<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>项目名叫Casibase，一个企业级Ai提供者:</p>\n<p>项目链接: <a href=\"https://github.com/casibase/casibase\">Github链接</a><br>技术栈:React + Antd 前端 Go后端</p>\n<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"初相见\"><a href=\"#初相见\" class=\"headerlink\" title=\"初相见\"></a>初相见</h3><p>四月半左右我看到了OSPP这个开源活动，很感兴趣<br>而且由于学校安排，小学期有一个实训，只有一个月的实习时间，必然是面试不了，所以我就报名了这个活动</p>\n<p>看了大概半个多月的项目列表、每个项目的项目介绍以及难易程度，最终选择了Casibase这个项目<br>其一是因为，技术栈正好对口，React+Go后端，正好符合我的技术栈<br>其二是因为，我觉得相较于单纯的javascript和go项目，这个项目的技术栈更复杂，申请的人数或许也会相对较少 ，<br>阻力可能没那么大。（然而事实证明，并不如我所想<br>并且热门的项目大多是java、linux、ai大模型等等</p>\n<p>所以大概在五月初我向导师发送了我的简历,然后导师联系我写了一些pr</p>\n<h3 id=\"主要工作以及收获\"><a href=\"#主要工作以及收获\" class=\"headerlink\" title=\"主要工作以及收获\"></a>主要工作以及收获</h3><p>截至6.15也就是今天，我一共提交了7个pr,合并了6个pr<br><img src=\"/2024/06/15/6ospp/prs.png\" alt=\"pr\"><br><img src=\"/2024/06/15/6ospp/prdetails.png\" alt=\"prdetails\"></p>\n<p>大致工作有</p>\n<ol>\n<li>实现了多模态，即输入消息，实现图片、文本多种回复</li>\n<li>仿照tinyColor这个库实现了主题色的自动生成</li>\n<li>实现了输入框复制图片</li>\n<li>修复了一些bug</li>\n</ol>\n<p>虽然和这个导师的交流确实很有压迫力，不过也确实学到了很多东西<br>比如github 的 ci&#x2F;cd流程<br>比如如何写一个好的干净的pr(这一部分被骂了好几次)<br>还有一些git命令(–amend)</p>\n<p>另：<br>这也是我第一次看到非函数式react组件，使用的是class<br>之前一直看到生命周期componentDidMount等等，在函数式组件中完全没有，原来是在这里<br>也是我第一次看见把前端项目放到后端项目下的文件夹里<br>算是长知识了(</p>\n<h3 id=\"OVER\"><a href=\"#OVER\" class=\"headerlink\" title=\"OVER\"></a>OVER</h3><p>总的来说，这次经历还算不错<br>不过导师跟我说，还有另外一个比较看好的候选人<br>再加上六月末有许多考试，这半个月没法再提交pr<br>所以感觉中选的可能性不大(可恶)</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>之前一直听说开源项目很加分，恰逢最近无事，遂即参与了一个Ospp开源活动的项目<br>需要说明的是，中选公布日期在7月1日，这篇文章作于6.15，<br>所以截至目前为止，我还没有中选，但是我觉得这次经历还是值得记录的</p>\n<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>项目名叫Casibase，一个企业级Ai提供者:</p>\n<p>项目链接: <a href=\"https://github.com/casibase/casibase\">Github链接</a><br>技术栈:React + Antd 前端 Go后端</p>\n<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"初相见\"><a href=\"#初相见\" class=\"headerlink\" title=\"初相见\"></a>初相见</h3><p>四月半左右我看到了OSPP这个开源活动，很感兴趣<br>而且由于学校安排，小学期有一个实训，只有一个月的实习时间，必然是面试不了，所以我就报名了这个活动</p>\n<p>看了大概半个多月的项目列表、每个项目的项目介绍以及难易程度，最终选择了Casibase这个项目<br>其一是因为，技术栈正好对口，React+Go后端，正好符合我的技术栈<br>其二是因为，我觉得相较于单纯的javascript和go项目，这个项目的技术栈更复杂，申请的人数或许也会相对较少 ，<br>阻力可能没那么大。（然而事实证明，并不如我所想<br>并且热门的项目大多是java、linux、ai大模型等等</p>\n<p>所以大概在五月初我向导师发送了我的简历,然后导师联系我写了一些pr</p>\n<h3 id=\"主要工作以及收获\"><a href=\"#主要工作以及收获\" class=\"headerlink\" title=\"主要工作以及收获\"></a>主要工作以及收获</h3><p>截至6.15也就是今天，我一共提交了7个pr,合并了6个pr<br><img src=\"/2024/06/15/6ospp/prs.png\" alt=\"pr\"><br><img src=\"/2024/06/15/6ospp/prdetails.png\" alt=\"prdetails\"></p>\n<p>大致工作有</p>\n<ol>\n<li>实现了多模态，即输入消息，实现图片、文本多种回复</li>\n<li>仿照tinyColor这个库实现了主题色的自动生成</li>\n<li>实现了输入框复制图片</li>\n<li>修复了一些bug</li>\n</ol>\n<p>虽然和这个导师的交流确实很有压迫力，不过也确实学到了很多东西<br>比如github 的 ci&#x2F;cd流程<br>比如如何写一个好的干净的pr(这一部分被骂了好几次)<br>还有一些git命令(–amend)</p>\n<p>另：<br>这也是我第一次看到非函数式react组件，使用的是class<br>之前一直看到生命周期componentDidMount等等，在函数式组件中完全没有，原来是在这里<br>也是我第一次看见把前端项目放到后端项目下的文件夹里<br>算是长知识了(</p>\n<h3 id=\"OVER\"><a href=\"#OVER\" class=\"headerlink\" title=\"OVER\"></a>OVER</h3><p>总的来说，这次经历还算不错<br>不过导师跟我说，还有另外一个比较看好的候选人<br>再加上六月末有许多考试，这半个月没法再提交pr<br>所以感觉中选的可能性不大(可恶)</p>\n"},{"layout":"epost","title":"龙芯开发板","description":"本文记录了作者第一次接触开发板的一些经历，仅作为记录","date":"2024-06-14T23:19:29.000Z","_content":"\n正在参与一个实验室的项目\n我是做前端的，但是后端学长毕业跑路了\n故而目前软件部分都是我在做\n\n有一部分的工作是,需要写好程序放到这个板子里\n\n也是第一次接触到了开发板这种东西,姑且记录一下\n之前玩过同学的树莓派，感觉很类似\n(确实很类似)\n\n总体连接和系统样子：\n![龙芯开发板](total.jpg)\n\n光是连接这个板子就花了我好长时间，\n尤其是柔性电路板，我还以为他是个装饰品\n\n而且初始的板子显示比例1080×600无法适配到我的显示器\n我还以为是显示器和板子不兼容的问题\n\n![板子](ban.jpg)\n\n登录界面\n![登录界面](login.jpg)\n\n在龙芯vscode上写了一个hello world\n![hello world](helloworld.jpg)\n","source":"_posts/7long.md","raw":"---\nlayout: epost\ntitle: 龙芯开发板\ndescription: 本文记录了作者第一次接触开发板的一些经历，仅作为记录\ndate: 2024-06-15 07:19:29\ntags:\n  - development\n  - 记录 \n---\n\n正在参与一个实验室的项目\n我是做前端的，但是后端学长毕业跑路了\n故而目前软件部分都是我在做\n\n有一部分的工作是,需要写好程序放到这个板子里\n\n也是第一次接触到了开发板这种东西,姑且记录一下\n之前玩过同学的树莓派，感觉很类似\n(确实很类似)\n\n总体连接和系统样子：\n![龙芯开发板](total.jpg)\n\n光是连接这个板子就花了我好长时间，\n尤其是柔性电路板，我还以为他是个装饰品\n\n而且初始的板子显示比例1080×600无法适配到我的显示器\n我还以为是显示器和板子不兼容的问题\n\n![板子](ban.jpg)\n\n登录界面\n![登录界面](login.jpg)\n\n在龙芯vscode上写了一个hello world\n![hello world](helloworld.jpg)\n","slug":"7long","published":1,"updated":"2024-07-05T03:34:00.909Z","comments":1,"photos":[],"link":"","_id":"clzoy7gei001izw6kgj2a0zb3","content":"<p>正在参与一个实验室的项目<br>我是做前端的，但是后端学长毕业跑路了<br>故而目前软件部分都是我在做</p>\n<p>有一部分的工作是,需要写好程序放到这个板子里</p>\n<p>也是第一次接触到了开发板这种东西,姑且记录一下<br>之前玩过同学的树莓派，感觉很类似<br>(确实很类似)</p>\n<p>总体连接和系统样子：<br><img src=\"/2024/06/15/7long/total.jpg\" alt=\"龙芯开发板\"></p>\n<p>光是连接这个板子就花了我好长时间，<br>尤其是柔性电路板，我还以为他是个装饰品</p>\n<p>而且初始的板子显示比例1080×600无法适配到我的显示器<br>我还以为是显示器和板子不兼容的问题</p>\n<p><img src=\"/2024/06/15/7long/ban.jpg\" alt=\"板子\"></p>\n<p>登录界面<br><img src=\"/2024/06/15/7long/login.jpg\" alt=\"登录界面\"></p>\n<p>在龙芯vscode上写了一个hello world<br><img src=\"/2024/06/15/7long/helloworld.jpg\" alt=\"hello world\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>正在参与一个实验室的项目<br>我是做前端的，但是后端学长毕业跑路了<br>故而目前软件部分都是我在做</p>\n<p>有一部分的工作是,需要写好程序放到这个板子里</p>\n<p>也是第一次接触到了开发板这种东西,姑且记录一下<br>之前玩过同学的树莓派，感觉很类似<br>(确实很类似)</p>\n<p>总体连接和系统样子：<br><img src=\"/2024/06/15/7long/total.jpg\" alt=\"龙芯开发板\"></p>\n<p>光是连接这个板子就花了我好长时间，<br>尤其是柔性电路板，我还以为他是个装饰品</p>\n<p>而且初始的板子显示比例1080×600无法适配到我的显示器<br>我还以为是显示器和板子不兼容的问题</p>\n<p><img src=\"/2024/06/15/7long/ban.jpg\" alt=\"板子\"></p>\n<p>登录界面<br><img src=\"/2024/06/15/7long/login.jpg\" alt=\"登录界面\"></p>\n<p>在龙芯vscode上写了一个hello world<br><img src=\"/2024/06/15/7long/helloworld.jpg\" alt=\"hello world\"></p>\n"},{"title":"从Flutter到React,架空用户的性能宰相","subTitle":"大义觉迷录","description":"本文将会以Flutter和React的渲染原理为主线，讲述不同框架之间的差异与共性,并且以此为基础，探讨性能优化的一些原则","date":"2024-07-10T07:44:39.508Z","updated":"2024-07-12T12:51:32.966Z","top_img":null,"_content":"\n**_“彼时彼刻，恰如此时此刻”\n\"竟能如此相像？\"     ————题记_**\n\n# 渲染基本原理\n\n本部分权当科普,亦欲抛砖引玉\n\n计算机图像中的渲染需要三个部分配合CPU、GPU、显示器\n其中，CPU负责图像数据计算、GPU负责图像数据渲染、显示器负责图像数据显示\nCPU把计算好的、需要显示的内容交给GPU，由GPU完成渲染后放入帧缓冲区，随后视频控制器根据垂直同步信号（VSync）以每秒60次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。\n\nCPU:任务调度、数据计算\nGPU：图像渲染、着色器、抗锯齿、光栅化等\n载体：包括浏览器、App等\n\n# How Flutter Work ?\n\n这个问题可以从两个方面回答，第一个是 用什么 , 第二个是 怎么用\n从 用什么 的角度，Flutter团队使用了两个工具，一个是dart，一个是skia\n从 怎么用 的角度，Flutter团队使用了三棵树，分别是Widget Tree、Element Tree、RenderObject Tree\n\n## Dart and Skia\n\n此处我们简单掠过，并不是本文的重点\n\n1.Skia是一款用C++开发的2D图像绘制引擎，保证了同一套代码调用在多个平台上的渲染效果是完全一致的。\n\n2.Dart是一个前端开发的强类型语言。\n\n## Flutter Render\n\n### Flutter 的三棵树\n\n1.Widget Tree\n2.Element Tree\n3.RenderObject Tree\n\n那么Widget、Element、RenderObject指的是什么呢？\n\nWidget: 是Flutter的基本构建块，是一个不可变的配置信息\n比如一个Container组件，有什么子元素？背景颜色是什么？宽高啊等等\n\n- 在flutter中，Everything is a Widget\n- A widget is immutable description of part a user interface 一个Widget是一个不可变的用户界面的描述\n\n当然，如果你学过html，可以先把Widget理解为html中的标签，比如div、span等等，即dom\n但是显然会有以下问题：既然widget不可变，那么Flutter是如何更改UI(用户界面)的呢？\n这就引出了Element和RenderObject的概念\n\nElement 是Widget的实例，是可变的，当我们当我们用一个新的Widget替换旧的Widget时，Element会更新其属性甚至新建新的Element以匹配新的Widget。\n\nRenderObject是Element的一个实例，它也是可变的。RenderObject包含了实际的绘制操作，它描述了在屏幕上显示的内容。\n简单的来说，RenderObject就是Flutter “需要绘制出的东西”\n\n### Flutter Render Steps\n\n以如下代码为例\n\n```dart\nrunApp(\n    Text(\"Hello World\")\n}\n```\n\n![示例图](render1.png)\n\n在这个例子里，flutter新建了一个Text：\n\n1. 运行runApp，并把Text放到Widget树中,\n2. 创建一个LeafRenderObjectElement(ps1:这里是Element，不是RenderObject! ; ps2:\n   Leaf表示这是一个叶子节点，即没有子节点的节点)\n3. 根据LeafRenderObjectElement的creatRenderObject创建一个RenderObject,即RenderParagraph\n\n不过需要注意的是： **Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject**\n\n比如，\nText这个Widget内部是由RichWidget实现的，Flutter的Widget树会有Text-RichText树结构，但是并不会为Text创建一个RenderObject，而是RichText创建一个RenderObject\n(此处为了方便理解，使用最常见的Text，并且暂且无视RichText)\n\n![示例图](update.jpg)\n\n当Flutter更新的时候，以图中为例，我们把Text展示的文字从Hello 改为Hi\nFlutter将会做以下几件事：\n\n1. 创建一个新的Text Widget，并使用canUpdate方法把他和之前的Widget比较\n2. canUpdate传入oldWidget 和 newWidget，返回true或false，可以和react 的shouldComponentUpdate比较\n3. 如果不同，则替换原有的Widget\n4. 此时,LeafRenderObjectElement,则需要改变，会调用updateRenderObject方法\n5. 与创建不同的是，这里的LeafRenderObjectElement会获取已有的RenderObject并改变其状态，而非新建、替换\n\n如果你使用flutter开发工具来查看RenderObject id，会发现并没有改变\n\n由于不太好对比，略去相同的情况的图\n\n<img src=\"example.png\" width=\"500\" alt=\"example.png\">\n\n<img src=\"rich-nor.png\" width=\"500\" alt=\"切换时的RenderObject1\">\n\n<img src=\"rich-nor2.png\" width=\"500\" alt=\"切换时的RenderObject2\">\n\n可以看到，当使用RichText和Text的时候，两者切换时，RenderObjectId会改变\n至于为什么使用Text时，也存在RichText的树级结构，是因为Text内部是由RichText加工得到的\n\n![Text内部返回值](text-from-rich.png)\n\n**由此可以验证上文,Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject**\n\n\n*********************************\n\n在开始React部分之前，我们先来看一道老生常谈的八股题\n事实上，虽然称之为“八股”，但我认为这道题很真的很有意义\n\n# 讲一下浏览器的渲染流程 ?\n\n从网络拿到html文件之后，开启渲染主线程进行解析，目的是解析为DOM树\n同时开启一个预加载线程，这个线程主要负责css资源, 预加载线程快速浏览Link部分，通过网络线程请求css资源，之后在预加载线程进行解析并且返回给渲染在主线程。（解析、计算样式）\n在遇到html中的js文件时，会停止html解析，即阻塞主线程\n\n渲染主线程获得DOM树以及CSSOM树之后，会进行计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式。（布局）\n\n主线程遍历合成之后的树，生成布局树。之后对布局树进行分层，这一部分是为了更改时更快。（分层）\n\n主线程为每个层生成单独的指令集。（生成指令集）\n\n至此主线程任务结束。\n\n之后进行分块，会把上一步的指令集会交给合成线程，合成线程的工作会交给多个线程进行。（分块）\n\n合成线程把信息、任务交给**GPU进程**，GPU开启多个线程，进行进行光栅化，并且优先处理靠近视口区域的块，即进行计算每个像素点的颜色。\n（光栅化）\n\n之后，GPU把每个层、块的光栅化结果交给合成线程，合成线程计算出每个块的位置，以及旋转、缩放等。（合成）\n\n*********************************\n\n\nOk,我们现在进入React部分\n\n# How React Renders ?\n\n## What is React ?\n\n什么是React？\n\n这里需要简单祛魅一下，React是一个library是一个库，不是一个framework.\n如果需要类比的话，类似于lodash、tinyColor等等\n\n但是为什么React如此如日中天，被推崇备至？\n因为React的这两个核心特性：声明式API、虚拟Dom\n\n不过，如果深入理解一下的话，你会发现声明式API和虚拟Dom是双生一体，无法分割的两个特性\n\n### 声明式API\n\n所谓的声明式API，就是告诉React你想要的是什么，而并非是如何做。\n\n举个例子，我们现在有一个列表,列表包括两个div，一个是红色，一个是蓝色\n\n```html\n\n<div id=\"1\" style=\"color:red\">Red</div>\n<div id=\"2\" style=\"color:blue\">Blue</div>\n```\n\n现在有一个需求，需要你把Blue的div变成红色，这时候在html、js中的操作是什么呢？\n\n```js\ndocument.getElementById('2').style.color = 'red'\n```\n\n这样的操作是命令式的，即告诉你的工具如何做\n那么声明式的操作是什么?\n\n``` code\n  const [color, setColor] = useState('blue')\n\n <div id=\"1\" style={{color: 'red'}}>Red</div>\n <div id=\"2\" style={{color: color}}>Blue</div>\n \n```\n\n当我们想要操作的时候，只需要改变color的值即可，React会自动帮你完成剩下的操作\n\n当然，这个例子并没有完全显示出声明式API的优越性，但是当你的项目越来越大，你会发现声明式API的优势\n\n### 虚拟Dom\n\n所谓虚拟DOM，是一种概念\n大致就是在内存中创建一个虚拟的DOM树，当数据发生变化时，React会比较新旧两颗虚拟DOM树的差异，然后只更新差异部分。\n\n分为 diff 和 调和 两个部分\ndiff：找出current 虚拟dom 和 next 虚拟dom 的差异\n调和：让真实dom树和current虚拟dom树保持一致\n\n#### Diff Algorithm\n\nReact 的 Diff 算法主要基于两个假设：  \n两个不同类型的元素会产生不同的树。\n开发者可以通过 key 属性来指示哪些子元素在不同的渲染下能保持稳定。\n基于这两个假设，React 的 Diff 算法可以被分为两个主要部分：元素类型的比较和同一类型元素的比较。  \n元素类型的比较  \n\n1. 当 React 对比两个元素时，首先会检查元素的类型。如果元素的类型不同，React 会直接销毁旧的树并建立新的树。例如，当一个元素从 a 变为 img，React 会销毁 a 及其子元素，然后新建 img 及其子元素。  \n2. 同一类型元素的比较  当两个元素为同一类型时，React 会保留 DOM 节点，并仅比较和更新改变的属性。然后，React 会递归地对子元素进行相同的过程。\n\n对于列表元素，React 无法知道列表中的元素是否有变化，因此需要开发者提供一个 key 属性来帮助 React 识别哪些元素是新的，哪些元素是旧的。这样，React 就可以只更新改变的元素，而不是重新渲染整个列表。 \n总的来说，React 的 Diff 算法通过智能地比较新旧虚拟 DOM 树的差异，使得只有实际改变的部分才会被更新，从而提高了性能。\n\n* 使用了深度优先的遍历算法\n* 优化策略\n  * 忽略了跨层级的节点的比较\n  * 通过 key 来判断是否是同一个节点\n\n##### 为什么使用深度优先？\n\n![深度优先](whydeepfirst.png)\n\n假设有以上dom树，两层，每个非叶子节点都有n个子节点\n\n对于n1点，\n广度优先：遍历n+1个节点\n深度优先：遍历2个节点\n\n对于n2点，\n广度优先：遍历2n个节点\n深度优先：遍历1+n个节点\n\n对于n3点，\n广度优先：遍历n+n×n个节点\n深度优先：遍历n+n×n个节点\n\n可见对于叶子节点的改变的比较，深度优先效率要远远大于广度优先\n\n不仅如此，由于：\n**一段时间内大部分的改变都会很集中**\n所以，深度优先更加适合React的Diff算法\n\n\n### Fiber 架构\n\nFiber是虚拟Dom的一种实现方式\n\n在React 16之前，React使用的是Stack Reconciler，即栈调和器，这种调和器是递归的，当递归深度过深时，会导致浏览器卡死\nFiber架构是React 16中引入的一种新的协调引擎，它的目的是为了更好地处理虚拟DOM的更新，使其更具有灵活性和效率。\n\n存在内存里的虚拟Dom，需要一种保存格式，Fiber的格式是javascript对象\n\n```json\n{\n  \"type\": 'h1',  // 组件类型\n  \"key\": null,   // key\n  \"props\": { ... }, // 输入的props\n  \"state\": { ... }, // 组件的state (如果是class组件或带有state的function组件)\n  \"child\": \"Fiber\" | \"null\",\n  // 第一个子元素的Fiber\n  \"sibling\": \"Fiber\" | \"null\",  // 下一个兄弟元素的Fiber\n  \"return\": \"Fiber\" | \"null\",  // 父元素的Fiber\n}\n```\n\nFiber：一个带有列表关系的DOM树\n\n\n#### Fiber工作特性\n\n* 单元工作：每个Fiber节点代表一个单元，所有Fiber节点共同组成一个Fiber链表\n* 连接属性：slibing 兄弟、child 子节点、return 父节点\n* React在更新时，会根据现有的Fiber树（Current Tree）创建一个新的临时树（Work-in-progress (WIP) Tree）,WIP-Tree包含了当前更新受影响的最高节点直至其所有子孙节点。\n因为React在更新时总是维护了两个Fiber树，所以可以随时进行比较、中断或恢复等操作，而且这种机制让React能够同时具备拥有优秀的渲染性能和UI的稳定性。\n\n![FiberTree](fibertree.png)\n\ncurrent 与 workinprogress：\n\n![Current-WorkInProgress](curr-wlp.png)\n\nreact不会改变current tree，而是在workInProgress tree上进行操作，当workInProgress tree完成后，react会将其替换为current tree\n这里的替换是指针上的替换，即current tree的指针指向workInProgress tree，\n这样只需要创建两个Fiber树，就可以重复利用，节省了内存\n\n##### Fiber如何实现优先级?\n\nReact Fiber的调度器是一个优先级调度器，它可以中断任务，然后根据优先级重新安排任务的执行顺序。这样可以保证高优先级任务的优先执行，从而提高用户体验。\n\n* requestIdleCallback \n  * 安排低优先级任务\n* requestAnimationFrame\n  * 安排高优先级任务\n\n\n#### Fiber工作流程\n\nFiber工作整体分为两个部分\n* Render\n* Commit\n\n其中，Render部分是异步的，在渲染的过程中可以执行一些网络请求\nCommit部分是同步的，用于执行副作用\n\n**副作用：对于Dom的操作以及特定的生命周期的方法**\n\nRender阶段:\n1. 创建与标记更新节点\n2. 收集副作用列表\n\n在对节点进行遍历时，Fiber采用的是While 循环 而非 递归 的方式\n\nCommit阶段\n1. 遍历 Effects 列表并为每个Effect 找到对应的组件实例\n2. 正式提交执行副作用\n\n因为Effect 会导致用户可见的界面的改变，所以必须是同步的\n\n# 回归主题：性能\n\n![性能](reactvsflutter1.png)\n\n我们需要明确一个原则：对于视图的改变代价都是高昂的:\n\n在上文 **浏览器渲染流程** 中我们可以看到，从拿到数据到渲染到屏幕上，需要经过多个步骤，而每个步骤都会消耗时间\n\n**Reflow（重排）**：当 DOM 的变化影响到元素的几何属性（例如宽度、高度、位置等）时，浏览器需要重新计算元素的几何属性，然后重新渲染页面。这个过程被称为 Reflow。Reflow 主要发生在“计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式”这个步骤之后，即在“布局”阶段。\n\n**Repaint（重绘）**：当 DOM 的变化只影响到元素的外观，但并不影响布局时，浏览器只需要重新绘制这些元素。这个过程被称为 Repaint。Repaint 主要发生在“主线程为每个层生成单独的指令集”这个步骤之后，即在“生成指令集”阶段。\n\nDOM的改变的代价要远远大于其样式的改变的代价\n\n\n\n所以flutter 和react 都“架空”了用户，给让用户操作“自己的dom”\n在Flutter中，用户通过widget来实现自己想做的事，在React中，指的是React Component\n\n用户操作之后，Flutter和React，都会生成对应的“虚拟DOM”\n在Flutter 中，可以简单的理解为Element，而在React中，指的是虚拟DOM（Fiber）\n并且，在这个过程中进行优化\n如果Widget可以复用，那么则复用，避免了所有更改。如果不可以，则查看是否可以更新，如果可以更新，则更新，避免了新建的高昂代价。如果不可以，则新建。\n虚拟DOM（Fiber）也是一样\n\n\n之前一直在看性能优化的博客，现在才发现是舍本逐末\n事实上，当我们了解了这些原理之后，性能便手到擒来了\n\n以这篇文章的一些点举两个简单的例子：\n1. 因为深度优先的遍历策略，我们尽可能减少dom的嵌套，实现扁平化DOM树\n2. 因为React的Diff算法，我们可以使用key来帮助React识别哪些元素是新的，哪些元素是旧的，从而提高性能\n","source":"_posts/9flutter-react.md","raw":"---\ntitle: 从Flutter到React,架空用户的性能宰相\nsubTitle: 大义觉迷录\ndescription: 本文将会以Flutter和React的渲染原理为主线，讲述不同框架之间的差异与共性,并且以此为基础，探讨性能优化的一些原则\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ntop_img:\ntags:\n  - develop\n  - 妙手\n---\n\n**_“彼时彼刻，恰如此时此刻”\n\"竟能如此相像？\"     ————题记_**\n\n# 渲染基本原理\n\n本部分权当科普,亦欲抛砖引玉\n\n计算机图像中的渲染需要三个部分配合CPU、GPU、显示器\n其中，CPU负责图像数据计算、GPU负责图像数据渲染、显示器负责图像数据显示\nCPU把计算好的、需要显示的内容交给GPU，由GPU完成渲染后放入帧缓冲区，随后视频控制器根据垂直同步信号（VSync）以每秒60次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。\n\nCPU:任务调度、数据计算\nGPU：图像渲染、着色器、抗锯齿、光栅化等\n载体：包括浏览器、App等\n\n# How Flutter Work ?\n\n这个问题可以从两个方面回答，第一个是 用什么 , 第二个是 怎么用\n从 用什么 的角度，Flutter团队使用了两个工具，一个是dart，一个是skia\n从 怎么用 的角度，Flutter团队使用了三棵树，分别是Widget Tree、Element Tree、RenderObject Tree\n\n## Dart and Skia\n\n此处我们简单掠过，并不是本文的重点\n\n1.Skia是一款用C++开发的2D图像绘制引擎，保证了同一套代码调用在多个平台上的渲染效果是完全一致的。\n\n2.Dart是一个前端开发的强类型语言。\n\n## Flutter Render\n\n### Flutter 的三棵树\n\n1.Widget Tree\n2.Element Tree\n3.RenderObject Tree\n\n那么Widget、Element、RenderObject指的是什么呢？\n\nWidget: 是Flutter的基本构建块，是一个不可变的配置信息\n比如一个Container组件，有什么子元素？背景颜色是什么？宽高啊等等\n\n- 在flutter中，Everything is a Widget\n- A widget is immutable description of part a user interface 一个Widget是一个不可变的用户界面的描述\n\n当然，如果你学过html，可以先把Widget理解为html中的标签，比如div、span等等，即dom\n但是显然会有以下问题：既然widget不可变，那么Flutter是如何更改UI(用户界面)的呢？\n这就引出了Element和RenderObject的概念\n\nElement 是Widget的实例，是可变的，当我们当我们用一个新的Widget替换旧的Widget时，Element会更新其属性甚至新建新的Element以匹配新的Widget。\n\nRenderObject是Element的一个实例，它也是可变的。RenderObject包含了实际的绘制操作，它描述了在屏幕上显示的内容。\n简单的来说，RenderObject就是Flutter “需要绘制出的东西”\n\n### Flutter Render Steps\n\n以如下代码为例\n\n```dart\nrunApp(\n    Text(\"Hello World\")\n}\n```\n\n![示例图](render1.png)\n\n在这个例子里，flutter新建了一个Text：\n\n1. 运行runApp，并把Text放到Widget树中,\n2. 创建一个LeafRenderObjectElement(ps1:这里是Element，不是RenderObject! ; ps2:\n   Leaf表示这是一个叶子节点，即没有子节点的节点)\n3. 根据LeafRenderObjectElement的creatRenderObject创建一个RenderObject,即RenderParagraph\n\n不过需要注意的是： **Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject**\n\n比如，\nText这个Widget内部是由RichWidget实现的，Flutter的Widget树会有Text-RichText树结构，但是并不会为Text创建一个RenderObject，而是RichText创建一个RenderObject\n(此处为了方便理解，使用最常见的Text，并且暂且无视RichText)\n\n![示例图](update.jpg)\n\n当Flutter更新的时候，以图中为例，我们把Text展示的文字从Hello 改为Hi\nFlutter将会做以下几件事：\n\n1. 创建一个新的Text Widget，并使用canUpdate方法把他和之前的Widget比较\n2. canUpdate传入oldWidget 和 newWidget，返回true或false，可以和react 的shouldComponentUpdate比较\n3. 如果不同，则替换原有的Widget\n4. 此时,LeafRenderObjectElement,则需要改变，会调用updateRenderObject方法\n5. 与创建不同的是，这里的LeafRenderObjectElement会获取已有的RenderObject并改变其状态，而非新建、替换\n\n如果你使用flutter开发工具来查看RenderObject id，会发现并没有改变\n\n由于不太好对比，略去相同的情况的图\n\n<img src=\"example.png\" width=\"500\" alt=\"example.png\">\n\n<img src=\"rich-nor.png\" width=\"500\" alt=\"切换时的RenderObject1\">\n\n<img src=\"rich-nor2.png\" width=\"500\" alt=\"切换时的RenderObject2\">\n\n可以看到，当使用RichText和Text的时候，两者切换时，RenderObjectId会改变\n至于为什么使用Text时，也存在RichText的树级结构，是因为Text内部是由RichText加工得到的\n\n![Text内部返回值](text-from-rich.png)\n\n**由此可以验证上文,Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject**\n\n\n*********************************\n\n在开始React部分之前，我们先来看一道老生常谈的八股题\n事实上，虽然称之为“八股”，但我认为这道题很真的很有意义\n\n# 讲一下浏览器的渲染流程 ?\n\n从网络拿到html文件之后，开启渲染主线程进行解析，目的是解析为DOM树\n同时开启一个预加载线程，这个线程主要负责css资源, 预加载线程快速浏览Link部分，通过网络线程请求css资源，之后在预加载线程进行解析并且返回给渲染在主线程。（解析、计算样式）\n在遇到html中的js文件时，会停止html解析，即阻塞主线程\n\n渲染主线程获得DOM树以及CSSOM树之后，会进行计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式。（布局）\n\n主线程遍历合成之后的树，生成布局树。之后对布局树进行分层，这一部分是为了更改时更快。（分层）\n\n主线程为每个层生成单独的指令集。（生成指令集）\n\n至此主线程任务结束。\n\n之后进行分块，会把上一步的指令集会交给合成线程，合成线程的工作会交给多个线程进行。（分块）\n\n合成线程把信息、任务交给**GPU进程**，GPU开启多个线程，进行进行光栅化，并且优先处理靠近视口区域的块，即进行计算每个像素点的颜色。\n（光栅化）\n\n之后，GPU把每个层、块的光栅化结果交给合成线程，合成线程计算出每个块的位置，以及旋转、缩放等。（合成）\n\n*********************************\n\n\nOk,我们现在进入React部分\n\n# How React Renders ?\n\n## What is React ?\n\n什么是React？\n\n这里需要简单祛魅一下，React是一个library是一个库，不是一个framework.\n如果需要类比的话，类似于lodash、tinyColor等等\n\n但是为什么React如此如日中天，被推崇备至？\n因为React的这两个核心特性：声明式API、虚拟Dom\n\n不过，如果深入理解一下的话，你会发现声明式API和虚拟Dom是双生一体，无法分割的两个特性\n\n### 声明式API\n\n所谓的声明式API，就是告诉React你想要的是什么，而并非是如何做。\n\n举个例子，我们现在有一个列表,列表包括两个div，一个是红色，一个是蓝色\n\n```html\n\n<div id=\"1\" style=\"color:red\">Red</div>\n<div id=\"2\" style=\"color:blue\">Blue</div>\n```\n\n现在有一个需求，需要你把Blue的div变成红色，这时候在html、js中的操作是什么呢？\n\n```js\ndocument.getElementById('2').style.color = 'red'\n```\n\n这样的操作是命令式的，即告诉你的工具如何做\n那么声明式的操作是什么?\n\n``` code\n  const [color, setColor] = useState('blue')\n\n <div id=\"1\" style={{color: 'red'}}>Red</div>\n <div id=\"2\" style={{color: color}}>Blue</div>\n \n```\n\n当我们想要操作的时候，只需要改变color的值即可，React会自动帮你完成剩下的操作\n\n当然，这个例子并没有完全显示出声明式API的优越性，但是当你的项目越来越大，你会发现声明式API的优势\n\n### 虚拟Dom\n\n所谓虚拟DOM，是一种概念\n大致就是在内存中创建一个虚拟的DOM树，当数据发生变化时，React会比较新旧两颗虚拟DOM树的差异，然后只更新差异部分。\n\n分为 diff 和 调和 两个部分\ndiff：找出current 虚拟dom 和 next 虚拟dom 的差异\n调和：让真实dom树和current虚拟dom树保持一致\n\n#### Diff Algorithm\n\nReact 的 Diff 算法主要基于两个假设：  \n两个不同类型的元素会产生不同的树。\n开发者可以通过 key 属性来指示哪些子元素在不同的渲染下能保持稳定。\n基于这两个假设，React 的 Diff 算法可以被分为两个主要部分：元素类型的比较和同一类型元素的比较。  \n元素类型的比较  \n\n1. 当 React 对比两个元素时，首先会检查元素的类型。如果元素的类型不同，React 会直接销毁旧的树并建立新的树。例如，当一个元素从 a 变为 img，React 会销毁 a 及其子元素，然后新建 img 及其子元素。  \n2. 同一类型元素的比较  当两个元素为同一类型时，React 会保留 DOM 节点，并仅比较和更新改变的属性。然后，React 会递归地对子元素进行相同的过程。\n\n对于列表元素，React 无法知道列表中的元素是否有变化，因此需要开发者提供一个 key 属性来帮助 React 识别哪些元素是新的，哪些元素是旧的。这样，React 就可以只更新改变的元素，而不是重新渲染整个列表。 \n总的来说，React 的 Diff 算法通过智能地比较新旧虚拟 DOM 树的差异，使得只有实际改变的部分才会被更新，从而提高了性能。\n\n* 使用了深度优先的遍历算法\n* 优化策略\n  * 忽略了跨层级的节点的比较\n  * 通过 key 来判断是否是同一个节点\n\n##### 为什么使用深度优先？\n\n![深度优先](whydeepfirst.png)\n\n假设有以上dom树，两层，每个非叶子节点都有n个子节点\n\n对于n1点，\n广度优先：遍历n+1个节点\n深度优先：遍历2个节点\n\n对于n2点，\n广度优先：遍历2n个节点\n深度优先：遍历1+n个节点\n\n对于n3点，\n广度优先：遍历n+n×n个节点\n深度优先：遍历n+n×n个节点\n\n可见对于叶子节点的改变的比较，深度优先效率要远远大于广度优先\n\n不仅如此，由于：\n**一段时间内大部分的改变都会很集中**\n所以，深度优先更加适合React的Diff算法\n\n\n### Fiber 架构\n\nFiber是虚拟Dom的一种实现方式\n\n在React 16之前，React使用的是Stack Reconciler，即栈调和器，这种调和器是递归的，当递归深度过深时，会导致浏览器卡死\nFiber架构是React 16中引入的一种新的协调引擎，它的目的是为了更好地处理虚拟DOM的更新，使其更具有灵活性和效率。\n\n存在内存里的虚拟Dom，需要一种保存格式，Fiber的格式是javascript对象\n\n```json\n{\n  \"type\": 'h1',  // 组件类型\n  \"key\": null,   // key\n  \"props\": { ... }, // 输入的props\n  \"state\": { ... }, // 组件的state (如果是class组件或带有state的function组件)\n  \"child\": \"Fiber\" | \"null\",\n  // 第一个子元素的Fiber\n  \"sibling\": \"Fiber\" | \"null\",  // 下一个兄弟元素的Fiber\n  \"return\": \"Fiber\" | \"null\",  // 父元素的Fiber\n}\n```\n\nFiber：一个带有列表关系的DOM树\n\n\n#### Fiber工作特性\n\n* 单元工作：每个Fiber节点代表一个单元，所有Fiber节点共同组成一个Fiber链表\n* 连接属性：slibing 兄弟、child 子节点、return 父节点\n* React在更新时，会根据现有的Fiber树（Current Tree）创建一个新的临时树（Work-in-progress (WIP) Tree）,WIP-Tree包含了当前更新受影响的最高节点直至其所有子孙节点。\n因为React在更新时总是维护了两个Fiber树，所以可以随时进行比较、中断或恢复等操作，而且这种机制让React能够同时具备拥有优秀的渲染性能和UI的稳定性。\n\n![FiberTree](fibertree.png)\n\ncurrent 与 workinprogress：\n\n![Current-WorkInProgress](curr-wlp.png)\n\nreact不会改变current tree，而是在workInProgress tree上进行操作，当workInProgress tree完成后，react会将其替换为current tree\n这里的替换是指针上的替换，即current tree的指针指向workInProgress tree，\n这样只需要创建两个Fiber树，就可以重复利用，节省了内存\n\n##### Fiber如何实现优先级?\n\nReact Fiber的调度器是一个优先级调度器，它可以中断任务，然后根据优先级重新安排任务的执行顺序。这样可以保证高优先级任务的优先执行，从而提高用户体验。\n\n* requestIdleCallback \n  * 安排低优先级任务\n* requestAnimationFrame\n  * 安排高优先级任务\n\n\n#### Fiber工作流程\n\nFiber工作整体分为两个部分\n* Render\n* Commit\n\n其中，Render部分是异步的，在渲染的过程中可以执行一些网络请求\nCommit部分是同步的，用于执行副作用\n\n**副作用：对于Dom的操作以及特定的生命周期的方法**\n\nRender阶段:\n1. 创建与标记更新节点\n2. 收集副作用列表\n\n在对节点进行遍历时，Fiber采用的是While 循环 而非 递归 的方式\n\nCommit阶段\n1. 遍历 Effects 列表并为每个Effect 找到对应的组件实例\n2. 正式提交执行副作用\n\n因为Effect 会导致用户可见的界面的改变，所以必须是同步的\n\n# 回归主题：性能\n\n![性能](reactvsflutter1.png)\n\n我们需要明确一个原则：对于视图的改变代价都是高昂的:\n\n在上文 **浏览器渲染流程** 中我们可以看到，从拿到数据到渲染到屏幕上，需要经过多个步骤，而每个步骤都会消耗时间\n\n**Reflow（重排）**：当 DOM 的变化影响到元素的几何属性（例如宽度、高度、位置等）时，浏览器需要重新计算元素的几何属性，然后重新渲染页面。这个过程被称为 Reflow。Reflow 主要发生在“计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式”这个步骤之后，即在“布局”阶段。\n\n**Repaint（重绘）**：当 DOM 的变化只影响到元素的外观，但并不影响布局时，浏览器只需要重新绘制这些元素。这个过程被称为 Repaint。Repaint 主要发生在“主线程为每个层生成单独的指令集”这个步骤之后，即在“生成指令集”阶段。\n\nDOM的改变的代价要远远大于其样式的改变的代价\n\n\n\n所以flutter 和react 都“架空”了用户，给让用户操作“自己的dom”\n在Flutter中，用户通过widget来实现自己想做的事，在React中，指的是React Component\n\n用户操作之后，Flutter和React，都会生成对应的“虚拟DOM”\n在Flutter 中，可以简单的理解为Element，而在React中，指的是虚拟DOM（Fiber）\n并且，在这个过程中进行优化\n如果Widget可以复用，那么则复用，避免了所有更改。如果不可以，则查看是否可以更新，如果可以更新，则更新，避免了新建的高昂代价。如果不可以，则新建。\n虚拟DOM（Fiber）也是一样\n\n\n之前一直在看性能优化的博客，现在才发现是舍本逐末\n事实上，当我们了解了这些原理之后，性能便手到擒来了\n\n以这篇文章的一些点举两个简单的例子：\n1. 因为深度优先的遍历策略，我们尽可能减少dom的嵌套，实现扁平化DOM树\n2. 因为React的Diff算法，我们可以使用key来帮助React识别哪些元素是新的，哪些元素是旧的，从而提高性能\n","slug":"9flutter-react","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gej001kzw6khjvhgm0s","content":"<p><strong><em>“彼时彼刻，恰如此时此刻”<br>“竟能如此相像？”     ————题记</em></strong></p>\n<h1 id=\"渲染基本原理\"><a href=\"#渲染基本原理\" class=\"headerlink\" title=\"渲染基本原理\"></a>渲染基本原理</h1><p>本部分权当科普,亦欲抛砖引玉</p>\n<p>计算机图像中的渲染需要三个部分配合CPU、GPU、显示器<br>其中，CPU负责图像数据计算、GPU负责图像数据渲染、显示器负责图像数据显示<br>CPU把计算好的、需要显示的内容交给GPU，由GPU完成渲染后放入帧缓冲区，随后视频控制器根据垂直同步信号（VSync）以每秒60次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。</p>\n<p>CPU:任务调度、数据计算<br>GPU：图像渲染、着色器、抗锯齿、光栅化等<br>载体：包括浏览器、App等</p>\n<h1 id=\"How-Flutter-Work\"><a href=\"#How-Flutter-Work\" class=\"headerlink\" title=\"How Flutter Work ?\"></a>How Flutter Work ?</h1><p>这个问题可以从两个方面回答，第一个是 用什么 , 第二个是 怎么用<br>从 用什么 的角度，Flutter团队使用了两个工具，一个是dart，一个是skia<br>从 怎么用 的角度，Flutter团队使用了三棵树，分别是Widget Tree、Element Tree、RenderObject Tree</p>\n<h2 id=\"Dart-and-Skia\"><a href=\"#Dart-and-Skia\" class=\"headerlink\" title=\"Dart and Skia\"></a>Dart and Skia</h2><p>此处我们简单掠过，并不是本文的重点</p>\n<p>1.Skia是一款用C++开发的2D图像绘制引擎，保证了同一套代码调用在多个平台上的渲染效果是完全一致的。</p>\n<p>2.Dart是一个前端开发的强类型语言。</p>\n<h2 id=\"Flutter-Render\"><a href=\"#Flutter-Render\" class=\"headerlink\" title=\"Flutter Render\"></a>Flutter Render</h2><h3 id=\"Flutter-的三棵树\"><a href=\"#Flutter-的三棵树\" class=\"headerlink\" title=\"Flutter 的三棵树\"></a>Flutter 的三棵树</h3><p>1.Widget Tree<br>2.Element Tree<br>3.RenderObject Tree</p>\n<p>那么Widget、Element、RenderObject指的是什么呢？</p>\n<p>Widget: 是Flutter的基本构建块，是一个不可变的配置信息<br>比如一个Container组件，有什么子元素？背景颜色是什么？宽高啊等等</p>\n<ul>\n<li>在flutter中，Everything is a Widget</li>\n<li>A widget is immutable description of part a user interface 一个Widget是一个不可变的用户界面的描述</li>\n</ul>\n<p>当然，如果你学过html，可以先把Widget理解为html中的标签，比如div、span等等，即dom<br>但是显然会有以下问题：既然widget不可变，那么Flutter是如何更改UI(用户界面)的呢？<br>这就引出了Element和RenderObject的概念</p>\n<p>Element 是Widget的实例，是可变的，当我们当我们用一个新的Widget替换旧的Widget时，Element会更新其属性甚至新建新的Element以匹配新的Widget。</p>\n<p>RenderObject是Element的一个实例，它也是可变的。RenderObject包含了实际的绘制操作，它描述了在屏幕上显示的内容。<br>简单的来说，RenderObject就是Flutter “需要绘制出的东西”</p>\n<h3 id=\"Flutter-Render-Steps\"><a href=\"#Flutter-Render-Steps\" class=\"headerlink\" title=\"Flutter Render Steps\"></a>Flutter Render Steps</h3><p>以如下代码为例</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runApp(</span><br><span class=\"line\">    Text(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/07/10/9flutter-react/render1.png\" alt=\"示例图\"></p>\n<p>在这个例子里，flutter新建了一个Text：</p>\n<ol>\n<li>运行runApp，并把Text放到Widget树中,</li>\n<li>创建一个LeafRenderObjectElement(ps1:这里是Element，不是RenderObject! ; ps2:<br>Leaf表示这是一个叶子节点，即没有子节点的节点)</li>\n<li>根据LeafRenderObjectElement的creatRenderObject创建一个RenderObject,即RenderParagraph</li>\n</ol>\n<p>不过需要注意的是： <strong>Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject</strong></p>\n<p>比如，<br>Text这个Widget内部是由RichWidget实现的，Flutter的Widget树会有Text-RichText树结构，但是并不会为Text创建一个RenderObject，而是RichText创建一个RenderObject<br>(此处为了方便理解，使用最常见的Text，并且暂且无视RichText)</p>\n<p><img src=\"/2024/07/10/9flutter-react/update.jpg\" alt=\"示例图\"></p>\n<p>当Flutter更新的时候，以图中为例，我们把Text展示的文字从Hello 改为Hi<br>Flutter将会做以下几件事：</p>\n<ol>\n<li>创建一个新的Text Widget，并使用canUpdate方法把他和之前的Widget比较</li>\n<li>canUpdate传入oldWidget 和 newWidget，返回true或false，可以和react 的shouldComponentUpdate比较</li>\n<li>如果不同，则替换原有的Widget</li>\n<li>此时,LeafRenderObjectElement,则需要改变，会调用updateRenderObject方法</li>\n<li>与创建不同的是，这里的LeafRenderObjectElement会获取已有的RenderObject并改变其状态，而非新建、替换</li>\n</ol>\n<p>如果你使用flutter开发工具来查看RenderObject id，会发现并没有改变</p>\n<p>由于不太好对比，略去相同的情况的图</p>\n<img src=\"example.png\" width=\"500\" alt=\"example.png\">\n\n<img src=\"rich-nor.png\" width=\"500\" alt=\"切换时的RenderObject1\">\n\n<img src=\"rich-nor2.png\" width=\"500\" alt=\"切换时的RenderObject2\">\n\n<p>可以看到，当使用RichText和Text的时候，两者切换时，RenderObjectId会改变<br>至于为什么使用Text时，也存在RichText的树级结构，是因为Text内部是由RichText加工得到的</p>\n<p><img src=\"/2024/07/10/9flutter-react/text-from-rich.png\" alt=\"Text内部返回值\"></p>\n<p><strong>由此可以验证上文,Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject</strong></p>\n<hr>\n<p>在开始React部分之前，我们先来看一道老生常谈的八股题<br>事实上，虽然称之为“八股”，但我认为这道题很真的很有意义</p>\n<h1 id=\"讲一下浏览器的渲染流程\"><a href=\"#讲一下浏览器的渲染流程\" class=\"headerlink\" title=\"讲一下浏览器的渲染流程 ?\"></a>讲一下浏览器的渲染流程 ?</h1><p>从网络拿到html文件之后，开启渲染主线程进行解析，目的是解析为DOM树<br>同时开启一个预加载线程，这个线程主要负责css资源, 预加载线程快速浏览Link部分，通过网络线程请求css资源，之后在预加载线程进行解析并且返回给渲染在主线程。（解析、计算样式）<br>在遇到html中的js文件时，会停止html解析，即阻塞主线程</p>\n<p>渲染主线程获得DOM树以及CSSOM树之后，会进行计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式。（布局）</p>\n<p>主线程遍历合成之后的树，生成布局树。之后对布局树进行分层，这一部分是为了更改时更快。（分层）</p>\n<p>主线程为每个层生成单独的指令集。（生成指令集）</p>\n<p>至此主线程任务结束。</p>\n<p>之后进行分块，会把上一步的指令集会交给合成线程，合成线程的工作会交给多个线程进行。（分块）</p>\n<p>合成线程把信息、任务交给<strong>GPU进程</strong>，GPU开启多个线程，进行进行光栅化，并且优先处理靠近视口区域的块，即进行计算每个像素点的颜色。<br>（光栅化）</p>\n<p>之后，GPU把每个层、块的光栅化结果交给合成线程，合成线程计算出每个块的位置，以及旋转、缩放等。（合成）</p>\n<hr>\n<p>Ok,我们现在进入React部分</p>\n<h1 id=\"How-React-Renders\"><a href=\"#How-React-Renders\" class=\"headerlink\" title=\"How React Renders ?\"></a>How React Renders ?</h1><h2 id=\"What-is-React\"><a href=\"#What-is-React\" class=\"headerlink\" title=\"What is React ?\"></a>What is React ?</h2><p>什么是React？</p>\n<p>这里需要简单祛魅一下，React是一个library是一个库，不是一个framework.<br>如果需要类比的话，类似于lodash、tinyColor等等</p>\n<p>但是为什么React如此如日中天，被推崇备至？<br>因为React的这两个核心特性：声明式API、虚拟Dom</p>\n<p>不过，如果深入理解一下的话，你会发现声明式API和虚拟Dom是双生一体，无法分割的两个特性</p>\n<h3 id=\"声明式API\"><a href=\"#声明式API\" class=\"headerlink\" title=\"声明式API\"></a>声明式API</h3><p>所谓的声明式API，就是告诉React你想要的是什么，而并非是如何做。</p>\n<p>举个例子，我们现在有一个列表,列表包括两个div，一个是红色，一个是蓝色</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:red&quot;</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:blue&quot;</span>&gt;</span>Blue<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在有一个需求，需要你把Blue的div变成红色，这时候在html、js中的操作是什么呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样的操作是命令式的，即告诉你的工具如何做<br>那么声明式的操作是什么?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const [color, setColor] = useState(&#x27;blue&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;1&quot; style=&#123;&#123;color: &#x27;red&#x27;&#125;&#125;&gt;Red&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;2&quot; style=&#123;&#123;color: color&#125;&#125;&gt;Blue&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当我们想要操作的时候，只需要改变color的值即可，React会自动帮你完成剩下的操作</p>\n<p>当然，这个例子并没有完全显示出声明式API的优越性，但是当你的项目越来越大，你会发现声明式API的优势</p>\n<h3 id=\"虚拟Dom\"><a href=\"#虚拟Dom\" class=\"headerlink\" title=\"虚拟Dom\"></a>虚拟Dom</h3><p>所谓虚拟DOM，是一种概念<br>大致就是在内存中创建一个虚拟的DOM树，当数据发生变化时，React会比较新旧两颗虚拟DOM树的差异，然后只更新差异部分。</p>\n<p>分为 diff 和 调和 两个部分<br>diff：找出current 虚拟dom 和 next 虚拟dom 的差异<br>调和：让真实dom树和current虚拟dom树保持一致</p>\n<h4 id=\"Diff-Algorithm\"><a href=\"#Diff-Algorithm\" class=\"headerlink\" title=\"Diff Algorithm\"></a>Diff Algorithm</h4><p>React 的 Diff 算法主要基于两个假设：<br>两个不同类型的元素会产生不同的树。<br>开发者可以通过 key 属性来指示哪些子元素在不同的渲染下能保持稳定。<br>基于这两个假设，React 的 Diff 算法可以被分为两个主要部分：元素类型的比较和同一类型元素的比较。<br>元素类型的比较  </p>\n<ol>\n<li>当 React 对比两个元素时，首先会检查元素的类型。如果元素的类型不同，React 会直接销毁旧的树并建立新的树。例如，当一个元素从 a 变为 img，React 会销毁 a 及其子元素，然后新建 img 及其子元素。  </li>\n<li>同一类型元素的比较  当两个元素为同一类型时，React 会保留 DOM 节点，并仅比较和更新改变的属性。然后，React 会递归地对子元素进行相同的过程。</li>\n</ol>\n<p>对于列表元素，React 无法知道列表中的元素是否有变化，因此需要开发者提供一个 key 属性来帮助 React 识别哪些元素是新的，哪些元素是旧的。这样，React 就可以只更新改变的元素，而不是重新渲染整个列表。<br>总的来说，React 的 Diff 算法通过智能地比较新旧虚拟 DOM 树的差异，使得只有实际改变的部分才会被更新，从而提高了性能。</p>\n<ul>\n<li>使用了深度优先的遍历算法</li>\n<li>优化策略<ul>\n<li>忽略了跨层级的节点的比较</li>\n<li>通过 key 来判断是否是同一个节点</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"为什么使用深度优先？\"><a href=\"#为什么使用深度优先？\" class=\"headerlink\" title=\"为什么使用深度优先？\"></a>为什么使用深度优先？</h5><p><img src=\"/2024/07/10/9flutter-react/whydeepfirst.png\" alt=\"深度优先\"></p>\n<p>假设有以上dom树，两层，每个非叶子节点都有n个子节点</p>\n<p>对于n1点，<br>广度优先：遍历n+1个节点<br>深度优先：遍历2个节点</p>\n<p>对于n2点，<br>广度优先：遍历2n个节点<br>深度优先：遍历1+n个节点</p>\n<p>对于n3点，<br>广度优先：遍历n+n×n个节点<br>深度优先：遍历n+n×n个节点</p>\n<p>可见对于叶子节点的改变的比较，深度优先效率要远远大于广度优先</p>\n<p>不仅如此，由于：<br><strong>一段时间内大部分的改变都会很集中</strong><br>所以，深度优先更加适合React的Diff算法</p>\n<h3 id=\"Fiber-架构\"><a href=\"#Fiber-架构\" class=\"headerlink\" title=\"Fiber 架构\"></a>Fiber 架构</h3><p>Fiber是虚拟Dom的一种实现方式</p>\n<p>在React 16之前，React使用的是Stack Reconciler，即栈调和器，这种调和器是递归的，当递归深度过深时，会导致浏览器卡死<br>Fiber架构是React 16中引入的一种新的协调引擎，它的目的是为了更好地处理虚拟DOM的更新，使其更具有灵活性和效率。</p>\n<p>存在内存里的虚拟Dom，需要一种保存格式，Fiber的格式是javascript对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> &#x27;h1&#x27;<span class=\"punctuation\">,</span>  <span class=\"comment\">// 组件类型</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span>   <span class=\"comment\">// key</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;props&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> ... <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 输入的props</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;state&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> ... <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 组件的state (如果是class组件或带有state的function组件)</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;child&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Fiber&quot;</span> | <span class=\"string\">&quot;null&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 第一个子元素的Fiber</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sibling&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Fiber&quot;</span> | <span class=\"string\">&quot;null&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 下一个兄弟元素的Fiber</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;return&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Fiber&quot;</span> | <span class=\"string\">&quot;null&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 父元素的Fiber</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Fiber：一个带有列表关系的DOM树</p>\n<h4 id=\"Fiber工作特性\"><a href=\"#Fiber工作特性\" class=\"headerlink\" title=\"Fiber工作特性\"></a>Fiber工作特性</h4><ul>\n<li>单元工作：每个Fiber节点代表一个单元，所有Fiber节点共同组成一个Fiber链表</li>\n<li>连接属性：slibing 兄弟、child 子节点、return 父节点</li>\n<li>React在更新时，会根据现有的Fiber树（Current Tree）创建一个新的临时树（Work-in-progress (WIP) Tree）,WIP-Tree包含了当前更新受影响的最高节点直至其所有子孙节点。<br>因为React在更新时总是维护了两个Fiber树，所以可以随时进行比较、中断或恢复等操作，而且这种机制让React能够同时具备拥有优秀的渲染性能和UI的稳定性。</li>\n</ul>\n<p><img src=\"/2024/07/10/9flutter-react/fibertree.png\" alt=\"FiberTree\"></p>\n<p>current 与 workinprogress：</p>\n<p><img src=\"/2024/07/10/9flutter-react/curr-wlp.png\" alt=\"Current-WorkInProgress\"></p>\n<p>react不会改变current tree，而是在workInProgress tree上进行操作，当workInProgress tree完成后，react会将其替换为current tree<br>这里的替换是指针上的替换，即current tree的指针指向workInProgress tree，<br>这样只需要创建两个Fiber树，就可以重复利用，节省了内存</p>\n<h5 id=\"Fiber如何实现优先级\"><a href=\"#Fiber如何实现优先级\" class=\"headerlink\" title=\"Fiber如何实现优先级?\"></a>Fiber如何实现优先级?</h5><p>React Fiber的调度器是一个优先级调度器，它可以中断任务，然后根据优先级重新安排任务的执行顺序。这样可以保证高优先级任务的优先执行，从而提高用户体验。</p>\n<ul>\n<li>requestIdleCallback <ul>\n<li>安排低优先级任务</li>\n</ul>\n</li>\n<li>requestAnimationFrame<ul>\n<li>安排高优先级任务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Fiber工作流程\"><a href=\"#Fiber工作流程\" class=\"headerlink\" title=\"Fiber工作流程\"></a>Fiber工作流程</h4><p>Fiber工作整体分为两个部分</p>\n<ul>\n<li>Render</li>\n<li>Commit</li>\n</ul>\n<p>其中，Render部分是异步的，在渲染的过程中可以执行一些网络请求<br>Commit部分是同步的，用于执行副作用</p>\n<p><strong>副作用：对于Dom的操作以及特定的生命周期的方法</strong></p>\n<p>Render阶段:</p>\n<ol>\n<li>创建与标记更新节点</li>\n<li>收集副作用列表</li>\n</ol>\n<p>在对节点进行遍历时，Fiber采用的是While 循环 而非 递归 的方式</p>\n<p>Commit阶段</p>\n<ol>\n<li>遍历 Effects 列表并为每个Effect 找到对应的组件实例</li>\n<li>正式提交执行副作用</li>\n</ol>\n<p>因为Effect 会导致用户可见的界面的改变，所以必须是同步的</p>\n<h1 id=\"回归主题：性能\"><a href=\"#回归主题：性能\" class=\"headerlink\" title=\"回归主题：性能\"></a>回归主题：性能</h1><p><img src=\"/2024/07/10/9flutter-react/reactvsflutter1.png\" alt=\"性能\"></p>\n<p>我们需要明确一个原则：对于视图的改变代价都是高昂的:</p>\n<p>在上文 <strong>浏览器渲染流程</strong> 中我们可以看到，从拿到数据到渲染到屏幕上，需要经过多个步骤，而每个步骤都会消耗时间</p>\n<p><strong>Reflow（重排）</strong>：当 DOM 的变化影响到元素的几何属性（例如宽度、高度、位置等）时，浏览器需要重新计算元素的几何属性，然后重新渲染页面。这个过程被称为 Reflow。Reflow 主要发生在“计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式”这个步骤之后，即在“布局”阶段。</p>\n<p><strong>Repaint（重绘）</strong>：当 DOM 的变化只影响到元素的外观，但并不影响布局时，浏览器只需要重新绘制这些元素。这个过程被称为 Repaint。Repaint 主要发生在“主线程为每个层生成单独的指令集”这个步骤之后，即在“生成指令集”阶段。</p>\n<p>DOM的改变的代价要远远大于其样式的改变的代价</p>\n<p>所以flutter 和react 都“架空”了用户，给让用户操作“自己的dom”<br>在Flutter中，用户通过widget来实现自己想做的事，在React中，指的是React Component</p>\n<p>用户操作之后，Flutter和React，都会生成对应的“虚拟DOM”<br>在Flutter 中，可以简单的理解为Element，而在React中，指的是虚拟DOM（Fiber）<br>并且，在这个过程中进行优化<br>如果Widget可以复用，那么则复用，避免了所有更改。如果不可以，则查看是否可以更新，如果可以更新，则更新，避免了新建的高昂代价。如果不可以，则新建。<br>虚拟DOM（Fiber）也是一样</p>\n<p>之前一直在看性能优化的博客，现在才发现是舍本逐末<br>事实上，当我们了解了这些原理之后，性能便手到擒来了</p>\n<p>以这篇文章的一些点举两个简单的例子：</p>\n<ol>\n<li>因为深度优先的遍历策略，我们尽可能减少dom的嵌套，实现扁平化DOM树</li>\n<li>因为React的Diff算法，我们可以使用key来帮助React识别哪些元素是新的，哪些元素是旧的，从而提高性能</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p><strong><em>“彼时彼刻，恰如此时此刻”<br>“竟能如此相像？”     ————题记</em></strong></p>\n<h1 id=\"渲染基本原理\"><a href=\"#渲染基本原理\" class=\"headerlink\" title=\"渲染基本原理\"></a>渲染基本原理</h1><p>本部分权当科普,亦欲抛砖引玉</p>\n<p>计算机图像中的渲染需要三个部分配合CPU、GPU、显示器<br>其中，CPU负责图像数据计算、GPU负责图像数据渲染、显示器负责图像数据显示<br>CPU把计算好的、需要显示的内容交给GPU，由GPU完成渲染后放入帧缓冲区，随后视频控制器根据垂直同步信号（VSync）以每秒60次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。</p>\n<p>CPU:任务调度、数据计算<br>GPU：图像渲染、着色器、抗锯齿、光栅化等<br>载体：包括浏览器、App等</p>\n<h1 id=\"How-Flutter-Work\"><a href=\"#How-Flutter-Work\" class=\"headerlink\" title=\"How Flutter Work ?\"></a>How Flutter Work ?</h1><p>这个问题可以从两个方面回答，第一个是 用什么 , 第二个是 怎么用<br>从 用什么 的角度，Flutter团队使用了两个工具，一个是dart，一个是skia<br>从 怎么用 的角度，Flutter团队使用了三棵树，分别是Widget Tree、Element Tree、RenderObject Tree</p>\n<h2 id=\"Dart-and-Skia\"><a href=\"#Dart-and-Skia\" class=\"headerlink\" title=\"Dart and Skia\"></a>Dart and Skia</h2><p>此处我们简单掠过，并不是本文的重点</p>\n<p>1.Skia是一款用C++开发的2D图像绘制引擎，保证了同一套代码调用在多个平台上的渲染效果是完全一致的。</p>\n<p>2.Dart是一个前端开发的强类型语言。</p>\n<h2 id=\"Flutter-Render\"><a href=\"#Flutter-Render\" class=\"headerlink\" title=\"Flutter Render\"></a>Flutter Render</h2><h3 id=\"Flutter-的三棵树\"><a href=\"#Flutter-的三棵树\" class=\"headerlink\" title=\"Flutter 的三棵树\"></a>Flutter 的三棵树</h3><p>1.Widget Tree<br>2.Element Tree<br>3.RenderObject Tree</p>\n<p>那么Widget、Element、RenderObject指的是什么呢？</p>\n<p>Widget: 是Flutter的基本构建块，是一个不可变的配置信息<br>比如一个Container组件，有什么子元素？背景颜色是什么？宽高啊等等</p>\n<ul>\n<li>在flutter中，Everything is a Widget</li>\n<li>A widget is immutable description of part a user interface 一个Widget是一个不可变的用户界面的描述</li>\n</ul>\n<p>当然，如果你学过html，可以先把Widget理解为html中的标签，比如div、span等等，即dom<br>但是显然会有以下问题：既然widget不可变，那么Flutter是如何更改UI(用户界面)的呢？<br>这就引出了Element和RenderObject的概念</p>\n<p>Element 是Widget的实例，是可变的，当我们当我们用一个新的Widget替换旧的Widget时，Element会更新其属性甚至新建新的Element以匹配新的Widget。</p>\n<p>RenderObject是Element的一个实例，它也是可变的。RenderObject包含了实际的绘制操作，它描述了在屏幕上显示的内容。<br>简单的来说，RenderObject就是Flutter “需要绘制出的东西”</p>\n<h3 id=\"Flutter-Render-Steps\"><a href=\"#Flutter-Render-Steps\" class=\"headerlink\" title=\"Flutter Render Steps\"></a>Flutter Render Steps</h3><p>以如下代码为例</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runApp(</span><br><span class=\"line\">    Text(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/07/10/9flutter-react/render1.png\" alt=\"示例图\"></p>\n<p>在这个例子里，flutter新建了一个Text：</p>\n<ol>\n<li>运行runApp，并把Text放到Widget树中,</li>\n<li>创建一个LeafRenderObjectElement(ps1:这里是Element，不是RenderObject! ; ps2:<br>Leaf表示这是一个叶子节点，即没有子节点的节点)</li>\n<li>根据LeafRenderObjectElement的creatRenderObject创建一个RenderObject,即RenderParagraph</li>\n</ol>\n<p>不过需要注意的是： <strong>Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject</strong></p>\n<p>比如，<br>Text这个Widget内部是由RichWidget实现的，Flutter的Widget树会有Text-RichText树结构，但是并不会为Text创建一个RenderObject，而是RichText创建一个RenderObject<br>(此处为了方便理解，使用最常见的Text，并且暂且无视RichText)</p>\n<p><img src=\"/2024/07/10/9flutter-react/update.jpg\" alt=\"示例图\"></p>\n<p>当Flutter更新的时候，以图中为例，我们把Text展示的文字从Hello 改为Hi<br>Flutter将会做以下几件事：</p>\n<ol>\n<li>创建一个新的Text Widget，并使用canUpdate方法把他和之前的Widget比较</li>\n<li>canUpdate传入oldWidget 和 newWidget，返回true或false，可以和react 的shouldComponentUpdate比较</li>\n<li>如果不同，则替换原有的Widget</li>\n<li>此时,LeafRenderObjectElement,则需要改变，会调用updateRenderObject方法</li>\n<li>与创建不同的是，这里的LeafRenderObjectElement会获取已有的RenderObject并改变其状态，而非新建、替换</li>\n</ol>\n<p>如果你使用flutter开发工具来查看RenderObject id，会发现并没有改变</p>\n<p>由于不太好对比，略去相同的情况的图</p>\n<img src=\"example.png\" width=\"500\" alt=\"example.png\">\n\n<img src=\"rich-nor.png\" width=\"500\" alt=\"切换时的RenderObject1\">\n\n<img src=\"rich-nor2.png\" width=\"500\" alt=\"切换时的RenderObject2\">\n\n<p>可以看到，当使用RichText和Text的时候，两者切换时，RenderObjectId会改变<br>至于为什么使用Text时，也存在RichText的树级结构，是因为Text内部是由RichText加工得到的</p>\n<p><img src=\"/2024/07/10/9flutter-react/text-from-rich.png\" alt=\"Text内部返回值\"></p>\n<p><strong>由此可以验证上文,Flutter不会为每个Widget都创建一个RenderObject，而是经过层层调用之后的叶子元素才会创建RenderObject</strong></p>\n<hr>\n<p>在开始React部分之前，我们先来看一道老生常谈的八股题<br>事实上，虽然称之为“八股”，但我认为这道题很真的很有意义</p>\n<h1 id=\"讲一下浏览器的渲染流程\"><a href=\"#讲一下浏览器的渲染流程\" class=\"headerlink\" title=\"讲一下浏览器的渲染流程 ?\"></a>讲一下浏览器的渲染流程 ?</h1><p>从网络拿到html文件之后，开启渲染主线程进行解析，目的是解析为DOM树<br>同时开启一个预加载线程，这个线程主要负责css资源, 预加载线程快速浏览Link部分，通过网络线程请求css资源，之后在预加载线程进行解析并且返回给渲染在主线程。（解析、计算样式）<br>在遇到html中的js文件时，会停止html解析，即阻塞主线程</p>\n<p>渲染主线程获得DOM树以及CSSOM树之后，会进行计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式。（布局）</p>\n<p>主线程遍历合成之后的树，生成布局树。之后对布局树进行分层，这一部分是为了更改时更快。（分层）</p>\n<p>主线程为每个层生成单独的指令集。（生成指令集）</p>\n<p>至此主线程任务结束。</p>\n<p>之后进行分块，会把上一步的指令集会交给合成线程，合成线程的工作会交给多个线程进行。（分块）</p>\n<p>合成线程把信息、任务交给<strong>GPU进程</strong>，GPU开启多个线程，进行进行光栅化，并且优先处理靠近视口区域的块，即进行计算每个像素点的颜色。<br>（光栅化）</p>\n<p>之后，GPU把每个层、块的光栅化结果交给合成线程，合成线程计算出每个块的位置，以及旋转、缩放等。（合成）</p>\n<hr>\n<p>Ok,我们现在进入React部分</p>\n<h1 id=\"How-React-Renders\"><a href=\"#How-React-Renders\" class=\"headerlink\" title=\"How React Renders ?\"></a>How React Renders ?</h1><h2 id=\"What-is-React\"><a href=\"#What-is-React\" class=\"headerlink\" title=\"What is React ?\"></a>What is React ?</h2><p>什么是React？</p>\n<p>这里需要简单祛魅一下，React是一个library是一个库，不是一个framework.<br>如果需要类比的话，类似于lodash、tinyColor等等</p>\n<p>但是为什么React如此如日中天，被推崇备至？<br>因为React的这两个核心特性：声明式API、虚拟Dom</p>\n<p>不过，如果深入理解一下的话，你会发现声明式API和虚拟Dom是双生一体，无法分割的两个特性</p>\n<h3 id=\"声明式API\"><a href=\"#声明式API\" class=\"headerlink\" title=\"声明式API\"></a>声明式API</h3><p>所谓的声明式API，就是告诉React你想要的是什么，而并非是如何做。</p>\n<p>举个例子，我们现在有一个列表,列表包括两个div，一个是红色，一个是蓝色</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:red&quot;</span>&gt;</span>Red<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:blue&quot;</span>&gt;</span>Blue<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在有一个需求，需要你把Blue的div变成红色，这时候在html、js中的操作是什么呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;2&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这样的操作是命令式的，即告诉你的工具如何做<br>那么声明式的操作是什么?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const [color, setColor] = useState(&#x27;blue&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;1&quot; style=&#123;&#123;color: &#x27;red&#x27;&#125;&#125;&gt;Red&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;2&quot; style=&#123;&#123;color: color&#125;&#125;&gt;Blue&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当我们想要操作的时候，只需要改变color的值即可，React会自动帮你完成剩下的操作</p>\n<p>当然，这个例子并没有完全显示出声明式API的优越性，但是当你的项目越来越大，你会发现声明式API的优势</p>\n<h3 id=\"虚拟Dom\"><a href=\"#虚拟Dom\" class=\"headerlink\" title=\"虚拟Dom\"></a>虚拟Dom</h3><p>所谓虚拟DOM，是一种概念<br>大致就是在内存中创建一个虚拟的DOM树，当数据发生变化时，React会比较新旧两颗虚拟DOM树的差异，然后只更新差异部分。</p>\n<p>分为 diff 和 调和 两个部分<br>diff：找出current 虚拟dom 和 next 虚拟dom 的差异<br>调和：让真实dom树和current虚拟dom树保持一致</p>\n<h4 id=\"Diff-Algorithm\"><a href=\"#Diff-Algorithm\" class=\"headerlink\" title=\"Diff Algorithm\"></a>Diff Algorithm</h4><p>React 的 Diff 算法主要基于两个假设：<br>两个不同类型的元素会产生不同的树。<br>开发者可以通过 key 属性来指示哪些子元素在不同的渲染下能保持稳定。<br>基于这两个假设，React 的 Diff 算法可以被分为两个主要部分：元素类型的比较和同一类型元素的比较。<br>元素类型的比较  </p>\n<ol>\n<li>当 React 对比两个元素时，首先会检查元素的类型。如果元素的类型不同，React 会直接销毁旧的树并建立新的树。例如，当一个元素从 a 变为 img，React 会销毁 a 及其子元素，然后新建 img 及其子元素。  </li>\n<li>同一类型元素的比较  当两个元素为同一类型时，React 会保留 DOM 节点，并仅比较和更新改变的属性。然后，React 会递归地对子元素进行相同的过程。</li>\n</ol>\n<p>对于列表元素，React 无法知道列表中的元素是否有变化，因此需要开发者提供一个 key 属性来帮助 React 识别哪些元素是新的，哪些元素是旧的。这样，React 就可以只更新改变的元素，而不是重新渲染整个列表。<br>总的来说，React 的 Diff 算法通过智能地比较新旧虚拟 DOM 树的差异，使得只有实际改变的部分才会被更新，从而提高了性能。</p>\n<ul>\n<li>使用了深度优先的遍历算法</li>\n<li>优化策略<ul>\n<li>忽略了跨层级的节点的比较</li>\n<li>通过 key 来判断是否是同一个节点</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"为什么使用深度优先？\"><a href=\"#为什么使用深度优先？\" class=\"headerlink\" title=\"为什么使用深度优先？\"></a>为什么使用深度优先？</h5><p><img src=\"/2024/07/10/9flutter-react/whydeepfirst.png\" alt=\"深度优先\"></p>\n<p>假设有以上dom树，两层，每个非叶子节点都有n个子节点</p>\n<p>对于n1点，<br>广度优先：遍历n+1个节点<br>深度优先：遍历2个节点</p>\n<p>对于n2点，<br>广度优先：遍历2n个节点<br>深度优先：遍历1+n个节点</p>\n<p>对于n3点，<br>广度优先：遍历n+n×n个节点<br>深度优先：遍历n+n×n个节点</p>\n<p>可见对于叶子节点的改变的比较，深度优先效率要远远大于广度优先</p>\n<p>不仅如此，由于：<br><strong>一段时间内大部分的改变都会很集中</strong><br>所以，深度优先更加适合React的Diff算法</p>\n<h3 id=\"Fiber-架构\"><a href=\"#Fiber-架构\" class=\"headerlink\" title=\"Fiber 架构\"></a>Fiber 架构</h3><p>Fiber是虚拟Dom的一种实现方式</p>\n<p>在React 16之前，React使用的是Stack Reconciler，即栈调和器，这种调和器是递归的，当递归深度过深时，会导致浏览器卡死<br>Fiber架构是React 16中引入的一种新的协调引擎，它的目的是为了更好地处理虚拟DOM的更新，使其更具有灵活性和效率。</p>\n<p>存在内存里的虚拟Dom，需要一种保存格式，Fiber的格式是javascript对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> &#x27;h1&#x27;<span class=\"punctuation\">,</span>  <span class=\"comment\">// 组件类型</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span>   <span class=\"comment\">// key</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;props&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> ... <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 输入的props</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;state&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> ... <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 组件的state (如果是class组件或带有state的function组件)</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;child&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Fiber&quot;</span> | <span class=\"string\">&quot;null&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 第一个子元素的Fiber</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sibling&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Fiber&quot;</span> | <span class=\"string\">&quot;null&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 下一个兄弟元素的Fiber</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;return&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Fiber&quot;</span> | <span class=\"string\">&quot;null&quot;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 父元素的Fiber</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Fiber：一个带有列表关系的DOM树</p>\n<h4 id=\"Fiber工作特性\"><a href=\"#Fiber工作特性\" class=\"headerlink\" title=\"Fiber工作特性\"></a>Fiber工作特性</h4><ul>\n<li>单元工作：每个Fiber节点代表一个单元，所有Fiber节点共同组成一个Fiber链表</li>\n<li>连接属性：slibing 兄弟、child 子节点、return 父节点</li>\n<li>React在更新时，会根据现有的Fiber树（Current Tree）创建一个新的临时树（Work-in-progress (WIP) Tree）,WIP-Tree包含了当前更新受影响的最高节点直至其所有子孙节点。<br>因为React在更新时总是维护了两个Fiber树，所以可以随时进行比较、中断或恢复等操作，而且这种机制让React能够同时具备拥有优秀的渲染性能和UI的稳定性。</li>\n</ul>\n<p><img src=\"/2024/07/10/9flutter-react/fibertree.png\" alt=\"FiberTree\"></p>\n<p>current 与 workinprogress：</p>\n<p><img src=\"/2024/07/10/9flutter-react/curr-wlp.png\" alt=\"Current-WorkInProgress\"></p>\n<p>react不会改变current tree，而是在workInProgress tree上进行操作，当workInProgress tree完成后，react会将其替换为current tree<br>这里的替换是指针上的替换，即current tree的指针指向workInProgress tree，<br>这样只需要创建两个Fiber树，就可以重复利用，节省了内存</p>\n<h5 id=\"Fiber如何实现优先级\"><a href=\"#Fiber如何实现优先级\" class=\"headerlink\" title=\"Fiber如何实现优先级?\"></a>Fiber如何实现优先级?</h5><p>React Fiber的调度器是一个优先级调度器，它可以中断任务，然后根据优先级重新安排任务的执行顺序。这样可以保证高优先级任务的优先执行，从而提高用户体验。</p>\n<ul>\n<li>requestIdleCallback <ul>\n<li>安排低优先级任务</li>\n</ul>\n</li>\n<li>requestAnimationFrame<ul>\n<li>安排高优先级任务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Fiber工作流程\"><a href=\"#Fiber工作流程\" class=\"headerlink\" title=\"Fiber工作流程\"></a>Fiber工作流程</h4><p>Fiber工作整体分为两个部分</p>\n<ul>\n<li>Render</li>\n<li>Commit</li>\n</ul>\n<p>其中，Render部分是异步的，在渲染的过程中可以执行一些网络请求<br>Commit部分是同步的，用于执行副作用</p>\n<p><strong>副作用：对于Dom的操作以及特定的生命周期的方法</strong></p>\n<p>Render阶段:</p>\n<ol>\n<li>创建与标记更新节点</li>\n<li>收集副作用列表</li>\n</ol>\n<p>在对节点进行遍历时，Fiber采用的是While 循环 而非 递归 的方式</p>\n<p>Commit阶段</p>\n<ol>\n<li>遍历 Effects 列表并为每个Effect 找到对应的组件实例</li>\n<li>正式提交执行副作用</li>\n</ol>\n<p>因为Effect 会导致用户可见的界面的改变，所以必须是同步的</p>\n<h1 id=\"回归主题：性能\"><a href=\"#回归主题：性能\" class=\"headerlink\" title=\"回归主题：性能\"></a>回归主题：性能</h1><p><img src=\"/2024/07/10/9flutter-react/reactvsflutter1.png\" alt=\"性能\"></p>\n<p>我们需要明确一个原则：对于视图的改变代价都是高昂的:</p>\n<p>在上文 <strong>浏览器渲染流程</strong> 中我们可以看到，从拿到数据到渲染到屏幕上，需要经过多个步骤，而每个步骤都会消耗时间</p>\n<p><strong>Reflow（重排）</strong>：当 DOM 的变化影响到元素的几何属性（例如宽度、高度、位置等）时，浏览器需要重新计算元素的几何属性，然后重新渲染页面。这个过程被称为 Reflow。Reflow 主要发生在“计算样式，把预设样式转化为对应的值以及相对样式转化为绝对样式”这个步骤之后，即在“布局”阶段。</p>\n<p><strong>Repaint（重绘）</strong>：当 DOM 的变化只影响到元素的外观，但并不影响布局时，浏览器只需要重新绘制这些元素。这个过程被称为 Repaint。Repaint 主要发生在“主线程为每个层生成单独的指令集”这个步骤之后，即在“生成指令集”阶段。</p>\n<p>DOM的改变的代价要远远大于其样式的改变的代价</p>\n<p>所以flutter 和react 都“架空”了用户，给让用户操作“自己的dom”<br>在Flutter中，用户通过widget来实现自己想做的事，在React中，指的是React Component</p>\n<p>用户操作之后，Flutter和React，都会生成对应的“虚拟DOM”<br>在Flutter 中，可以简单的理解为Element，而在React中，指的是虚拟DOM（Fiber）<br>并且，在这个过程中进行优化<br>如果Widget可以复用，那么则复用，避免了所有更改。如果不可以，则查看是否可以更新，如果可以更新，则更新，避免了新建的高昂代价。如果不可以，则新建。<br>虚拟DOM（Fiber）也是一样</p>\n<p>之前一直在看性能优化的博客，现在才发现是舍本逐末<br>事实上，当我们了解了这些原理之后，性能便手到擒来了</p>\n<p>以这篇文章的一些点举两个简单的例子：</p>\n<ol>\n<li>因为深度优先的遍历策略，我们尽可能减少dom的嵌套，实现扁平化DOM树</li>\n<li>因为React的Diff算法，我们可以使用key来帮助React识别哪些元素是新的，哪些元素是旧的，从而提高性能</li>\n</ol>\n"},{"title":"权限认证","description":"本文通过引用掘金上一篇较为不明的文章，对token、cookie、session、jwt、oauth2进行了简单的梳理与辨析","date":"2024-07-03T01:38:00.750Z","updated":"2024-07-10T07:43:25.942Z","top_img":null,"_content":"这两天闲逛掘金，看到了一个19年大火的文章，讲的是token、cookie、session、jwt，和我之前认为的有一些不同\n去伪留臻，记而存之\n\n附上链接：https://juejin.cn/post/6844904034181070861?searchId=202407022020106665740BE9EADAA2CD66\n\n主要概念：\n\n- session\n- cookie\n- token\n- jwt json web token\n- oauth2\n\n***session和token是一种 ”信息组成“ 的策略***\n\n***jwt是一种高级协议，解决了token中的一些问题***\n\n***cookie是一种信息载体，如同localstorage和sessionstorage***\n\n***Oauth2，第三方登录协议***\n\n**不同概念之间可比较性不高，这也是juejin那篇文章误导性很强的地方之一**\n\n## 存储方式：cookie、localstorage、sessionStorage\n\n### cookie\n\ncookie存储的信息大多被用于：\n\n- 会话状态管理\n    - 用户登陆状态等\n- 个性化设置\n    - 自定义设置、主题和其他设置\n- 浏览器行为跟踪\n    - 分析用户行为\n\n浏览器第一次请求服务端数据，服务端设置cookie\n\n不过cookie存储空间较小，大约4k\n\n### localStorage、sessionStorage\n\n两者的区别是，sessionStorage只在一次会话中有效\n\n## 验证信息策略\n\n### Session\n\n浏览器第一次向服务端请求，服务端生成一个seesionid，并储存到内存或者redis或者数据库中，之后，并且把sessionid返回给客户端，此时，可以选择存到cookie中并且不设置过期时间（关闭session清除），也可以放到前端内存（即声明一个全局变量）中（关闭应用清除）。每次请求服务端数据时，服务端检查cookie是否存在sessionid并且进行验证，如果缓存中有sessionid，那么则通过，没有则重新登录\n\nsessionId生成策略：可以是随机数、也可以是客户端传来的数据\n\n特点：存放在**服务端**，服务端每次收到请求都会查询是否存在sessionid，会给服务端查询造成压力\n\n### Token\n\n客户端进行登录时，服务端生成一个token（字符串，可以有意义也可以无意义）返回给客户端并由客户端保存，之后每次请求，需要由客户端带上这个token，服务端进行验证\n\n以下是几种token中常用的策略（拓展、变式）\n\n- 双token，（多用于实现无感登录）\n    - 即有两种token，access token 用于请求数据，refresh token 用于刷新access token\n    - access token 有效期较短，refresh token 有效时间较长\n    - 客户端登录时，服务端生成两个token，access token随请求返回到客户端，用于每次请求时进行验证；refresh token 放到 http\n      only cookie中，以使客户端无法访问，增加安全性，用于access token过期时进行刷新\n- JWT 一种 token 的 格式以及包含的信息 的**规范*\n    - 由三部分组成，头部、中部、尾部, 用.分割，如：xxxxx.yyyyy.zzzzz\n    - 头部：加密方式等,使用base64编码\n    - 中部：用户的信息，如：用户id等，使用base64编码\n    - 尾部：头部和中部结合（简单拼接）后，使用头部声明的加密方式进行加密\n    - 客户端进行储存，请求时，只需带上jwt，然后客户端进行解码验证，验证无误则有效，节省存储sessionid的服务器压力，用解码时间换取空间\n### OAuth2\n\n简单的来说，OAuth2也就是第三方认证，比如你想用微信的号登录小红书这个过程，就是OAuth2的过程\n\n","source":"_posts/8Auth.md","raw":"---\ntitle: 权限认证\ndescription: 本文通过引用掘金上一篇较为不明的文章，对token、cookie、session、jwt、oauth2进行了简单的梳理与辨析\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ntop_img:\ntags:\n  - 本手\n---\n这两天闲逛掘金，看到了一个19年大火的文章，讲的是token、cookie、session、jwt，和我之前认为的有一些不同\n去伪留臻，记而存之\n\n附上链接：https://juejin.cn/post/6844904034181070861?searchId=202407022020106665740BE9EADAA2CD66\n\n主要概念：\n\n- session\n- cookie\n- token\n- jwt json web token\n- oauth2\n\n***session和token是一种 ”信息组成“ 的策略***\n\n***jwt是一种高级协议，解决了token中的一些问题***\n\n***cookie是一种信息载体，如同localstorage和sessionstorage***\n\n***Oauth2，第三方登录协议***\n\n**不同概念之间可比较性不高，这也是juejin那篇文章误导性很强的地方之一**\n\n## 存储方式：cookie、localstorage、sessionStorage\n\n### cookie\n\ncookie存储的信息大多被用于：\n\n- 会话状态管理\n    - 用户登陆状态等\n- 个性化设置\n    - 自定义设置、主题和其他设置\n- 浏览器行为跟踪\n    - 分析用户行为\n\n浏览器第一次请求服务端数据，服务端设置cookie\n\n不过cookie存储空间较小，大约4k\n\n### localStorage、sessionStorage\n\n两者的区别是，sessionStorage只在一次会话中有效\n\n## 验证信息策略\n\n### Session\n\n浏览器第一次向服务端请求，服务端生成一个seesionid，并储存到内存或者redis或者数据库中，之后，并且把sessionid返回给客户端，此时，可以选择存到cookie中并且不设置过期时间（关闭session清除），也可以放到前端内存（即声明一个全局变量）中（关闭应用清除）。每次请求服务端数据时，服务端检查cookie是否存在sessionid并且进行验证，如果缓存中有sessionid，那么则通过，没有则重新登录\n\nsessionId生成策略：可以是随机数、也可以是客户端传来的数据\n\n特点：存放在**服务端**，服务端每次收到请求都会查询是否存在sessionid，会给服务端查询造成压力\n\n### Token\n\n客户端进行登录时，服务端生成一个token（字符串，可以有意义也可以无意义）返回给客户端并由客户端保存，之后每次请求，需要由客户端带上这个token，服务端进行验证\n\n以下是几种token中常用的策略（拓展、变式）\n\n- 双token，（多用于实现无感登录）\n    - 即有两种token，access token 用于请求数据，refresh token 用于刷新access token\n    - access token 有效期较短，refresh token 有效时间较长\n    - 客户端登录时，服务端生成两个token，access token随请求返回到客户端，用于每次请求时进行验证；refresh token 放到 http\n      only cookie中，以使客户端无法访问，增加安全性，用于access token过期时进行刷新\n- JWT 一种 token 的 格式以及包含的信息 的**规范*\n    - 由三部分组成，头部、中部、尾部, 用.分割，如：xxxxx.yyyyy.zzzzz\n    - 头部：加密方式等,使用base64编码\n    - 中部：用户的信息，如：用户id等，使用base64编码\n    - 尾部：头部和中部结合（简单拼接）后，使用头部声明的加密方式进行加密\n    - 客户端进行储存，请求时，只需带上jwt，然后客户端进行解码验证，验证无误则有效，节省存储sessionid的服务器压力，用解码时间换取空间\n### OAuth2\n\n简单的来说，OAuth2也就是第三方认证，比如你想用微信的号登录小红书这个过程，就是OAuth2的过程\n\n","slug":"8Auth","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clzoy7gek001lzw6k91kzgb9p","content":"<p>这两天闲逛掘金，看到了一个19年大火的文章，讲的是token、cookie、session、jwt，和我之前认为的有一些不同<br>去伪留臻，记而存之</p>\n<p>附上链接：<a href=\"https://juejin.cn/post/6844904034181070861?searchId=202407022020106665740BE9EADAA2CD66\">https://juejin.cn/post/6844904034181070861?searchId=202407022020106665740BE9EADAA2CD66</a></p>\n<p>主要概念：</p>\n<ul>\n<li>session</li>\n<li>cookie</li>\n<li>token</li>\n<li>jwt json web token</li>\n<li>oauth2</li>\n</ul>\n<p><em><strong>session和token是一种 ”信息组成“ 的策略</strong></em></p>\n<p><em><strong>jwt是一种高级协议，解决了token中的一些问题</strong></em></p>\n<p><em><strong>cookie是一种信息载体，如同localstorage和sessionstorage</strong></em></p>\n<p><em><strong>Oauth2，第三方登录协议</strong></em></p>\n<p><strong>不同概念之间可比较性不高，这也是juejin那篇文章误导性很强的地方之一</strong></p>\n<h2 id=\"存储方式：cookie、localstorage、sessionStorage\"><a href=\"#存储方式：cookie、localstorage、sessionStorage\" class=\"headerlink\" title=\"存储方式：cookie、localstorage、sessionStorage\"></a>存储方式：cookie、localstorage、sessionStorage</h2><h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><p>cookie存储的信息大多被用于：</p>\n<ul>\n<li>会话状态管理<ul>\n<li>用户登陆状态等</li>\n</ul>\n</li>\n<li>个性化设置<ul>\n<li>自定义设置、主题和其他设置</li>\n</ul>\n</li>\n<li>浏览器行为跟踪<ul>\n<li>分析用户行为</li>\n</ul>\n</li>\n</ul>\n<p>浏览器第一次请求服务端数据，服务端设置cookie</p>\n<p>不过cookie存储空间较小，大约4k</p>\n<h3 id=\"localStorage、sessionStorage\"><a href=\"#localStorage、sessionStorage\" class=\"headerlink\" title=\"localStorage、sessionStorage\"></a>localStorage、sessionStorage</h3><p>两者的区别是，sessionStorage只在一次会话中有效</p>\n<h2 id=\"验证信息策略\"><a href=\"#验证信息策略\" class=\"headerlink\" title=\"验证信息策略\"></a>验证信息策略</h2><h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>浏览器第一次向服务端请求，服务端生成一个seesionid，并储存到内存或者redis或者数据库中，之后，并且把sessionid返回给客户端，此时，可以选择存到cookie中并且不设置过期时间（关闭session清除），也可以放到前端内存（即声明一个全局变量）中（关闭应用清除）。每次请求服务端数据时，服务端检查cookie是否存在sessionid并且进行验证，如果缓存中有sessionid，那么则通过，没有则重新登录</p>\n<p>sessionId生成策略：可以是随机数、也可以是客户端传来的数据</p>\n<p>特点：存放在<strong>服务端</strong>，服务端每次收到请求都会查询是否存在sessionid，会给服务端查询造成压力</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>客户端进行登录时，服务端生成一个token（字符串，可以有意义也可以无意义）返回给客户端并由客户端保存，之后每次请求，需要由客户端带上这个token，服务端进行验证</p>\n<p>以下是几种token中常用的策略（拓展、变式）</p>\n<ul>\n<li>双token，（多用于实现无感登录）<ul>\n<li>即有两种token，access token 用于请求数据，refresh token 用于刷新access token</li>\n<li>access token 有效期较短，refresh token 有效时间较长</li>\n<li>客户端登录时，服务端生成两个token，access token随请求返回到客户端，用于每次请求时进行验证；refresh token 放到 http<br>only cookie中，以使客户端无法访问，增加安全性，用于access token过期时进行刷新</li>\n</ul>\n</li>\n<li>JWT 一种 token 的 格式以及包含的信息 的*<em>规范</em><ul>\n<li>由三部分组成，头部、中部、尾部, 用.分割，如：xxxxx.yyyyy.zzzzz</li>\n<li>头部：加密方式等,使用base64编码</li>\n<li>中部：用户的信息，如：用户id等，使用base64编码</li>\n<li>尾部：头部和中部结合（简单拼接）后，使用头部声明的加密方式进行加密</li>\n<li>客户端进行储存，请求时，只需带上jwt，然后客户端进行解码验证，验证无误则有效，节省存储sessionid的服务器压力，用解码时间换取空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"OAuth2\"><a href=\"#OAuth2\" class=\"headerlink\" title=\"OAuth2\"></a>OAuth2</h3><p>简单的来说，OAuth2也就是第三方认证，比如你想用微信的号登录小红书这个过程，就是OAuth2的过程</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>这两天闲逛掘金，看到了一个19年大火的文章，讲的是token、cookie、session、jwt，和我之前认为的有一些不同<br>去伪留臻，记而存之</p>\n<p>附上链接：<a href=\"https://juejin.cn/post/6844904034181070861?searchId=202407022020106665740BE9EADAA2CD66\">https://juejin.cn/post/6844904034181070861?searchId=202407022020106665740BE9EADAA2CD66</a></p>\n<p>主要概念：</p>\n<ul>\n<li>session</li>\n<li>cookie</li>\n<li>token</li>\n<li>jwt json web token</li>\n<li>oauth2</li>\n</ul>\n<p><em><strong>session和token是一种 ”信息组成“ 的策略</strong></em></p>\n<p><em><strong>jwt是一种高级协议，解决了token中的一些问题</strong></em></p>\n<p><em><strong>cookie是一种信息载体，如同localstorage和sessionstorage</strong></em></p>\n<p><em><strong>Oauth2，第三方登录协议</strong></em></p>\n<p><strong>不同概念之间可比较性不高，这也是juejin那篇文章误导性很强的地方之一</strong></p>\n<h2 id=\"存储方式：cookie、localstorage、sessionStorage\"><a href=\"#存储方式：cookie、localstorage、sessionStorage\" class=\"headerlink\" title=\"存储方式：cookie、localstorage、sessionStorage\"></a>存储方式：cookie、localstorage、sessionStorage</h2><h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><p>cookie存储的信息大多被用于：</p>\n<ul>\n<li>会话状态管理<ul>\n<li>用户登陆状态等</li>\n</ul>\n</li>\n<li>个性化设置<ul>\n<li>自定义设置、主题和其他设置</li>\n</ul>\n</li>\n<li>浏览器行为跟踪<ul>\n<li>分析用户行为</li>\n</ul>\n</li>\n</ul>\n<p>浏览器第一次请求服务端数据，服务端设置cookie</p>\n<p>不过cookie存储空间较小，大约4k</p>\n<h3 id=\"localStorage、sessionStorage\"><a href=\"#localStorage、sessionStorage\" class=\"headerlink\" title=\"localStorage、sessionStorage\"></a>localStorage、sessionStorage</h3><p>两者的区别是，sessionStorage只在一次会话中有效</p>\n<h2 id=\"验证信息策略\"><a href=\"#验证信息策略\" class=\"headerlink\" title=\"验证信息策略\"></a>验证信息策略</h2><h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>浏览器第一次向服务端请求，服务端生成一个seesionid，并储存到内存或者redis或者数据库中，之后，并且把sessionid返回给客户端，此时，可以选择存到cookie中并且不设置过期时间（关闭session清除），也可以放到前端内存（即声明一个全局变量）中（关闭应用清除）。每次请求服务端数据时，服务端检查cookie是否存在sessionid并且进行验证，如果缓存中有sessionid，那么则通过，没有则重新登录</p>\n<p>sessionId生成策略：可以是随机数、也可以是客户端传来的数据</p>\n<p>特点：存放在<strong>服务端</strong>，服务端每次收到请求都会查询是否存在sessionid，会给服务端查询造成压力</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>客户端进行登录时，服务端生成一个token（字符串，可以有意义也可以无意义）返回给客户端并由客户端保存，之后每次请求，需要由客户端带上这个token，服务端进行验证</p>\n<p>以下是几种token中常用的策略（拓展、变式）</p>\n<ul>\n<li>双token，（多用于实现无感登录）<ul>\n<li>即有两种token，access token 用于请求数据，refresh token 用于刷新access token</li>\n<li>access token 有效期较短，refresh token 有效时间较长</li>\n<li>客户端登录时，服务端生成两个token，access token随请求返回到客户端，用于每次请求时进行验证；refresh token 放到 http<br>only cookie中，以使客户端无法访问，增加安全性，用于access token过期时进行刷新</li>\n</ul>\n</li>\n<li>JWT 一种 token 的 格式以及包含的信息 的*<em>规范</em><ul>\n<li>由三部分组成，头部、中部、尾部, 用.分割，如：xxxxx.yyyyy.zzzzz</li>\n<li>头部：加密方式等,使用base64编码</li>\n<li>中部：用户的信息，如：用户id等，使用base64编码</li>\n<li>尾部：头部和中部结合（简单拼接）后，使用头部声明的加密方式进行加密</li>\n<li>客户端进行储存，请求时，只需带上jwt，然后客户端进行解码验证，验证无误则有效，节省存储sessionid的服务器压力，用解码时间换取空间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"OAuth2\"><a href=\"#OAuth2\" class=\"headerlink\" title=\"OAuth2\"></a>OAuth2</h3><p>简单的来说，OAuth2也就是第三方认证，比如你想用微信的号登录小红书这个过程，就是OAuth2的过程</p>\n"},{"title":"前后端（React + Node）项目部署全流程及常见问题解析","date":"2024-09-08T11:33:24.931Z","updated":"2024-09-08T13:34:14.622Z","description":"本文详细记录了前后端项目（React + Node）部署过程中遇到的各种问题和解决方案，包括NVM、Node、npm、Linux大小写敏感、用户权限、SSH进程等关键点，旨在为开发者提供参考。","top_img":null,"_content":"\n粗糙，仅留档供个人使用\n记录一下部署用到的工具以及踩过的坑\n\n项目:\n\n1. 前端： javascript、react、vite\n2. 后端： node\n3. typescript\n\n当然不止这些，不过其他框架、工具之类的，不记也罢\n\n# 大致流程\n\n1. 购买一台服务器\n2. 配置环境\n3. 把项目放到服务器上(是否打包看个人情况)\n4. 运行\n\n其中购买服务器暂且按下不表\n\n# 配置环境\n\n## 安装node环境和npm (配套镜像)\n\n此处使用nvm\nnode version manager (node 版本管理工具)\n\ngithub网址：https://github.com/nvm-sh/nvm\n\n### 安装nvm\n\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n\n# or\n\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n```\n\n### 使用镜像\n\n如果安装nvm太慢,可以使用淘宝镜像\n\n```\nexport NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\ncurl -o- https://npmmirror.com/mirrors/nvm/install.sh | bash\n\n```\n\n### 激活\n\n安装完成后，运行以下命令来加载 NVM：\n\n```bash\nsource ~/.bashrc\n\n如果是Zsh\nsource ~/.zshrc\n```\n\n或者运行\n\n```\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n  [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n第一行设置了一个环境变量 $NVM_DIR，它指向 NVM 的安装目录。\n第二行检查 $NVM_DIR/nvm.sh 文件是否存在，如果存在，就执行它。这一步是加载 NVM 的必要步骤。\n\n确保 NVM 正确安装，您可以运行以下命令检查 NVM 版本：\n\n```bash\nnvm --version\n```\n\n### 安装Node.js\n\n使用 NVM 安装 Node.js\n\n```bash\nnvm install --lts\n\nnode --version\n```\n\n如果想安装或切换到其他版本的 Node.js，可以运行：\n\n```bash\nnvm install <version>\nnvm use <version>\n```\n\n例如，安装并使用 Node.js 16：\n\n```bash\nnvm install 16\nnvm use 16\n```\n\n### npm镜像\n\n在安装npm 包的时候可能会比较慢，配置国内镜像\n\n腾讯云镜像源\nnpm config set registry http://mirrors.cloud.tencent.com/npm/\n\n淘宝镜像源\nnpm config set registry https://registry.npmmirror.com\n\n华为云镜像源\nnpm config set registry https://mirrors.huaweicloud.com/repository/npm/\n\n## 配置Git\n\n### 安装git\n\n```\nsudo apt update\n\nsudo apt install git\n\ngit --version\n```\n\n### 配置SSH\n\n```\nssh-keygen -t rsa -C \"youremail@example.com\" -b 4096\n```\n\n其中\n-t 是加密方式\n-C 是常用的email标识号(亲测配不配email似乎没用)\n-b 生成的密钥大小，不配也行\n\n```\n//查看私钥\ncat ~/.ssh/id_rsa\n\n// 查看公钥\ncat ~/.ssh/id_rsa.pub\n```\n\n查看并复制公钥\n打开github的setting\n\n![img.png](ssh_step1.png)\n\n![img.png](14deploy/ssh_step2.png)\n\n之后就可以使用ssh拉取代码啦\n\n```\ngit clone xxxx\n```\n\n# 部署\n\n推荐一个工具:**finalshell**\n\n图形化ssh、fcp协议\n\n## 不打包部署\n\n这一部分比较简单\n\n首先通过git拉取对应的文件\n以下是我的文件夹\n--back_end\n|_front_end\n\n其中\nback_end是后端node程序，通过npm start启动，\nfront_end是vite，通过npm run dev启动\n\n小tips:\n通过package.json脚本可以一键启动多个程序\n\n```json\n{\n  \"devDependencies\": {\n    \"concurrently\": \"^8.2.2\"\n  },\n  \"scripts\": {\n    \"start-all\": \"concurrently \\\"npm start --prefix back_end\\\" \\\"npm run dev --prefix front_end\\\" \"\n  }\n}\n```\n\n--prefix： 在当前文件夹的某个目录运行\n\n之后在根目录运行即可\n\n```\nnpm run start-all\n\n```\n\n## 打包部署\n\n# 重要问题\n\n## 大小写敏感问题\n\nwindows系统对于文件路径和文件名大小写是**不敏感的**\n\n比如 import 路径\n./Test/photo.tsx\n和 实际路径\n./test/Photo.tsx\n\n在window系统上，如果你开发的时候把test目录改成了Test目录\ngit是**不会识别**到更改的\n\n但是linux在上面的导入中，会报错\n\nwindow启用大小写敏感：\n\n```\nfsutil file setCaseSensitiveInfo \"C:\\your\\folder\\path\" enable\n```\n\n把\"C:\\your\\folder\\path\" 替换为你的文件目录名\n不过只能对空目录用，先把文件转移除去，设置之后再放回来\n\n## Linux进程相关（如何保活后台应用 ?）\n\n在linux中，有下面几个概念：\n\n概念 描述\n**进程组**：一个或多个进程的集合，每一个进程组都有唯一一个进程组ID，即进程组\n**会话器**：一个或多个进程组的集合，有唯一一个会话期首进程（session leader）. 会话期ID为首进程的ID\n控制进程:与控制终端连接的会话期首进程叫做控制进程\n\n当用户登录到一个终端时，系统会为这个登录会话创建一个**会话（session**）。从用户登录到退出的整个过程中，所有在这个终端上运行的进程都属于同一个会话。\n\n![img.png](lunux_process.png)\n\n### 进程和进程组：\n\n每个进程都有一个独立的进程ID（PID），但它们还归属于一个更大的组织单位，称为\n进程组。一个进程组可以包含多个进程，并且有一个唯一的进程组ID。进程组允许多个进程一起执行操作，比如使用管道符号 “|” 连接的命令。\n\n### 会话和会话首进程：\n\n一个 会话 包含一个或多个进程组。每个会话都有一个唯一的领导者进程，称为 **会话首进程，并且它的ID就是会话的ID**。\n\n### 控制进程和控制终端：\n\n当一个会话与一个终端（如SSH连接的终端）关联时，负责与这个终端通信的进程就是\n控制进程，它通常是会话首进程。当终端检测到网络断开时，会向控制进程发送一个挂断信号（SIGHUP）。\n\n### 挂断信号的传播：\n\n如果控制进程收到SIGHUP信号并退出，会话中的所有前台进程组也会受到影响并终止。如果某个进程组中的进程已经停止，系统还会发送SIGHUP和SIGCONT信号，尝试重新启动它们。\n\n最后:\n当SSH会话断开时，系统会给控制进程发送一个SIGHUP信号，导致整个会话中的进程都被终止。这就是为什么当SSH连接关闭后，正在执行的任务也会随之取消。\n简而言之，SSH会话打开时运行的所有命令和进程（如bash）**都是它的子进程**。一旦SSH连接断开，系统会终止所有相关进程，导致未完成的任务被取消。\n","source":"_posts/14deploy.md","raw":"---\ntitle: 前后端（React + Node）项目部署全流程及常见问题解析\ndate: ':year-:month-:day :hour:00:00'\nupdated:\ndescription: 本文详细记录了前后端项目（React + Node）部署过程中遇到的各种问题和解决方案，包括NVM、Node、npm、Linux大小写敏感、用户权限、SSH进程等关键点，旨在为开发者提供参考。\ntop_img:\ntags:\n  - 开发\n  - 部署\n  - 妙手\n---\n\n粗糙，仅留档供个人使用\n记录一下部署用到的工具以及踩过的坑\n\n项目:\n\n1. 前端： javascript、react、vite\n2. 后端： node\n3. typescript\n\n当然不止这些，不过其他框架、工具之类的，不记也罢\n\n# 大致流程\n\n1. 购买一台服务器\n2. 配置环境\n3. 把项目放到服务器上(是否打包看个人情况)\n4. 运行\n\n其中购买服务器暂且按下不表\n\n# 配置环境\n\n## 安装node环境和npm (配套镜像)\n\n此处使用nvm\nnode version manager (node 版本管理工具)\n\ngithub网址：https://github.com/nvm-sh/nvm\n\n### 安装nvm\n\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n\n# or\n\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n```\n\n### 使用镜像\n\n如果安装nvm太慢,可以使用淘宝镜像\n\n```\nexport NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\ncurl -o- https://npmmirror.com/mirrors/nvm/install.sh | bash\n\n```\n\n### 激活\n\n安装完成后，运行以下命令来加载 NVM：\n\n```bash\nsource ~/.bashrc\n\n如果是Zsh\nsource ~/.zshrc\n```\n\n或者运行\n\n```\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n  [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n第一行设置了一个环境变量 $NVM_DIR，它指向 NVM 的安装目录。\n第二行检查 $NVM_DIR/nvm.sh 文件是否存在，如果存在，就执行它。这一步是加载 NVM 的必要步骤。\n\n确保 NVM 正确安装，您可以运行以下命令检查 NVM 版本：\n\n```bash\nnvm --version\n```\n\n### 安装Node.js\n\n使用 NVM 安装 Node.js\n\n```bash\nnvm install --lts\n\nnode --version\n```\n\n如果想安装或切换到其他版本的 Node.js，可以运行：\n\n```bash\nnvm install <version>\nnvm use <version>\n```\n\n例如，安装并使用 Node.js 16：\n\n```bash\nnvm install 16\nnvm use 16\n```\n\n### npm镜像\n\n在安装npm 包的时候可能会比较慢，配置国内镜像\n\n腾讯云镜像源\nnpm config set registry http://mirrors.cloud.tencent.com/npm/\n\n淘宝镜像源\nnpm config set registry https://registry.npmmirror.com\n\n华为云镜像源\nnpm config set registry https://mirrors.huaweicloud.com/repository/npm/\n\n## 配置Git\n\n### 安装git\n\n```\nsudo apt update\n\nsudo apt install git\n\ngit --version\n```\n\n### 配置SSH\n\n```\nssh-keygen -t rsa -C \"youremail@example.com\" -b 4096\n```\n\n其中\n-t 是加密方式\n-C 是常用的email标识号(亲测配不配email似乎没用)\n-b 生成的密钥大小，不配也行\n\n```\n//查看私钥\ncat ~/.ssh/id_rsa\n\n// 查看公钥\ncat ~/.ssh/id_rsa.pub\n```\n\n查看并复制公钥\n打开github的setting\n\n![img.png](ssh_step1.png)\n\n![img.png](14deploy/ssh_step2.png)\n\n之后就可以使用ssh拉取代码啦\n\n```\ngit clone xxxx\n```\n\n# 部署\n\n推荐一个工具:**finalshell**\n\n图形化ssh、fcp协议\n\n## 不打包部署\n\n这一部分比较简单\n\n首先通过git拉取对应的文件\n以下是我的文件夹\n--back_end\n|_front_end\n\n其中\nback_end是后端node程序，通过npm start启动，\nfront_end是vite，通过npm run dev启动\n\n小tips:\n通过package.json脚本可以一键启动多个程序\n\n```json\n{\n  \"devDependencies\": {\n    \"concurrently\": \"^8.2.2\"\n  },\n  \"scripts\": {\n    \"start-all\": \"concurrently \\\"npm start --prefix back_end\\\" \\\"npm run dev --prefix front_end\\\" \"\n  }\n}\n```\n\n--prefix： 在当前文件夹的某个目录运行\n\n之后在根目录运行即可\n\n```\nnpm run start-all\n\n```\n\n## 打包部署\n\n# 重要问题\n\n## 大小写敏感问题\n\nwindows系统对于文件路径和文件名大小写是**不敏感的**\n\n比如 import 路径\n./Test/photo.tsx\n和 实际路径\n./test/Photo.tsx\n\n在window系统上，如果你开发的时候把test目录改成了Test目录\ngit是**不会识别**到更改的\n\n但是linux在上面的导入中，会报错\n\nwindow启用大小写敏感：\n\n```\nfsutil file setCaseSensitiveInfo \"C:\\your\\folder\\path\" enable\n```\n\n把\"C:\\your\\folder\\path\" 替换为你的文件目录名\n不过只能对空目录用，先把文件转移除去，设置之后再放回来\n\n## Linux进程相关（如何保活后台应用 ?）\n\n在linux中，有下面几个概念：\n\n概念 描述\n**进程组**：一个或多个进程的集合，每一个进程组都有唯一一个进程组ID，即进程组\n**会话器**：一个或多个进程组的集合，有唯一一个会话期首进程（session leader）. 会话期ID为首进程的ID\n控制进程:与控制终端连接的会话期首进程叫做控制进程\n\n当用户登录到一个终端时，系统会为这个登录会话创建一个**会话（session**）。从用户登录到退出的整个过程中，所有在这个终端上运行的进程都属于同一个会话。\n\n![img.png](lunux_process.png)\n\n### 进程和进程组：\n\n每个进程都有一个独立的进程ID（PID），但它们还归属于一个更大的组织单位，称为\n进程组。一个进程组可以包含多个进程，并且有一个唯一的进程组ID。进程组允许多个进程一起执行操作，比如使用管道符号 “|” 连接的命令。\n\n### 会话和会话首进程：\n\n一个 会话 包含一个或多个进程组。每个会话都有一个唯一的领导者进程，称为 **会话首进程，并且它的ID就是会话的ID**。\n\n### 控制进程和控制终端：\n\n当一个会话与一个终端（如SSH连接的终端）关联时，负责与这个终端通信的进程就是\n控制进程，它通常是会话首进程。当终端检测到网络断开时，会向控制进程发送一个挂断信号（SIGHUP）。\n\n### 挂断信号的传播：\n\n如果控制进程收到SIGHUP信号并退出，会话中的所有前台进程组也会受到影响并终止。如果某个进程组中的进程已经停止，系统还会发送SIGHUP和SIGCONT信号，尝试重新启动它们。\n\n最后:\n当SSH会话断开时，系统会给控制进程发送一个SIGHUP信号，导致整个会话中的进程都被终止。这就是为什么当SSH连接关闭后，正在执行的任务也会随之取消。\n简而言之，SSH会话打开时运行的所有命令和进程（如bash）**都是它的子进程**。一旦SSH连接断开，系统会终止所有相关进程，导致未完成的任务被取消。\n","slug":"14deploy","published":1,"_id":"cm0tlvtb50000x06k97xk1tzl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>粗糙，仅留档供个人使用<br>记录一下部署用到的工具以及踩过的坑</p>\n<p>项目:</p>\n<ol>\n<li>前端： javascript、react、vite</li>\n<li>后端： node</li>\n<li>typescript</li>\n</ol>\n<p>当然不止这些，不过其他框架、工具之类的，不记也罢</p>\n<h1 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h1><ol>\n<li>购买一台服务器</li>\n<li>配置环境</li>\n<li>把项目放到服务器上(是否打包看个人情况)</li>\n<li>运行</li>\n</ol>\n<p>其中购买服务器暂且按下不表</p>\n<h1 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h1><h2 id=\"安装node环境和npm-配套镜像\"><a href=\"#安装node环境和npm-配套镜像\" class=\"headerlink\" title=\"安装node环境和npm (配套镜像)\"></a>安装node环境和npm (配套镜像)</h2><p>此处使用nvm<br>node version manager (node 版本管理工具)</p>\n<p>github网址：<a href=\"https://github.com/nvm-sh/nvm\">https://github.com/nvm-sh/nvm</a></p>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"># or</span><br><span class=\"line\"></span><br><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h3><p>如果安装nvm太慢,可以使用淘宝镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node</span><br><span class=\"line\">curl -o- https://npmmirror.com/mirrors/nvm/install.sh | bash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h3><p>安装完成后，运行以下命令来加载 NVM：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">如果是Zsh</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>或者运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;</span><br><span class=\"line\">  [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>\n\n<p>第一行设置了一个环境变量 $NVM_DIR，它指向 NVM 的安装目录。<br>第二行检查 $NVM_DIR&#x2F;nvm.sh 文件是否存在，如果存在，就执行它。这一步是加载 NVM 的必要步骤。</p>\n<p>确保 NVM 正确安装，您可以运行以下命令检查 NVM 版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>使用 NVM 安装 Node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install --lts</span><br><span class=\"line\"></span><br><span class=\"line\">node --version</span><br></pre></td></tr></table></figure>\n\n<p>如果想安装或切换到其他版本的 Node.js，可以运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br><span class=\"line\">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如，安装并使用 Node.js 16：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16</span><br><span class=\"line\">nvm use 16</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"npm镜像\"><a href=\"#npm镜像\" class=\"headerlink\" title=\"npm镜像\"></a>npm镜像</h3><p>在安装npm 包的时候可能会比较慢，配置国内镜像</p>\n<p>腾讯云镜像源<br>npm config set registry <a href=\"http://mirrors.cloud.tencent.com/npm/\">http://mirrors.cloud.tencent.com/npm/</a></p>\n<p>淘宝镜像源<br>npm config set registry <a href=\"https://registry.npmmirror.com/\">https://registry.npmmirror.com</a></p>\n<p>华为云镜像源<br>npm config set registry <a href=\"https://mirrors.huaweicloud.com/repository/npm/\">https://mirrors.huaweicloud.com/repository/npm/</a></p>\n<h2 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install git</span><br><span class=\"line\"></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置SSH\"><a href=\"#配置SSH\" class=\"headerlink\" title=\"配置SSH\"></a>配置SSH</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot; -b 4096</span><br></pre></td></tr></table></figure>\n\n<p>其中<br>-t 是加密方式<br>-C 是常用的email标识号(亲测配不配email似乎没用)<br>-b 生成的密钥大小，不配也行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看私钥</span><br><span class=\"line\">cat ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看公钥</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>查看并复制公钥<br>打开github的setting</p>\n<p><img src=\"/2024/09/08/14deploy/ssh_step1.png\" alt=\"img.png\"></p>\n<p><img src=\"/14deploy/ssh_step2.png\" alt=\"img.png\"></p>\n<p>之后就可以使用ssh拉取代码啦</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone xxxx</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>推荐一个工具:<strong>finalshell</strong></p>\n<p>图形化ssh、fcp协议</p>\n<h2 id=\"不打包部署\"><a href=\"#不打包部署\" class=\"headerlink\" title=\"不打包部署\"></a>不打包部署</h2><p>这一部分比较简单</p>\n<p>首先通过git拉取对应的文件<br>以下是我的文件夹<br>–back_end<br>|_front_end</p>\n<p>其中<br>back_end是后端node程序，通过npm start启动，<br>front_end是vite，通过npm run dev启动</p>\n<p>小tips:<br>通过package.json脚本可以一键启动多个程序</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;concurrently&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.2.2&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start-all&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;concurrently \\&quot;npm start --prefix back_end\\&quot; \\&quot;npm run dev --prefix front_end\\&quot; &quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>–prefix： 在当前文件夹的某个目录运行</p>\n<p>之后在根目录运行即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start-all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包部署\"><a href=\"#打包部署\" class=\"headerlink\" title=\"打包部署\"></a>打包部署</h2><h1 id=\"重要问题\"><a href=\"#重要问题\" class=\"headerlink\" title=\"重要问题\"></a>重要问题</h1><h2 id=\"大小写敏感问题\"><a href=\"#大小写敏感问题\" class=\"headerlink\" title=\"大小写敏感问题\"></a>大小写敏感问题</h2><p>windows系统对于文件路径和文件名大小写是<strong>不敏感的</strong></p>\n<p>比如 import 路径<br>.&#x2F;Test&#x2F;photo.tsx<br>和 实际路径<br>.&#x2F;test&#x2F;Photo.tsx</p>\n<p>在window系统上，如果你开发的时候把test目录改成了Test目录<br>git是<strong>不会识别</strong>到更改的</p>\n<p>但是linux在上面的导入中，会报错</p>\n<p>window启用大小写敏感：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fsutil file setCaseSensitiveInfo &quot;C:\\your\\folder\\path&quot; enable</span><br></pre></td></tr></table></figure>\n\n<p>把”C:\\your\\folder\\path” 替换为你的文件目录名<br>不过只能对空目录用，先把文件转移除去，设置之后再放回来</p>\n<h2 id=\"Linux进程相关（如何保活后台应用-）\"><a href=\"#Linux进程相关（如何保活后台应用-）\" class=\"headerlink\" title=\"Linux进程相关（如何保活后台应用 ?）\"></a>Linux进程相关（如何保活后台应用 ?）</h2><p>在linux中，有下面几个概念：</p>\n<p>概念 描述<br><strong>进程组</strong>：一个或多个进程的集合，每一个进程组都有唯一一个进程组ID，即进程组<br><strong>会话器</strong>：一个或多个进程组的集合，有唯一一个会话期首进程（session leader）. 会话期ID为首进程的ID<br>控制进程:与控制终端连接的会话期首进程叫做控制进程</p>\n<p>当用户登录到一个终端时，系统会为这个登录会话创建一个<strong>会话（session</strong>）。从用户登录到退出的整个过程中，所有在这个终端上运行的进程都属于同一个会话。</p>\n<p><img src=\"/2024/09/08/14deploy/lunux_process.png\" alt=\"img.png\"></p>\n<h3 id=\"进程和进程组：\"><a href=\"#进程和进程组：\" class=\"headerlink\" title=\"进程和进程组：\"></a>进程和进程组：</h3><p>每个进程都有一个独立的进程ID（PID），但它们还归属于一个更大的组织单位，称为<br>进程组。一个进程组可以包含多个进程，并且有一个唯一的进程组ID。进程组允许多个进程一起执行操作，比如使用管道符号 “|” 连接的命令。</p>\n<h3 id=\"会话和会话首进程：\"><a href=\"#会话和会话首进程：\" class=\"headerlink\" title=\"会话和会话首进程：\"></a>会话和会话首进程：</h3><p>一个 会话 包含一个或多个进程组。每个会话都有一个唯一的领导者进程，称为 <strong>会话首进程，并且它的ID就是会话的ID</strong>。</p>\n<h3 id=\"控制进程和控制终端：\"><a href=\"#控制进程和控制终端：\" class=\"headerlink\" title=\"控制进程和控制终端：\"></a>控制进程和控制终端：</h3><p>当一个会话与一个终端（如SSH连接的终端）关联时，负责与这个终端通信的进程就是<br>控制进程，它通常是会话首进程。当终端检测到网络断开时，会向控制进程发送一个挂断信号（SIGHUP）。</p>\n<h3 id=\"挂断信号的传播：\"><a href=\"#挂断信号的传播：\" class=\"headerlink\" title=\"挂断信号的传播：\"></a>挂断信号的传播：</h3><p>如果控制进程收到SIGHUP信号并退出，会话中的所有前台进程组也会受到影响并终止。如果某个进程组中的进程已经停止，系统还会发送SIGHUP和SIGCONT信号，尝试重新启动它们。</p>\n<p>最后:<br>当SSH会话断开时，系统会给控制进程发送一个SIGHUP信号，导致整个会话中的进程都被终止。这就是为什么当SSH连接关闭后，正在执行的任务也会随之取消。<br>简而言之，SSH会话打开时运行的所有命令和进程（如bash）<strong>都是它的子进程</strong>。一旦SSH连接断开，系统会终止所有相关进程，导致未完成的任务被取消。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>粗糙，仅留档供个人使用<br>记录一下部署用到的工具以及踩过的坑</p>\n<p>项目:</p>\n<ol>\n<li>前端： javascript、react、vite</li>\n<li>后端： node</li>\n<li>typescript</li>\n</ol>\n<p>当然不止这些，不过其他框架、工具之类的，不记也罢</p>\n<h1 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h1><ol>\n<li>购买一台服务器</li>\n<li>配置环境</li>\n<li>把项目放到服务器上(是否打包看个人情况)</li>\n<li>运行</li>\n</ol>\n<p>其中购买服务器暂且按下不表</p>\n<h1 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h1><h2 id=\"安装node环境和npm-配套镜像\"><a href=\"#安装node环境和npm-配套镜像\" class=\"headerlink\" title=\"安装node环境和npm (配套镜像)\"></a>安装node环境和npm (配套镜像)</h2><p>此处使用nvm<br>node version manager (node 版本管理工具)</p>\n<p>github网址：<a href=\"https://github.com/nvm-sh/nvm\">https://github.com/nvm-sh/nvm</a></p>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"># or</span><br><span class=\"line\"></span><br><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h3><p>如果安装nvm太慢,可以使用淘宝镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node</span><br><span class=\"line\">curl -o- https://npmmirror.com/mirrors/nvm/install.sh | bash</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h3><p>安装完成后，运行以下命令来加载 NVM：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">如果是Zsh</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>或者运行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;</span><br><span class=\"line\">  [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>\n\n<p>第一行设置了一个环境变量 $NVM_DIR，它指向 NVM 的安装目录。<br>第二行检查 $NVM_DIR&#x2F;nvm.sh 文件是否存在，如果存在，就执行它。这一步是加载 NVM 的必要步骤。</p>\n<p>确保 NVM 正确安装，您可以运行以下命令检查 NVM 版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>使用 NVM 安装 Node.js</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install --lts</span><br><span class=\"line\"></span><br><span class=\"line\">node --version</span><br></pre></td></tr></table></figure>\n\n<p>如果想安装或切换到其他版本的 Node.js，可以运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br><span class=\"line\">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如，安装并使用 Node.js 16：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16</span><br><span class=\"line\">nvm use 16</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"npm镜像\"><a href=\"#npm镜像\" class=\"headerlink\" title=\"npm镜像\"></a>npm镜像</h3><p>在安装npm 包的时候可能会比较慢，配置国内镜像</p>\n<p>腾讯云镜像源<br>npm config set registry <a href=\"http://mirrors.cloud.tencent.com/npm/\">http://mirrors.cloud.tencent.com/npm/</a></p>\n<p>淘宝镜像源<br>npm config set registry <a href=\"https://registry.npmmirror.com/\">https://registry.npmmirror.com</a></p>\n<p>华为云镜像源<br>npm config set registry <a href=\"https://mirrors.huaweicloud.com/repository/npm/\">https://mirrors.huaweicloud.com/repository/npm/</a></p>\n<h2 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install git</span><br><span class=\"line\"></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置SSH\"><a href=\"#配置SSH\" class=\"headerlink\" title=\"配置SSH\"></a>配置SSH</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot; -b 4096</span><br></pre></td></tr></table></figure>\n\n<p>其中<br>-t 是加密方式<br>-C 是常用的email标识号(亲测配不配email似乎没用)<br>-b 生成的密钥大小，不配也行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看私钥</span><br><span class=\"line\">cat ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看公钥</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>查看并复制公钥<br>打开github的setting</p>\n<p><img src=\"/2024/09/08/14deploy/ssh_step1.png\" alt=\"img.png\"></p>\n<p><img src=\"/14deploy/ssh_step2.png\" alt=\"img.png\"></p>\n<p>之后就可以使用ssh拉取代码啦</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone xxxx</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>推荐一个工具:<strong>finalshell</strong></p>\n<p>图形化ssh、fcp协议</p>\n<h2 id=\"不打包部署\"><a href=\"#不打包部署\" class=\"headerlink\" title=\"不打包部署\"></a>不打包部署</h2><p>这一部分比较简单</p>\n<p>首先通过git拉取对应的文件<br>以下是我的文件夹<br>–back_end<br>|_front_end</p>\n<p>其中<br>back_end是后端node程序，通过npm start启动，<br>front_end是vite，通过npm run dev启动</p>\n<p>小tips:<br>通过package.json脚本可以一键启动多个程序</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;concurrently&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.2.2&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start-all&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;concurrently \\&quot;npm start --prefix back_end\\&quot; \\&quot;npm run dev --prefix front_end\\&quot; &quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>–prefix： 在当前文件夹的某个目录运行</p>\n<p>之后在根目录运行即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run start-all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包部署\"><a href=\"#打包部署\" class=\"headerlink\" title=\"打包部署\"></a>打包部署</h2><h1 id=\"重要问题\"><a href=\"#重要问题\" class=\"headerlink\" title=\"重要问题\"></a>重要问题</h1><h2 id=\"大小写敏感问题\"><a href=\"#大小写敏感问题\" class=\"headerlink\" title=\"大小写敏感问题\"></a>大小写敏感问题</h2><p>windows系统对于文件路径和文件名大小写是<strong>不敏感的</strong></p>\n<p>比如 import 路径<br>.&#x2F;Test&#x2F;photo.tsx<br>和 实际路径<br>.&#x2F;test&#x2F;Photo.tsx</p>\n<p>在window系统上，如果你开发的时候把test目录改成了Test目录<br>git是<strong>不会识别</strong>到更改的</p>\n<p>但是linux在上面的导入中，会报错</p>\n<p>window启用大小写敏感：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fsutil file setCaseSensitiveInfo &quot;C:\\your\\folder\\path&quot; enable</span><br></pre></td></tr></table></figure>\n\n<p>把”C:\\your\\folder\\path” 替换为你的文件目录名<br>不过只能对空目录用，先把文件转移除去，设置之后再放回来</p>\n<h2 id=\"Linux进程相关（如何保活后台应用-）\"><a href=\"#Linux进程相关（如何保活后台应用-）\" class=\"headerlink\" title=\"Linux进程相关（如何保活后台应用 ?）\"></a>Linux进程相关（如何保活后台应用 ?）</h2><p>在linux中，有下面几个概念：</p>\n<p>概念 描述<br><strong>进程组</strong>：一个或多个进程的集合，每一个进程组都有唯一一个进程组ID，即进程组<br><strong>会话器</strong>：一个或多个进程组的集合，有唯一一个会话期首进程（session leader）. 会话期ID为首进程的ID<br>控制进程:与控制终端连接的会话期首进程叫做控制进程</p>\n<p>当用户登录到一个终端时，系统会为这个登录会话创建一个<strong>会话（session</strong>）。从用户登录到退出的整个过程中，所有在这个终端上运行的进程都属于同一个会话。</p>\n<p><img src=\"/2024/09/08/14deploy/lunux_process.png\" alt=\"img.png\"></p>\n<h3 id=\"进程和进程组：\"><a href=\"#进程和进程组：\" class=\"headerlink\" title=\"进程和进程组：\"></a>进程和进程组：</h3><p>每个进程都有一个独立的进程ID（PID），但它们还归属于一个更大的组织单位，称为<br>进程组。一个进程组可以包含多个进程，并且有一个唯一的进程组ID。进程组允许多个进程一起执行操作，比如使用管道符号 “|” 连接的命令。</p>\n<h3 id=\"会话和会话首进程：\"><a href=\"#会话和会话首进程：\" class=\"headerlink\" title=\"会话和会话首进程：\"></a>会话和会话首进程：</h3><p>一个 会话 包含一个或多个进程组。每个会话都有一个唯一的领导者进程，称为 <strong>会话首进程，并且它的ID就是会话的ID</strong>。</p>\n<h3 id=\"控制进程和控制终端：\"><a href=\"#控制进程和控制终端：\" class=\"headerlink\" title=\"控制进程和控制终端：\"></a>控制进程和控制终端：</h3><p>当一个会话与一个终端（如SSH连接的终端）关联时，负责与这个终端通信的进程就是<br>控制进程，它通常是会话首进程。当终端检测到网络断开时，会向控制进程发送一个挂断信号（SIGHUP）。</p>\n<h3 id=\"挂断信号的传播：\"><a href=\"#挂断信号的传播：\" class=\"headerlink\" title=\"挂断信号的传播：\"></a>挂断信号的传播：</h3><p>如果控制进程收到SIGHUP信号并退出，会话中的所有前台进程组也会受到影响并终止。如果某个进程组中的进程已经停止，系统还会发送SIGHUP和SIGCONT信号，尝试重新启动它们。</p>\n<p>最后:<br>当SSH会话断开时，系统会给控制进程发送一个SIGHUP信号，导致整个会话中的进程都被终止。这就是为什么当SSH连接关闭后，正在执行的任务也会随之取消。<br>简而言之，SSH会话打开时运行的所有命令和进程（如bash）<strong>都是它的子进程</strong>。一旦SSH连接断开，系统会终止所有相关进程，导致未完成的任务被取消。</p>\n"}],"PostAsset":[{"_id":"source/_posts/10http/App-Tsl.png","slug":"App-Tsl.png","post":"clzoy7gdi0001zw6khpjshz59","modified":0,"renderable":0},{"_id":"source/_posts/10http/http2.png","slug":"http2.png","post":"clzoy7gdi0001zw6khpjshz59","modified":0,"renderable":0},{"_id":"source/_posts/10http/multi-tcp.png","slug":"multi-tcp.png","post":"clzoy7gdi0001zw6khpjshz59","modified":0,"renderable":0},{"_id":"source/_posts/10http/strong-save.png","slug":"strong-save.png","post":"clzoy7gdi0001zw6khpjshz59","modified":0,"renderable":0},{"_id":"source/_posts/11oauth2-sso/loginsuccess.jpg","slug":"loginsuccess.jpg","post":"clzoy7gdm0003zw6k47vo6txz","modified":0,"renderable":0},{"_id":"source/_posts/11oauth2-sso/oauth2.png","slug":"oauth2.png","post":"clzoy7gdm0003zw6k47vo6txz","modified":0,"renderable":0},{"_id":"source/_posts/11oauth2-sso/ssoa.png","slug":"ssoa.png","post":"clzoy7gdm0003zw6k47vo6txz","modified":0,"renderable":0},{"_id":"source/_posts/11oauth2-sso/wechatusers.jpg","slug":"wechatusers.jpg","post":"clzoy7gdm0003zw6k47vo6txz","modified":0,"renderable":0},{"_id":"source/_posts/11oauth2-sso/xichuangzhu.jpg","slug":"xichuangzhu.jpg","post":"clzoy7gdm0003zw6k47vo6txz","modified":0,"renderable":0},{"_id":"source/_posts/12lexical-env/bibao-example.jpg","slug":"bibao-example.jpg","post":"clzoy7gdo0005zw6k9g7k0rt0","modified":0,"renderable":0},{"_id":"source/_posts/12lexical-env/count-example.png","slug":"count-example.png","post":"clzoy7gdo0005zw6k9g7k0rt0","modified":0,"renderable":0},{"_id":"source/_posts/12lexical-env/functioncreate.png","slug":"functioncreate.png","post":"clzoy7gdo0005zw6k9g7k0rt0","modified":0,"renderable":0},{"_id":"source/_posts/13.2TypeScript/Untitled.png","slug":"Untitled.png","post":"clzoy7gdx000dzw6kbpdiaoym","modified":0,"renderable":0},{"_id":"source/_posts/13.2TypeScript/Untitled1.png","slug":"Untitled1.png","post":"clzoy7gdx000dzw6kbpdiaoym","modified":0,"renderable":0},{"_id":"source/_posts/13.2TypeScript/Untitled2.png","slug":"Untitled2.png","post":"clzoy7gdx000dzw6kbpdiaoym","modified":0,"renderable":0},{"_id":"source/_posts/13.2TypeScript/Untitled3.png","slug":"Untitled3.png","post":"clzoy7gdx000dzw6kbpdiaoym","modified":0,"renderable":0},{"_id":"source/_posts/13.2TypeScript/Untitled4.png","slug":"Untitled4.png","post":"clzoy7gdx000dzw6kbpdiaoym","modified":0,"renderable":0},{"_id":"source/_posts/13.2TypeScript/Untitled5.png","slug":"Untitled5.png","post":"clzoy7gdx000dzw6kbpdiaoym","modified":0,"renderable":0},{"_id":"source/_posts/13.2TypeScript/Untitled6.png","slug":"Untitled6.png","post":"clzoy7gdx000dzw6kbpdiaoym","modified":0,"renderable":0},{"_id":"source/_posts/6ospp/casibase.png","slug":"casibase.png","post":"clzoy7geg001hzw6kblkhbumg","modified":0,"renderable":0},{"_id":"source/_posts/6ospp/prdetails.png","slug":"prdetails.png","post":"clzoy7geg001hzw6kblkhbumg","modified":0,"renderable":0},{"_id":"source/_posts/6ospp/prs.png","slug":"prs.png","post":"clzoy7geg001hzw6kblkhbumg","modified":0,"renderable":0},{"_id":"source/_posts/7long/ban.jpg","slug":"ban.jpg","post":"clzoy7gei001izw6kgj2a0zb3","modified":0,"renderable":0},{"_id":"source/_posts/7long/helloworld.jpg","slug":"helloworld.jpg","post":"clzoy7gei001izw6kgj2a0zb3","modified":0,"renderable":0},{"_id":"source/_posts/7long/login.jpg","slug":"login.jpg","post":"clzoy7gei001izw6kgj2a0zb3","modified":0,"renderable":0},{"_id":"source/_posts/7long/total.jpg","slug":"total.jpg","post":"clzoy7gei001izw6kgj2a0zb3","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/curr-wlp.png","slug":"curr-wlp.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/example.png","slug":"example.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/fibertree.png","slug":"fibertree.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/reactvsflutter1.png","slug":"reactvsflutter1.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/render1.png","slug":"render1.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/rich-nor.png","slug":"rich-nor.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/rich-nor2.png","slug":"rich-nor2.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/text-from-rich.png","slug":"text-from-rich.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/update.jpg","slug":"update.jpg","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/9flutter-react/whydeepfirst.png","slug":"whydeepfirst.png","post":"clzoy7gej001kzw6khjvhgm0s","modified":0,"renderable":0},{"_id":"source/_posts/14deploy/lunux_process.png","post":"cm0tlvtb50000x06k97xk1tzl","slug":"lunux_process.png","modified":1,"renderable":1},{"_id":"source/_posts/14deploy/ssh_step1.png","post":"cm0tlvtb50000x06k97xk1tzl","slug":"ssh_step1.png","modified":1,"renderable":1},{"_id":"source/_posts/14deploy/ssh_step2.png","post":"cm0tlvtb50000x06k97xk1tzl","slug":"ssh_step2.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"clzoy7gdw000czw6k86gibidf","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7ge0000fzw6k39yuei36"},{"post_id":"clzoy7gdm0003zw6k47vo6txz","tag_id":"clzoy7gdq0006zw6k0di318pb","_id":"clzoy7ge3000hzw6k8gz92vja"},{"post_id":"clzoy7gdm0003zw6k47vo6txz","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7ge6000kzw6k3rtk1kgl"},{"post_id":"clzoy7gdx000dzw6kbpdiaoym","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7ge7000mzw6kdiusfszz"},{"post_id":"clzoy7gdo0005zw6k9g7k0rt0","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7ge8000pzw6k9wbk0ki3"},{"post_id":"clzoy7gds0008zw6k20gb0je1","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7ge8000qzw6kf6zd620a"},{"post_id":"clzoy7gdt0009zw6k38yy059o","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7ge9000szw6k5qayboe6"},{"post_id":"clzoy7gdu000azw6kensr8vgz","tag_id":"clzoy7ge9000rzw6kg0vd23qf","_id":"clzoy7gea000vzw6kgvwh478y"},{"post_id":"clzoy7gdu000azw6kensr8vgz","tag_id":"clzoy7ge9000tzw6k14ky3gq1","_id":"clzoy7gea000wzw6k6cwfdm7v"},{"post_id":"clzoy7ge1000gzw6k6ntl7t6q","tag_id":"clzoy7ge9000rzw6kg0vd23qf","_id":"clzoy7geb0010zw6kaopt74k7"},{"post_id":"clzoy7ge1000gzw6k6ntl7t6q","tag_id":"clzoy7ge9000tzw6k14ky3gq1","_id":"clzoy7geb0011zw6k6hssh0g9"},{"post_id":"clzoy7ge1000gzw6k6ntl7t6q","tag_id":"clzoy7gea000yzw6k6lfm1xs4","_id":"clzoy7geb0013zw6k5lclco3l"},{"post_id":"clzoy7ge3000izw6k22wtd3ju","tag_id":"clzoy7ge9000rzw6kg0vd23qf","_id":"clzoy7geb0015zw6k0bkm4wz3"},{"post_id":"clzoy7ge3000izw6k22wtd3ju","tag_id":"clzoy7ge9000tzw6k14ky3gq1","_id":"clzoy7geb0016zw6kc5gw7d80"},{"post_id":"clzoy7ge3000izw6k22wtd3ju","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7gec0018zw6k5bclezh8"},{"post_id":"clzoy7ge6000lzw6kcjfp62ej","tag_id":"clzoy7ge9000tzw6k14ky3gq1","_id":"clzoy7gec001bzw6khyq2dd6l"},{"post_id":"clzoy7ge6000lzw6kcjfp62ej","tag_id":"clzoy7geb0017zw6kgwuvhez3","_id":"clzoy7gec001czw6k2l6khxh1"},{"post_id":"clzoy7ge6000lzw6kcjfp62ej","tag_id":"clzoy7gdq0006zw6k0di318pb","_id":"clzoy7gec001dzw6kbrm3g64v"},{"post_id":"clzoy7ge6000lzw6kcjfp62ej","tag_id":"clzoy7gec0019zw6k3q1ob09f","_id":"clzoy7ged001ezw6k5e2772br"},{"post_id":"clzoy7ge7000nzw6kgcx0ebjq","tag_id":"clzoy7gdq0006zw6k0di318pb","_id":"clzoy7ged001fzw6kg63y0g90"},{"post_id":"clzoy7ge7000nzw6kgcx0ebjq","tag_id":"clzoy7gec001azw6k9e4c1njl","_id":"clzoy7ged001gzw6k67sa3j0w"},{"post_id":"clzoy7gej001kzw6khjvhgm0s","tag_id":"clzoy7gdq0006zw6k0di318pb","_id":"clzoy7gel001mzw6kg4f99qxt"},{"post_id":"clzoy7gej001kzw6khjvhgm0s","tag_id":"clzoy7gec0019zw6k3q1ob09f","_id":"clzoy7gel001ozw6k6kyn1wgy"},{"post_id":"clzoy7gek001lzw6k91kzgb9p","tag_id":"clzoy7gdv000bzw6k7o3b41t3","_id":"clzoy7gel001pzw6kbokxcr4f"},{"post_id":"clzoy7geg001hzw6kblkhbumg","tag_id":"clzoy7gej001jzw6k52yh87ai","_id":"clzoy7gel001rzw6k2nye58wh"},{"post_id":"clzoy7geg001hzw6kblkhbumg","tag_id":"clzoy7gel001nzw6kg280bzui","_id":"clzoy7gel001szw6k5a632ydr"},{"post_id":"clzoy7gei001izw6kgj2a0zb3","tag_id":"clzoy7gel001qzw6k9jlgbpj0","_id":"clzoy7gem001uzw6kfsd09d45"},{"post_id":"clzoy7gei001izw6kgj2a0zb3","tag_id":"clzoy7gel001tzw6kdsxkab3z","_id":"clzoy7gem001vzw6k0i4w6ffk"},{"post_id":"cm0tlvtb50000x06k97xk1tzl","tag_id":"cm0tlvtb70001x06kcplhduo7","_id":"cm0tlvtba0003x06ka0ytfthw"},{"post_id":"cm0tlvtb50000x06k97xk1tzl","tag_id":"cm0tlvtb90002x06k5v7kc76v","_id":"cm0tlvtba0004x06kbxtuays0"},{"post_id":"cm0tlvtb50000x06k97xk1tzl","tag_id":"clzoy7gec0019zw6k3q1ob09f","_id":"cm0tlvtba0005x06k46rd37dv"}],"Tag":[{"name":"develop","_id":"clzoy7gdq0006zw6k0di318pb"},{"name":"本手","_id":"clzoy7gdv000bzw6k7o3b41t3"},{"name":"android","_id":"clzoy7ge9000rzw6kg0vd23qf"},{"name":"flutter","_id":"clzoy7ge9000tzw6k14ky3gq1"},{"name":"俗手","_id":"clzoy7gea000yzw6k6lfm1xs4"},{"name":"ai","_id":"clzoy7geb0017zw6kgwuvhez3"},{"name":"妙手","_id":"clzoy7gec0019zw6k3q1ob09f"},{"name":"js","_id":"clzoy7gec001azw6k9e4c1njl"},{"name":"开源","_id":"clzoy7gej001jzw6k52yh87ai"},{"name":"ospp","_id":"clzoy7gel001nzw6kg280bzui"},{"name":"development","_id":"clzoy7gel001qzw6k9jlgbpj0"},{"name":"记录","_id":"clzoy7gel001tzw6kdsxkab3z"},{"name":"开发","_id":"cm0tlvtb70001x06kcplhduo7"},{"name":"部署","_id":"cm0tlvtb90002x06k5v7kc76v"}]}}